{
    "tf.signal.rfft": {
        "Parameter type": {
            "input": "Tensor (float32, float64)",
            "fft_length": "Tensor (int32)"
        },
        "Mandatory Parameters": [
            "input",
            "fft_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.expm": {
        "Parameter type": {
            "input": "Tensor (shape: [..., M, M])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.acosh": {
        "Parameter type": {
            "x": "Tensor (type: bfloat16, half, float32, float64, complex64, complex128)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.image.apply_affine_transform": {
        "Parameter type": {
            "input": "Tensor (shape: (minibatch,, in_channels,, iW))",
            "weight": "Tensor (shape: (out_channels,, in_channels // groups, kW))",
            "bias": "Optional[Tensor] (shape: (out_channels))",
            "stride": "Union[int,, Tuple[int]] (default: 1)",
            "padding": "Union[int, Tuple[int]], str] (default: 0; options: 'valid','same')",
            "dilation": "Union[int, Tuple[int]] (default: 1)",
            "groups": "int (default: 1)"
        },
        "Mandatory Parameters": [
            "input",
            "weight"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "stride",
            "dilation",
            "(stride>1)&(dilation>1)"
        ]
    },
    "tf.experimental.numpy.real": {
        "Parameter type": {
            "input": "Tensor (shape: (minibatch, in_channels iW))",
            "weight": "Tensor (shape: (out_channels in_channels // groups kW))",
            "bias": "Optional[Tensor] (shape: (out_channels))",
            "stride": "Union[int, Tuple[int]] (default: 1)",
            "padding": "Union[int  Tuple[int], str] (default: 0; options: 'valid','same')",
            "dilation": "Union[int  Tuple[int]] (default: 1)",
            "groups": "int (default: 1)"
        },
        "Mandatory Parameters": [
            "input",
            "weight"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation",
            "(strides>1)&(dilation>1)"
        ]
    },
    "tf.keras.layers.GlobalMaxPool1D": {
        "Parameter type": {
            "data_format": "str (either 'channels_last' or 'channels_first')",
            "keepdims": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "data_format"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "data_format",
            "keepdims",
            "(data_format='channels_last')&(keepdims=False)"
        ]
    },
    "tf.random_uniform_initializer": {
        "Parameter type": {
            "minval": "Union[Scalar, Tensor]",
            "maxval": "Union[Scalar, Tensor]",
            "seed": "int"
        },
        "Mandatory Parameters": [
            "minval",
            "maxval"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.slogdet": {
        "Parameter type": {
            "input": "Tensor (shape: [N, M, M])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.text.text_to_word_sequence": {
        "Parameter type": {
            "input": "Tensor (shape: (minibatch, in_channels iW))",
            "weight": "Tensor (shape: (out_channels in_channels // groups kW))",
            "bias": "Optional[Tensor] (shape: (out_channels))",
            "stride": "Union[int, Tuple[int]] (default: 1)",
            "padding": "Union[int, Tuple[int], str] (default: 0; options: 'valid','same')",
            "dilation": "Union[int  Tuple[int]] (default: 1)",
            "groups": "int (default: 1)"
        },
        "Mandatory Parameters": [
            "input",
            "weight"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "stride",
            "dilation",
            "(stride>1)&(dilation>1)"
        ]
    },
    "tf.dtypes.as_dtype": {
        "Parameter type": {
            "type_value": "Union[tf.DType, str, np.dtype]",
            "input": "Tensor (shape: (minibatch, in_channels, iW))",
            "weight": "Tensor (shape: (out_channels in in_channels // groups kW))",
            "bias": "Optional[Tensor] (shape: (out_channels))",
            "stride": "Union[int, Tuple[int]] (default: 1)",
            "padding": "Union[int, Tuple[int], str] (default: 0; options: 'valid','same')",
            "dilation": "Union[int, Tuple[int]] (default: 1)",
            "groups": "int (default: 1)"
        },
        "Mandatory Parameters": [
            "type_value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.parse_single_example": {
        "Parameter type": {
            "serialized": "str",
            "features": "dict",
            "example_names": "Optional[str]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "serialized",
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.logdet": {
        "Parameter type": {
            "matrix": "Tensor (shape: [..., M, M])"
        },
        "Mandatory Parameters": [
            "matrix"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.unicode_encode": {
        "Parameter type": {
            "input": "Tensor (shape: (N+1 dimensional potentially ragged integer tensor with shape [D1...DN, num_chars])",
            "output_encoding": "str (optional; default: 'UTF-8')",
            "errors": "str (optional; default:'replace')",
            "replacement_char": "int (optional; default: 0xFFFD (U+65533))",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input",
            "output_encoding"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "errors",
                "replacement_char"
            ]
        ],
        "Mandatory Coexistence Parameters": [
            [
                "input",
                "output_encoding"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": [
            "errors",
            "output_encoding",
            "(errors='replace')&(output_encoding='UTF-8')"
        ]
    },
    "tf.keras.utils.plot_model": {
        "Parameter type": {
            "model": "Keras Model instance",
            "to_file": "str",
            "show_shapes": "bool",
            "show_dtype": "bool",
            "show_layer_names": "bool",
            "rankdir": "str",
            "expand_nested": "bool",
            "dpi": "int",
            "show_layer_activations": "bool",
            "show_trainable": "bool"
        },
        "Mandatory Parameters": [
            "model",
            "to_file"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "show_shapes",
                "show_dtype"
            ],
            [
                "show_layer_names",
                "show_dtype"
            ]
        ],
        "Mandatory Coexistence Parameters": [
            [
                "MODEL",
                "to_file",
                "show_shapes"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": [
            "rankdir",
            "expand_nested",
            "(rankdir=='TB')&(expand_nested==True)"
        ]
    },
    "tf.queue.RandomShuffleQueue": {
        "Parameter type": {
            "input": "Tensor (shape: (minibatch, in_channels iW))",
            "weight": "Tensor (shape: (out_channels in_channels // groups kW))",
            "bias": "Optional[Tensor] (shape: (out_channels))",
            "stride": "Union[int, Tuple[int]] (default: 1)",
            "padding": "Union[int, Tuple[int], str] (default: 0; options: 'valid','same')",
            "dilation": "Union[int] (default: 1)",
            "groups": "int (default: 1)"
        },
        "Mandatory Parameters": [
            "input",
            "weight"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "stride",
            "dilation",
            "(stride>1)&(dilation>1)"
        ]
    },
    "tf.math.xlog1py": {
        "Parameter type": {
            "x": "Tensor (type: half, float32, complex64, complex128)",
            "y": "Tensor (type: half, float32 float64 complex64 complex128)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.arcsinh": {
        "Parameter type": {
            "input": "Tensor",
            "weight": "Tensor",
            "bias": "Optional[Tensor]",
            "stride": "Union[int, Tuple[int]]",
            "padding": "Union[int, Tuple[int], str]",
            "dilation": "Union[int, Tuple[int]]",
            "groups": "int"
        },
        "Mandatory Parameters": [
            "input",
            "weight"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.fliplr": {
        "Parameter type": {
            "input": "Tensor (shape: (minibatch, in_channels iW))",
            "weight": "Tensor (shape: (out_channels in_channels // groups kW))",
            "bias": "Optional[Tensor] (shape: (out_channels))",
            "stride": "Union[int, Tuple[int]] (default: 1)",
            "padding": "Union[int  Tuple[int], str] (default: 0; options: 'valid','same')",
            "dilation": "Union[int  Tuple[int]] (default: 1)",
            "groups": "int (default: 1)"
        },
        "Mandatory Parameters": [
            "input",
            "weight"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation",
            "(strides>1)&(dilation>1)"
        ]
    },
    "tf.keras.constraints.deserialize": {
        "Parameter type": {
            "input": "Tensor (shape: (minibatch, in_channels iW))",
            "weight": "Tensor (shape: (out_channels in_channels // groups kW))",
            "bias": "Optional[Tensor] (shape: (out_channels))",
            "stride": "Union[int, Tuple[int]] (default: 1)",
            "padding": "Union[int, Tuple[int], str] (default: 0; options: 'valid','same')",
            "dilation": "Union[int  Tuple[int]] (default: 1)",
            "groups": "int (default: 1)"
        },
        "Mandatory Parameters": [
            "input",
            "weight"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "stride",
            "dilation",
            "(stride>1)&(dilation>1)"
        ]
    },
    "tf.sysconfig.get_compile_flags": {
        "Parameter type": {
            "input": "Tensor (shape: (minibatch, in_channels iW))",
            "weight": "Tensor (shape: (out_channels in_channels // groups kW))",
            "bias": "Optional[Tensor] (shape: (out_channels))",
            "stride": "Union[int, Tuple[int]] (default: 1)",
            "padding": "Union[int, Tuple[int], str] (default: 0; options: 'valid','same')",
            "dilation": "Union[int] (default: 1)",
            "groups": "int (default: 1)"
        },
        "Mandatory Parameters": [
            "input",
            "weight"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation",
            "(strides>1)&(dilation>1)"
        ]
    },
    "tf.parallel_stack": {
        "Parameter type": {
            "values": "List[Tensor] (shape: (A, B, C))",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "values"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ragged.constant": {
        "Parameter type": {
            "pylist": "Tensor (shape: variable)",
            "dtype": "str (default: tf.float32)",
            "ragged_rank": "int (default: max(0, K - 1))",
            "inner_shape": "Tuple[int] (default: ())",
            "name": "str (optional)",
            "row_splits_dtype": "Union[tf.int32, tf.int64] (default: tf.int64)"
        },
        "Mandatory Parameters": [
            "pylist",
            "dtype"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [
            [
                "pylist",
                "dtype"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": [
            "ragged_rank",
            "inner_shape",
            "(ragged_rank>0)&(inner_shape!=())"
        ]
    }
}
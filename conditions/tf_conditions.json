{
    "tf.image.extract_patches": {
        "Parameter type": {
            "images": "Tensor (shape: [batch, in_rows, in_cols, depth])",
            "sizes": "Tensor (must be [1, size_rows, size_cols, 1])",
            "strides": "Tensor (must be [1, stride_rows, stride_cols, 1])",
            "rates": "Tensor (must be [1, rate_rows, rate_cols, 1])",
            "padding": "str (options: 'VALID', 'SAME')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "images",
            "sizes",
            "strides",
            "rates",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.rfft": {
        "Parameter type": {
            "input": "Tensor (float32 or float64)",
            "fft_length": "Tensor (int32, shape [1])",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.expm": {
        "Parameter type": {
            "input": "Tensor (shape: [..., M, M])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.acosh": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.SeparableConv2D": {
        "Parameter type": {
            "filters": "int",
            "kernel_size": "Union[int, Tuple[int, int]]",
            "strides": "Union[int, Tuple[int, int]] (default: (1, 1))",
            "padding": "str (default: 'valid'; options: 'valid', 'same')",
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')",
            "dilation_rate": "Union[int, Tuple[int, int]] (default: (1, 1))",
            "depth_multiplier": "int (default: 1)",
            "activation": "Optional[Activation] (default: None)",
            "use_bias": "bool (default: True)",
            "depthwise_initializer": "Optional[Initializer] (default: 'glorot_uniform')",
            "pointwise_initializer": "Optional[Initializer] (default: 'glorot_uniform')",
            "bias_initializer": "Optional[Initializer] (default: 'zeros')",
            "depthwise_regularizer": "Optional[Regularizer] (default: None)",
            "pointwise_regularizer": "Optional[Regularizer] (default: None)",
            "bias_regularizer": "Optional[Regularizer] (default: None)",
            "activity_regularizer": "Optional[Regularizer] (default: None)",
            "depthwise_constraint": "Optional[Constraint] (default: None)",
            "pointwise_constraint": "Optional[Constraint] (default: None)",
            "bias_constraint": "Optional[Constraint] (default: None)"
        },
        "Mandatory Parameters": [
            "filters",
            "kernel_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation_rate",
            "(strides > 1) & (dilation_rate > 1)"
        ]
    },
    "tf.linalg.LinearOperatorBlockLowerTriangular": {
        "Parameter type": {
            "operators": "List[List[tf.linalg.LinearOperator]]",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "name": "str (default: 'LinearOperatorBlockLowerTriangular')"
        },
        "Mandatory Parameters": [
            "operators"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.parse_single_sequence_example": {
        "Parameter type": {
            "serialized": "Tensor (shape: (), dtype: string)",
            "context_features": "Optional[Mapping[str, Union[FixedLenFeature, VarLenFeature, RaggedFeature]]]",
            "sequence_features": "Optional[Mapping[str, Union[FixedLenSequenceFeature, VarLenFeature, RaggedFeature]]]",
            "example_name": "Optional[Tensor (shape: (), dtype: string)]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "serialized"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [
            [
                "context_features",
                "sequence_features"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Conv3D": {
        "Parameter type": {
            "filters": "int",
            "kernel_size": "Union[int, Tuple[int]]",
            "strides": "Union[int, Tuple[int]] (default: (1, 1, 1))",
            "padding": "str (default: 'valid'; options: 'valid', 'same')",
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')",
            "dilation_rate": "Union[int, Tuple[int]] (default: (1, 1, 1))",
            "groups": "int (default: 1)",
            "activation": "Optional[Activation function] (default: None)",
            "use_bias": "bool (default: True)",
            "kernel_initializer": "Union[str, Initializer] (default: 'glorot_uniform')",
            "bias_initializer": "Union[str, Initializer] (default: 'zeros')",
            "kernel_regularizer": "Optional[Regularizer] (default: None)",
            "bias_regularizer": "Optional[Regularizer] (default: None)",
            "activity_regularizer": "Optional[Regularizer] (default: None)",
            "kernel_constraint": "Optional[Constraint] (default: None)",
            "bias_constraint": "Optional[Constraint] (default: None)"
        },
        "Mandatory Parameters": [
            "filters",
            "kernel_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation_rate",
            "(strides > 1) & (dilation_rate > 1)"
        ]
    },
    "tf.keras.layers.GlobalMaxPool1D": {
        "Parameter type": {
            "data_format": "str (default: 'channels_last')",
            "keepdims": "bool (default: False)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sets.difference": {
        "Parameter type": {
            "a": "Tensor or SparseTensor",
            "b": "Tensor or SparseTensor",
            "aminusb": "bool (default: True)",
            "validate_indices": "bool (default: True)"
        },
        "Mandatory Parameters": [
            "a",
            "b"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.expand_dims": {
        "Parameter type": {
            "input": "Tensor",
            "axis": "int",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "axis"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random_uniform_initializer": {
        "Parameter type": {
            "minval": "python scalar or scalar tensor",
            "maxval": "python scalar or scalar tensor",
            "seed": "Python integer"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.embedding_lookup": {
        "Parameter type": {
            "params": "Union[Tensor, List[Tensor]]",
            "ids": "Tensor (int32 or int64)",
            "max_norm": "Optional[float]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "params",
            "ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.EfficientNetB0": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "name": "str (default: 'efficientnetb0')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorPermutation": {
        "Parameter type": {
            "perm": "Tensor (shape: [B1,...,Bb, N])",
            "dtype": "tf.dtypes.DType (default: tf.float32)",
            "is_non_singular": "Optional[bool] (default: None)",
            "is_self_adjoint": "Optional[bool] (default: None)",
            "is_positive_definite": "Optional[bool] (default: None)",
            "is_square": "Optional[bool] (default: None)",
            "name": "str (default: 'LinearOperatorPermutation')"
        },
        "Mandatory Parameters": [
            "perm"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.cumprod": {
        "Parameter type": {
            "x": "Tensor",
            "axis": "int32",
            "exclusive": "bool",
            "reverse": "bool",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.slogdet": {
        "Parameter type": {
            "input": "Tensor (shape: [N, M, M])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.edit_distance": {
        "Parameter type": {
            "hypothesis": "SparseTensor",
            "truth": "SparseTensor",
            "normalize": "bool (default: True)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "hypothesis",
            "truth"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.dtypes.as_dtype": {
        "Parameter type": {
            "type_value": "Union[tf.DType, DataType enum, str, numpy.dtype]"
        },
        "Mandatory Parameters": [
            "type_value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.parse_single_example": {
        "Parameter type": {
            "serialized": "Tensor (scalar string)",
            "features": "Mapping of feature keys to FixedLenFeature or VarLenFeature",
            "example_names": "Optional[Tensor] (scalar string)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "serialized",
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.TopKCategoricalAccuracy": {
        "Parameter type": {
            "k": "int (default: 5)",
            "name": "str (default: 'top_k_categorical_accuracy')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.SGD": {
        "Parameter type": {
            "learning_rate": "Union[float, keras.optimizers.schedules.LearningRateSchedule, callable]",
            "momentum": "float",
            "nesterov": "bool",
            "name": "str",
            "weight_decay": "float",
            "clipnorm": "float",
            "clipvalue": "float",
            "global_clipnorm": "float",
            "use_ema": "bool",
            "ema_momentum": "float",
            "ema_overwrite_frequency": "Union[int, None]",
            "loss_scale_factor": "Union[float, None]",
            "gradient_accumulation_steps": "Union[int, None]"
        },
        "Mandatory Parameters": [
            "learning_rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.broadcast_to": {
        "Parameter type": {
            "input": "Tensor",
            "shape": "Tensor (type: int32 or int64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.logdet": {
        "Parameter type": {
            "matrix": "Tensor (shape: [..., M, M])",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "matrix"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.unicode_encode": {
        "Parameter type": {
            "input": "N+1 dimensional potentially ragged integer tensor",
            "output_encoding": "str",
            "errors": "str (default: 'replace')",
            "replacement_char": "int (default: 65533)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input",
            "output_encoding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.sufficient_statistics": {
        "Parameter type": {
            "x": "Tensor",
            "axes": "Array of ints",
            "shift": "Optional[Tensor]",
            "keepdims": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "axes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.plot_model": {
        "Parameter type": {
            "model": "Keras model instance",
            "to_file": "str (default: 'model.png')",
            "show_shapes": "bool (default: False)",
            "show_dtype": "bool (default: False)",
            "show_layer_names": "bool (default: True)",
            "rankdir": "str (default: 'TB'; options: 'TB', 'LR')",
            "expand_nested": "bool (default: False)",
            "dpi": "int (default: 96)",
            "show_layer_activations": "bool (default: False)",
            "show_trainable": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "model"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.shared_embeddings": {
        "Parameter type": {
            "categorical_columns": "List of categorical columns",
            "dimension": "int",
            "combiner": "str (default: 'mean')",
            "initializer": "Optional[variable initializer function]",
            "shared_embedding_collection_name": "Optional[str]",
            "ckpt_to_load_from": "Optional[str]",
            "tensor_name_in_ckpt": "Optional[str]",
            "max_norm": "Optional[float]",
            "trainable": "bool (default: True)",
            "use_safe_embedding_lookup": "bool (default: True)"
        },
        "Mandatory Parameters": [
            "categorical_columns",
            "dimension"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "ckpt_to_load_from",
                "tensor_name_in_ckpt"
            ]
        ],
        "Mandatory Coexistence Parameters": [
            [
                "ckpt_to_load_from",
                "tensor_name_in_ckpt"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.xlog1py": {
        "Parameter type": {
            "x": "Tensor (types: half, float32, float64, complex64, complex128)",
            "y": "Tensor (types: half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.AUC": {
        "Parameter type": {
            "num_thresholds": "int (default: 200)",
            "curve": "str (default: 'ROC')",
            "summation_method": "str (default: 'interpolation')",
            "name": "Optional[str]",
            "dtype": "Optional[tf.DType]",
            "thresholds": "Optional[List[float]]",
            "multi_label": "bool (default: False)",
            "num_labels": "Optional[int]",
            "label_weights": "Optional[Union[List[float], np.ndarray, tf.Tensor]]",
            "from_logits": "bool (default: False)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "num_thresholds",
                "thresholds"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.fractional_max_pool": {
        "Parameter type": {
            "value": "Tensor (shape: [batch, height, width, channels])",
            "pooling_ratio": "Union[int, List[int]] (length: 1, 2, or 4)",
            "pseudo_random": "Optional[bool] (default: False)",
            "overlapping": "Optional[bool] (default: False)",
            "seed": "Optional[int] (default: 0)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value",
            "pooling_ratio"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.snapshot": {
        "Parameter type": {
            "path": "str",
            "compression": "str (default: 'AUTO')",
            "reader_func": "Optional[Callable]",
            "shard_func": "Optional[Callable]"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.special.fresnel_cos": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.arcsinh": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.histogram_fixed_width": {
        "Parameter type": {
            "values": "Numeric Tensor",
            "value_range": "Shape [2] Tensor of same dtype as values",
            "nbins": "Scalar int32 Tensor (default: 100)",
            "dtype": "dtype (default: tf.dtypes.int32)",
            "name": "str (default: None)"
        },
        "Mandatory Parameters": [
            "values",
            "value_range"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.constraints.deserialize": {
        "Parameter type": {
            "config": "dict or str",
            "custom_objects": "dict, optional"
        },
        "Mandatory Parameters": [
            "config"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.models.save_model": {
        "Parameter type": {
            "model": "Keras model instance",
            "filepath": "str or pathlib.Path object",
            "overwrite": "bool (default: True)",
            "include_optimizer": "bool (default: True)",
            "save_format": "str or None (default: None)",
            "signatures": "list of SignatureDef or None (default: None)",
            "options": "tf.saved_model.SaveOptions or None (default: None)",
            "save_traces": "bool (default: True)"
        },
        "Mandatory Parameters": [
            "model",
            "filepath"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.Adagrad": {
        "Parameter type": {
            "learning_rate": "Union[float, keras.optimizers.schedules.LearningRateSchedule, callable]",
            "initial_accumulator_value": "float",
            "epsilon": "float",
            "name": "str",
            "weight_decay": "float",
            "clipnorm": "float",
            "clipvalue": "float",
            "global_clipnorm": "float",
            "use_ema": "bool",
            "ema_momentum": "float",
            "ema_overwrite_frequency": "Union[int, None]",
            "loss_scale_factor": "Union[float, None]",
            "gradient_accumulation_steps": "Union[int, None]"
        },
        "Mandatory Parameters": [
            "learning_rate",
            "initial_accumulator_value",
            "epsilon"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "clipnorm",
                "clipvalue"
            ],
            [
                "clipnorm",
                "global_clipnorm"
            ],
            [
                "clipvalue",
                "global_clipnorm"
            ]
        ],
        "Mandatory Coexistence Parameters": [
            [
                "use_ema",
                "ema_momentum"
            ],
            [
                "use_ema",
                "ema_overwrite_frequency"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sysconfig.get_compile_flags": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.train.Checkpoint": {
        "Parameter type": {
            "root": "Optional[str] (default: None)",
            "kwargs": "Dict[str, Any]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.ZeroPadding2D": {
        "Parameter type": {
            "padding": "Union[int, Tuple[int], Tuple[Tuple[int]]] (default: (1, 1))",
            "data_format": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.parallel_stack": {
        "Parameter type": {
            "values": "List[Tensor]",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "values"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ragged.constant": {
        "Parameter type": {
            "pylist": "nested list, tuple, or np.ndarray",
            "dtype": "Optional[tf.dtypes.DType]",
            "ragged_rank": "Optional[int]",
            "inner_shape": "Optional[tuple]",
            "name": "Optional[str]",
            "row_splits_dtype": "tf.dtypes.DType (default: tf.int64)"
        },
        "Mandatory Parameters": [
            "pylist"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.bessel_i1e": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.resnet_v2.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.inverse_mdct": {
        "Parameter type": {
            "mdcts": "Tensor (shape: [..., frames, frame_length // 2])",
            "window_fn": "Callable or None (default: tf.signal.vorbis_window)",
            "norm": "Optional[str] (default: None; options: 'ortho')",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "mdcts"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.get_global_generator": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Cropping3D": {
        "Parameter type": {
            "cropping": "Union[int, Tuple[3 ints], Tuple[3 tuples of 2 ints]] (default: ((1, 1), (1, 1), (1, 1)))",
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')"
        },
        "Mandatory Parameters": [
            "cropping"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.linear": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.upper": {
        "Parameter type": {
            "input": "Tensor (type: string)",
            "encoding": "string (default: '')",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.less": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.random_hue": {
        "Parameter type": {
            "image": "Tensor (shape: (..., 3))",
            "max_delta": "float",
            "seed": "Optional[int]"
        },
        "Mandatory Parameters": [
            "image",
            "max_delta"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.conv1d_transpose": {
        "Parameter type": {
            "input": "Tensor (shape: [batch, in_width, in_channels] or [batch, in_channels, in_width])",
            "filters": "Tensor (shape: [filter_width, output_channels, in_channels])",
            "output_shape": "Tensor (shape: [3])",
            "strides": "Union[int, List[int]]",
            "padding": "str ('VALID' or 'SAME')",
            "data_format": "str ('NWC' or 'NCW')",
            "dilations": "Union[int, List[int]]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "filters",
            "output_shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.group_by_window": {
        "Parameter type": {
            "key_func": "function mapping tensors to scalar tf.int64 tensor",
            "reduce_func": "function mapping key and dataset to another dataset",
            "window_size": "optional tf.int64 scalar tensor",
            "window_size_func": "optional function mapping key to tf.int64 scalar tensor"
        },
        "Mandatory Parameters": [
            "key_func",
            "reduce_func"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "window_size",
                "window_size_func"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.greater": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.special.bessel_k1e": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.prefetch_to_device": {
        "Parameter type": {
            "device": "str",
            "buffer_size": "Optional[int]"
        },
        "Mandatory Parameters": [
            "device"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.avg_pool3d": {
        "Parameter type": {
            "input": "Tensor (shape: [batch, depth, height, width, channels])",
            "ksize": "Union[int, List[int]]",
            "strides": "Union[int, List[int]]",
            "padding": "str (options: 'VALID', 'SAME')",
            "data_format": "str (options: 'NDHWC', 'NCDHW')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "ksize",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sets.intersection": {
        "Parameter type": {
            "a": "Tensor or SparseTensor",
            "b": "Tensor or SparseTensor",
            "validate_indices": "bool (default: True)"
        },
        "Mandatory Parameters": [
            "a",
            "b"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.hard_sigmoid": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.unicode_decode": {
        "Parameter type": {
            "input": "N-dimensional potentially ragged string tensor",
            "input_encoding": "string",
            "errors": "string (default: 'replace')",
            "replacement_char": "int (default: 65533)",
            "replace_control_characters": "bool (default: False)",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "input",
            "input_encoding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.argsort": {
        "Parameter type": {
            "values": "Tensor",
            "axis": "int (default: -1)",
            "direction": "str (default: 'ASCENDING')",
            "stable": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "values"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.deserialize": {
        "Parameter type": {
            "config": "dict or str",
            "custom_objects": "dict, optional"
        },
        "Mandatory Parameters": [
            "config"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.is_non_decreasing": {
        "Parameter type": {
            "x": "Numeric Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.truncatemod": {
        "Parameter type": {
            "x": "Tensor (types: int32, int64, bfloat16, half, float32, float64)",
            "y": "Tensor (same type as x)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.efficientnet.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.make_saveable_from_iterator": {
        "Parameter type": {
            "iterator": "Iterator",
            "external_state_policy": "str (default: 'fail')"
        },
        "Mandatory Parameters": [
            "iterator"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.add": {
        "Parameter type": {
            "a": "SparseTensor or Tensor",
            "b": "SparseTensor or Tensor",
            "threshold": "0-D Tensor"
        },
        "Mandatory Parameters": [
            "a",
            "b"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.repeat": {
        "Parameter type": {
            "input": "Tensor",
            "repeats": "1-D int Tensor",
            "axis": "int (optional)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input",
            "repeats"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.one_hot": {
        "Parameter type": {
            "indices": "Tensor",
            "depth": "int",
            "on_value": "Optional[scalar]",
            "off_value": "Optional[scalar]",
            "axis": "Optional[int]",
            "dtype": "Optional[dtype]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "indices",
            "depth"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.floor_divide": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.sobel_edges": {
        "Parameter type": {
            "image": "Tensor (shape: [batch_size, h, w, d], dtype: float32 or float64)"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.gelu": {
        "Parameter type": {
            "x": "Tensor",
            "approximate": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.atan2": {
        "Parameter type": {
            "y": "Tensor (types: bfloat16, half, float32, float64)",
            "x": "Tensor (same type as y)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "y",
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.serialize_tensor": {
        "Parameter type": {
            "tensor": "tf.Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.sparse_dense_matmul": {},
    "tf.image.resize_with_pad": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "target_height": "int",
            "target_width": "int",
            "method": "ResizeMethod (default: ResizeMethod.BILINEAR)",
            "antialias": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "image",
            "target_height",
            "target_width"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.get_source_inputs": {
        "Parameter type": {
            "tensor": "Tensor",
            "layer": "Optional[Layer]",
            "node_index": "Optional[int]"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.schedules.PiecewiseConstantDecay": {
        "Parameter type": {
            "boundaries": "List of Python numbers",
            "values": "List of Python numbers",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "boundaries",
            "values"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.embedding_column": {
        "Parameter type": {
            "categorical_column": "CategoricalColumn",
            "dimension": "int",
            "combiner": "str",
            "initializer": "Optional[Callable]",
            "ckpt_to_load_from": "Optional[str]",
            "tensor_name_in_ckpt": "Optional[str]",
            "max_norm": "Optional[float]",
            "trainable": "bool",
            "use_safe_embedding_lookup": "bool"
        },
        "Mandatory Parameters": [
            "categorical_column",
            "dimension"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "ckpt_to_load_from",
                "tensor_name_in_ckpt"
            ]
        ],
        "Mandatory Coexistence Parameters": [
            [
                "ckpt_to_load_from",
                "tensor_name_in_ckpt"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.lookup.TextFileInitializer": {
        "Parameter type": {
            "filename": "str",
            "key_dtype": "tf.DType",
            "key_index": "Union[int, tf.lookup.TextFileIndex]",
            "value_dtype": "tf.DType",
            "value_index": "Union[int, tf.lookup.TextFileIndex]",
            "vocab_size": "Optional[int]",
            "delimiter": "str",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "filename",
            "key_dtype",
            "key_index",
            "value_dtype",
            "value_index"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.PReLU": {
        "Parameter type": {
            "alpha_initializer": "Initializer function",
            "alpha_regularizer": "Regularizer function",
            "alpha_constraint": "Constraint function",
            "shared_axes": "List[int]",
            "kwargs": "Base layer keyword arguments"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.isinf": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.inception_resnet_v2.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.categorical_column_with_hash_bucket": {
        "Parameter type": {
            "key": "str",
            "hash_bucket_size": "int",
            "dtype": "tf.dtypes.DType (default: tf.dtypes.string)"
        },
        "Mandatory Parameters": [
            "key",
            "hash_bucket_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.einsum": {
        "Parameter type": {
            "equation": "str",
            "inputs": "Tensor",
            "optimize": "str (optional, default: 'greedy')",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "equation",
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.safe_embedding_lookup_sparse": {
        "Parameter type": {
            "embedding_weights": "Union[Tensor, List[Tensor]]",
            "sparse_ids": "Union[SparseTensor, RaggedTensor]",
            "sparse_weights": "Optional[Union[SparseTensor, RaggedTensor]]",
            "combiner": "str (default: 'mean')",
            "default_id": "Optional[int] (default: None)",
            "max_norm": "Optional[float] (default: None)",
            "name": "Optional[str] (default: None)",
            "allow_fast_lookup": "Optional[bool] (default: None)"
        },
        "Mandatory Parameters": [
            "embedding_weights",
            "sparse_ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.GlobalAveragePooling2D": {
        "Parameter type": {
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')",
            "keepdims": "Optional[bool] (default: False)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.densenet.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.local_response_normalization": {
        "Parameter type": {
            "input": "Tensor (must be 4-D)",
            "depth_radius": "int (default: 5)",
            "bias": "float (default: 1)",
            "alpha": "float (default: 1)",
            "beta": "float (default: 0.5)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.kaiser_window": {
        "Parameter type": {
            "window_length": "Tensor (scalar)",
            "beta": "float (default: 12.0)",
            "dtype": "tf.dtypes.float32 (default)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "window_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.lbeta": {
        "Parameter type": {
            "x": "Tensor (float or double)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.stateless_normal": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "seed": "shape [2] Tensor of int32 or int64",
            "mean": "0-D Tensor or Python value of type dtype",
            "stddev": "0-D Tensor or Python value of type dtype",
            "dtype": "float type (float16, bfloat16, float32, float64)",
            "name": "string (optional)",
            "alg": "RNG algorithm (optional)"
        },
        "Mandatory Parameters": [
            "shape",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.cond": {
        "Parameter type": {
            "pred": "Tensor (scalar)",
            "true_fn": "Callable",
            "false_fn": "Callable",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "pred",
            "true_fn",
            "false_fn"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorTridiag": {
        "Parameter type": {
            "diagonals": "Tensor",
            "diagonals_format": "str",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "name": "str"
        },
        "Mandatory Parameters": [
            "diagonals"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.relu": {
        "Parameter type": {
            "x": "Tensor",
            "alpha": "float (default: 0.0)",
            "max_value": "Optional[float] (default: None)",
            "threshold": "float (default: 0)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.queue.PaddingFIFOQueue": {
        "Parameter type": {
            "capacity": "int",
            "dtypes": "list of tf.DType",
            "shapes": "list of tf.TensorShape or list of lists",
            "names": "list of str, optional",
            "shared_name": "str, optional",
            "name": "str, optional (default: 'padding_fifo_queue')"
        },
        "Mandatory Parameters": [
            "capacity",
            "dtypes",
            "shapes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.datasets.reuters.get_word_index": {
        "Parameter type": {
            "path": "str (default: 'reuters_word_index.json')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.ProgbarLogger": {
        "Parameter type": {
            "count_mode": "str (default: 'samples')",
            "stateful_metrics": "Optional[List[str]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.leaky_relu": {
        "Parameter type": {
            "features": "Tensor (types: float16, float32, float64, int32, int64)",
            "alpha": "float (default: 0.2)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.mfccs_from_log_mel_spectrograms": {
        "Parameter type": {
            "log_mel_spectrograms": "Tensor (shape: [..., num_mel_bins])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "log_mel_spectrograms"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sysconfig.get_include": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.MeanSquaredLogarithmicError": {
        "Parameter type": {
            "name": "str (default: 'mean_squared_logarithmic_error')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.pool": {
        "Parameter type": {
            "input": "Tensor of rank N+2",
            "window_shape": "Sequence of N ints >= 1",
            "pooling_type": "str (must be 'AVG' or 'MAX')",
            "strides": "Optional. Sequence of N ints >= 1",
            "padding": "str (must be 'SAME' or 'VALID')",
            "data_format": "Optional. str or None",
            "dilations": "Optional. List of N ints >= 1",
            "name": "Optional. str"
        },
        "Mandatory Parameters": [
            "input",
            "window_shape",
            "pooling_type"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilations",
            "(strides>1)&(dilations>1)"
        ]
    },
    "tf.math.abs": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: float16, float32, float64, int32, int64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.copy": {
        "Parameter type": {
            "src": "string",
            "dst": "string",
            "overwrite": "boolean (default: False)"
        },
        "Mandatory Parameters": [
            "src",
            "dst"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.slice": {
        "Parameter type": {
            "input_": "Tensor",
            "begin": "int32 or int64 Tensor",
            "size": "int32 or int64 Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_",
            "begin",
            "size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.compat.dimension_value": {
        "Parameter type": {
            "dimension": "Dimension instance, int, or None"
        },
        "Mandatory Parameters": [
            "dimension"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.logical_or": {
        "Parameter type": {
            "x": "Tensor (type: bool)",
            "y": "Tensor (type: bool)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.adjust_brightness": {
        "Parameter type": {
            "image": "Tensor",
            "delta": "Scalar"
        },
        "Mandatory Parameters": [
            "image",
            "delta"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.UpSampling1D": {
        "Parameter type": {
            "size": "int (default: 2)"
        },
        "Mandatory Parameters": [
            "size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.extract_volume_patches": {
        "Parameter type": {
            "input": "Tensor (shape: [batch, in_planes, in_rows, in_cols, depth])",
            "ksizes": "List[int] (length >=5)",
            "strides": "List[int] (length >=5)",
            "padding": "str (options: 'SAME', 'VALID')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "ksizes",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.absolute": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.special.bessel_y0": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.listdir": {
        "Parameter type": {
            "path": "string"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.normalize_moments": {
        "Parameter type": {
            "counts": "Tensor",
            "mean_ss": "Tensor",
            "variance_ss": "Tensor",
            "shift": "Optional[Tensor]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "counts",
            "mean_ss",
            "variance_ss"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.reset_shape": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "new_shape": "Optional[Union[List[int], Tuple[int], Tensor]] (default: None)"
        },
        "Mandatory Parameters": [
            "sp_input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.decode_csv": {
        "Parameter type": {
            "records": "Tensor (type: string)",
            "record_defaults": "List of Tensor objects (types: float32, float64, int32, int64, string)",
            "field_delim": "string (default: ',')",
            "use_quote_delim": "bool (default: True)",
            "na_value": "string (default: '')",
            "select_cols": "Optional sorted list of integers",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "records",
            "record_defaults"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.reduce_join": {
        "Parameter type": {
            "inputs": "tf.string tensor",
            "axis": "int (default: None)",
            "keepdims": "bool (default: False)",
            "separator": "str (default: '')",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.Ftrl": {
        "Parameter type": {
            "learning_rate": "float or keras.optimizers.schedules.LearningRateSchedule or callable",
            "learning_rate_power": "float",
            "initial_accumulator_value": "float",
            "l1_regularization_strength": "float",
            "l2_regularization_strength": "float",
            "name": "str",
            "l2_shrinkage_regularization_strength": "float",
            "beta": "float",
            "weight_decay": "float",
            "clipnorm": "float",
            "clipvalue": "float",
            "global_clipnorm": "float",
            "use_ema": "bool",
            "ema_momentum": "float",
            "ema_overwrite_frequency": "int or None",
            "loss_scale_factor": "float or None",
            "gradient_accumulation_steps": "int or None"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.unravel_index": {
        "Parameter type": {
            "indices": "Tensor (type: int32 or int64)",
            "dims": "Tensor (same type as indices)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "indices",
            "dims"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.EfficientNetB5": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "name": "str (default: 'efficientnetb5')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.experimental.stateless_fold_in": {
        "Parameter type": {
            "seed": "Tensor (shape: [2], dtype: int32 or int64)",
            "data": "int32 or int64 scalar",
            "alg": "string (optional)"
        },
        "Mandatory Parameters": [
            "seed",
            "data"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.sequence.make_sampling_table": {
        "Parameter type": {
            "size": "int",
            "sampling_factor": "float (default: 1e-05)"
        },
        "Mandatory Parameters": [
            "size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.conj": {
        "Parameter type": {
            "x": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.History": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ones": {
        "Parameter type": {
            "shape": "list[int] or tuple[int] or 1-D Tensor[int32]",
            "dtype": "DType (default: tf.float32)",
            "name": "Optional[str]",
            "layout": "Optional[tf.experimental.dtensor.Layout]"
        },
        "Mandatory Parameters": [
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.true_divide": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ragged.stack": {
        "Parameter type": {
            "values": "List[Union[tf.Tensor, tf.RaggedTensor]]",
            "axis": "int (default: 0)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "values"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.timeseries_dataset_from_array": {
        "Parameter type": {
            "data": "Numpy array or eager tensor",
            "targets": "Optional[Numpy array or eager tensor]",
            "sequence_length": "int",
            "sequence_stride": "int (default: 1)",
            "sampling_rate": "int (default: 1)",
            "batch_size": "int (default: 128)",
            "shuffle": "bool (default: False)",
            "seed": "Optional[int]",
            "start_index": "Optional[int]",
            "end_index": "Optional[int]"
        },
        "Mandatory Parameters": [
            "data",
            "sequence_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.gradients": {
        "Parameter type": {
            "ys": "Tensor or list of tensors",
            "xs": "Tensor or list of tensors",
            "grad_ys": "Optional[Tensor or list of tensors]",
            "name": "Optional[str]",
            "gate_gradients": "Optional[bool]",
            "aggregation_method": "Optional[AggregationMethod]",
            "stop_gradients": "Optional[Tensor or list of tensors]",
            "unconnected_gradients": "Optional[tf.UnconnectedGradients]"
        },
        "Mandatory Parameters": [
            "ys",
            "xs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.with_space_to_batch": {
        "Parameter type": {
            "input": "Tensor",
            "dilation_rate": "int32 Tensor",
            "padding": "str",
            "op": "Function",
            "filter_shape": "Optional[integer Tensor]",
            "spatial_dims": "Optional[Monotonically increasing sequence of integers]",
            "data_format": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "dilation_rate",
            "padding",
            "op"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.unbatch": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.mobilenet.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.top_k": {
        "Parameter type": {
            "input": "Tensor",
            "k": "int16|int32|int64",
            "sorted": "bool",
            "index_type": "dtype",
            "name": "str"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.tensor_scatter_nd_add": {
        "Parameter type": {
            "tensor": "Tensor",
            "indices": "Tensor (int32 or int64)",
            "updates": "Tensor (same type as tensor)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor",
            "indices",
            "updates"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.iinfo": {
        "Parameter type": {
            "int_type": "integer type, dtype, or instance"
        },
        "Mandatory Parameters": [
            "int_type"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorCirculant2D": {
        "Parameter type": {
            "spectrum": "Tensor",
            "input_output_dtype": "tf.dtypes.DType",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "bool",
            "name": "str"
        },
        "Mandatory Parameters": [
            "spectrum"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.fft2d": {
        "Parameter type": {
            "input": "Tensor (must be complex64 or complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.gather_nd": {
        "Parameter type": {
            "params": "Tensor",
            "indices": "Tensor",
            "batch_dims": "int or scalar Tensor",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "params",
            "indices"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.gamma": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "alpha": "Tensor or Python value or N-D array of type `dtype`",
            "beta": "Tensor or Python value or N-D array of type `dtype`",
            "dtype": "float16, float32, or float64",
            "seed": "Python integer",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "shape",
            "alpha"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.decode_gif": {
        "Parameter type": {
            "contents": "Tensor of type string (0-D)",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "contents"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.split": {
        "Parameter type": {
            "value": "Tensor",
            "num_or_size_splits": "Union[int, List[int], Tensor]",
            "axis": "Union[int, Tensor]",
            "num": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value",
            "num_or_size_splits"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "num_or_size_splits",
                "num"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.flip_up_down": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reduce_sum": {
        "Parameter type": {
            "input_tensor": "Tensor",
            "axis": "Optional[Union[int, List[int]]]",
            "keepdims": "bool",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.dilation2d": {
        "Parameter type": {
            "input": "Tensor (shape: [batch, in_height, in_width, depth])",
            "filters": "Tensor (shape: [filter_height, filter_width, depth])",
            "strides": "List[int] (length >=4)",
            "padding": "str (options: 'SAME', 'VALID')",
            "data_format": "str (currently only 'NHWC' is supported)",
            "dilations": "List[int] (length >=4)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "filters",
            "strides",
            "padding",
            "dilations"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.mobilenet_v2.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.Adadelta": {
        "Parameter type": {
            "learning_rate": "float or keras.optimizers.schedules.LearningRateSchedule or callable",
            "rho": "float",
            "epsilon": "float",
            "name": "str",
            "weight_decay": "float",
            "clipnorm": "float",
            "clipvalue": "float",
            "global_clipnorm": "float",
            "use_ema": "bool",
            "ema_momentum": "float",
            "ema_overwrite_frequency": "int or None",
            "loss_scale_factor": "float or None",
            "gradient_accumulation_steps": "int or None"
        },
        "Mandatory Parameters": [
            "learning_rate",
            "rho",
            "epsilon",
            "name"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "clipnorm",
                "clipvalue"
            ],
            [
                "clipnorm",
                "global_clipnorm"
            ],
            [
                "clipvalue",
                "global_clipnorm"
            ]
        ],
        "Mandatory Coexistence Parameters": [
            [
                "use_ema",
                "ema_momentum"
            ],
            [
                "use_ema",
                "ema_overwrite_frequency"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.ELU": {
        "Parameter type": {
            "alpha": "float (default: 1.0)",
            "name": "str (optional)",
            "dtype": "str or tf.dtypes.DType (optional)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.ThreadingOptions": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorKronecker": {
        "Parameter type": {
            "operators": "List[tf.linalg.LinearOperator]",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "operators"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.sqrtm": {
        "Parameter type": {
            "input": "Tensor (shape: [..., M, M])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.serialize": {
        "Parameter type": {
            "loss": "Union[tf.keras.losses.Loss, Callable]"
        },
        "Mandatory Parameters": [
            "loss"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.relu6": {
        "Parameter type": {
            "features": "Tensor (type: float, double, int32, int64, uint8, int16, or int8)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.vgg16.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.softplus": {
        "Parameter type": {
            "features": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.GlobalMaxPool3D": {
        "Parameter type": {
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')",
            "keepdims": "Optional[bool] (default: False)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.collapse_repeated": {
        "Parameter type": {
            "labels": "Tensor (shape: [batch, max value in seq_length])",
            "seq_length": "Tensor (shape: [batch])",
            "name": "Optional[str] (default: 'collapse_repeated_labels')"
        },
        "Mandatory Parameters": [
            "labels",
            "seq_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.atanh": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.log_poisson_loss": {
        "Parameter type": {
            "targets": "Tensor",
            "log_input": "Tensor",
            "compute_full_loss": "bool",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "targets",
            "log_input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.non_max_suppression": {
        "Parameter type": {
            "boxes": "2-D float Tensor (shape: [num_boxes, 4])",
            "scores": "1-D float Tensor (shape: [num_boxes])",
            "max_output_size": "scalar integer Tensor",
            "iou_threshold": "0-D float tensor (default: 0.5)",
            "score_threshold": "0-D float tensor (default: float('-inf'))",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "boxes",
            "scores"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.DepthwiseConv2D": {
        "Parameter type": {
            "kernel_size": "int or tuple/list of 2 integers",
            "strides": "int or tuple/list of 2 integers",
            "padding": "string ('valid' or 'same')",
            "depth_multiplier": "int",
            "data_format": "string ('channels_last' or 'channels_first')",
            "dilation_rate": "int or tuple/list of 2 integers",
            "activation": "Activation function or None",
            "use_bias": "bool",
            "depthwise_initializer": "Initializer or None",
            "bias_initializer": "Initializer or None",
            "depthwise_regularizer": "Regularizer or None",
            "bias_regularizer": "Regularizer or None",
            "activity_regularizer": "Regularizer or None",
            "depthwise_constraint": "Projection function or None",
            "bias_constraint": "Projection function or None"
        },
        "Mandatory Parameters": [
            "kernel_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation_rate",
            "(strides > 1) & (dilation_rate > 1)"
        ]
    },
    "tf.keras.applications.inception_v3.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.minimum": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.conv1d": {
        "Parameter type": {
            "input": "Tensor (shape: batch_shape + [in_width, in_channels] or batch_shape + [in_channels, in_width])",
            "filters": "Tensor (shape: [filter_width, in_channels, out_channels])",
            "stride": "Union[int, List[int]] (length 1 or 3)",
            "padding": "str ('SAME' or 'VALID')",
            "data_format": "str ('NWC' or 'NCW')",
            "dilations": "Union[int, List[int]] (length 1 or 3)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "filters"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.sampled_softmax_loss": {
        "Parameter type": {
            "weights": "Tensor or list of Tensors (shape: [num_classes, dim])",
            "biases": "Tensor (shape: [num_classes])",
            "labels": "Tensor (int64, shape: [batch_size, num_true])",
            "inputs": "Tensor (shape: [batch_size, dim])",
            "num_sampled": "int",
            "num_classes": "int",
            "num_true": "int (default: 1)",
            "sampled_values": "tuple or None (default: None)",
            "remove_accidental_hits": "bool (default: True)",
            "seed": "int or None (default: None)",
            "name": "str or None (default: 'sampled_softmax_loss')"
        },
        "Mandatory Parameters": [
            "weights",
            "biases",
            "labels",
            "inputs",
            "num_sampled",
            "num_classes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.eig": {
        "Parameter type": {
            "tensor": "Tensor (shape: [..., N, N])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.scalar_mul": {
        "Parameter type": {
            "scalar": "0-D scalar Tensor",
            "x": "Tensor or IndexedSlices",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "scalar",
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.service.distribute": {
        "Parameter type": {
            "processing_mode": "Union[tf.data.experimental.service.ShardingPolicy, str]",
            "service": "Union[str, Tuple[str, str]]",
            "job_name": "Optional[str]",
            "max_outstanding_requests": "Optional[int]",
            "data_transfer_protocol": "Optional[str]",
            "compression": "Optional[Union[str, tf.data.experimental.service.Compression]]",
            "cross_trainer_cache": "Optional[tf.data.experimental.service.CrossTrainerCache]",
            "target_workers": "Optional[str]"
        },
        "Mandatory Parameters": [
            "processing_mode",
            "service"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [
            [
                "consumer_index",
                "num_consumers"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.make_tensor_proto": {
        "Parameter type": {
            "values": "Union[scalar, list, ndarray, TensorProto]",
            "dtype": "Optional[DataType]",
            "shape": "Optional[List[int]]",
            "verify_shape": "bool (default: False)",
            "allow_broadcast": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "values"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "verify_shape",
            "allow_broadcast",
            "(verify_shape=True)&(allow_broadcast=True)"
        ]
    },
    "tf.math.logical_not": {
        "Parameter type": {
            "x": "Tensor (type: bool)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.LeakyReLU": {
        "Parameter type": {
            "alpha": "float (default: 0.3)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.relu": {
        "Parameter type": {
            "features": "Tensor (types: float32, float64, int32, uint8, int16, int8, int64, bfloat16, uint16, half, uint32, uint64, qint8)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Permute": {
        "Parameter type": {
            "dims": "Tuple of integers"
        },
        "Mandatory Parameters": [
            "dims"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.TFRecordWriter": {
        "Parameter type": {
            "path": "str",
            "options": "Optional[tf.io.TFRecordOptions]"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.categorical": {
        "Parameter type": {
            "logits": "Tensor (shape: [batch_size, num_classes])",
            "num_samples": "int",
            "dtype": "Optional[Union[int32, int64]] (default: int64)",
            "seed": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "logits",
            "num_samples"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.experimental.stateless_split": {
        "Parameter type": {
            "seed": "Tensor (shape: [2], dtype: int32 or int64)",
            "num": "int or scalar tensor (default: 2)",
            "alg": "string (optional)"
        },
        "Mandatory Parameters": [
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.pinv": {
        "Parameter type": {
            "a": "Tensor (shape: (batch, m, n))",
            "rcond": "Optional[Tensor] (default: 10. * max(num_rows, num_cols) * np.finfo(a.dtype).eps)",
            "validate_args": "bool (default: False)",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "a"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.frame": {
        "Parameter type": {
            "signal": "Tensor",
            "frame_length": "int or scalar Tensor",
            "frame_step": "int or scalar Tensor",
            "pad_end": "bool",
            "pad_value": "scalar Tensor",
            "axis": "int or scalar Tensor",
            "name": "str"
        },
        "Mandatory Parameters": [
            "signal",
            "frame_length",
            "frame_step"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reduce_min": {
        "Parameter type": {
            "input_tensor": "Tensor",
            "axis": "Optional[Union[int, Tuple[int]]] (default: None)",
            "keepdims": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.angle": {
        "Parameter type": {
            "input": "Tensor (types: float, double, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.resnet.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.NASNetLarge": {
        "Parameter type": {
            "input_shape": "Optional[shape tuple]",
            "include_top": "bool",
            "weights": "str or None",
            "input_tensor": "Optional[Keras tensor]",
            "pooling": "Optional[str]",
            "classes": "int",
            "classifier_activation": "Optional[str or callable]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_shape",
                "input_tensor"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.Module": {
        "Parameter type": {
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.rmtree": {
        "Parameter type": {
            "path": "string"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.multiply": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.match_filenames_once": {
        "Parameter type": {
            "pattern": "Union[str, tf.Tensor]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "pattern"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.MeanAbsolutePercentageError": {
        "Parameter type": {
            "name": "str (default: 'mean_absolute_percentage_error')",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.matching_files": {
        "Parameter type": {
            "pattern": "Tensor (type: string)",
            "name": "Optional[string]"
        },
        "Mandatory Parameters": [
            "pattern"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.crelu": {
        "Parameter type": {
            "features": "Tensor",
            "axis": "int (default: -1)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.less_equal": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.SpatialDropout1D": {
        "Parameter type": {
            "rate": "float (between 0 and 1)"
        },
        "Mandatory Parameters": [
            "rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.Callback": {
        "Parameter type": {
            "params": "Dict (training parameters)",
            "model": "Instance of `Model`"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.load_library": {
        "Parameter type": {
            "library_location": "str"
        },
        "Mandatory Parameters": [
            "library_location"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.nextafter": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.get_static_value": {
        "Parameter type": {
            "tensor": "Tensor",
            "partial": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.multiply": {
        "Parameter type": {
            "inputs": "List of tensors (all of the same shape)",
            "**kwargs": "Standard layer keyword arguments"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.FalsePositives": {
        "Parameter type": {
            "thresholds": "Optional[Union[float, List[float], Tuple[float]]] (default: None)",
            "name": "Optional[str] (default: None)",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.Metric": {
        "Parameter type": {
            "name": "Optional[str]",
            "dtype": "Optional[Union[tf.DType, str, tf.keras.mixed_precision.Policy]]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.Loss": {
        "Parameter type": {
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "Optional[str]",
            "dtype": "Optional[Union[str, keras.DTypePolicy]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.rgb_to_yuv": {
        "Parameter type": {
            "images": "Tensor (shape: (batch, height, width, 3))"
        },
        "Mandatory Parameters": [
            "images"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.retain": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "to_retain": "bool vector"
        },
        "Mandatory Parameters": [
            "sp_input",
            "to_retain"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.saved_model.save": {
        "Parameter type": {
            "obj": "Trackable object (e.g., tf.Module or tf.train.Checkpoint)",
            "export_dir": "str (directory path)",
            "signatures": "Optional[Union[tf.function, Dict[str, Union[tf.function, concrete function]]]]",
            "options": "Optional[tf.saved_model.SaveOptions]"
        },
        "Mandatory Parameters": [
            "obj",
            "export_dir"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reduce_variance": {
        "Parameter type": {
            "input_tensor": "Tensor",
            "axis": "Optional[Union[int, Tuple[int]]]",
            "keepdims": "bool",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.special.bessel_k1": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reduce_max": {
        "Parameter type": {
            "input_tensor": "Tensor",
            "axis": "Optional[Union[int, Tuple[int]]]",
            "keepdims": "bool",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.get": {
        "Parameter type": {
            "identifier": "Union[str, Callable]"
        },
        "Mandatory Parameters": [
            "identifier"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.SimpleRNN": {
        "Parameter type": {
            "units": "int",
            "activation": "str or None",
            "use_bias": "bool",
            "kernel_initializer": "str or Initializer instance",
            "recurrent_initializer": "str or Initializer instance",
            "bias_initializer": "str or Initializer instance",
            "kernel_regularizer": "Regularizer or None",
            "recurrent_regularizer": "Regularizer or None",
            "bias_regularizer": "Regularizer or None",
            "activity_regularizer": "Regularizer or None",
            "kernel_constraint": "Constraint or None",
            "recurrent_constraint": "Constraint or None",
            "bias_constraint": "Constraint or None",
            "dropout": "float",
            "recurrent_dropout": "float",
            "return_sequences": "bool",
            "return_state": "bool",
            "go_backwards": "bool",
            "stateful": "bool",
            "unroll": "bool"
        },
        "Mandatory Parameters": [
            "units"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.tridiagonal_solve": {
        "Parameter type": {
            "diagonals": "Tensor or tuple of Tensors",
            "rhs": "Tensor",
            "diagonals_format": "str (default: 'compact')",
            "transpose_rhs": "bool (default: False)",
            "conjugate_rhs": "bool (default: False)",
            "name": "str (optional)",
            "partial_pivoting": "bool (default: True)",
            "perturb_singular": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "diagonals",
            "rhs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "partial_pivoting",
            "perturb_singular",
            "(partial_pivoting=False)&(perturb_singular=True)"
        ]
    },
    "tf.keras.backend.is_keras_tensor": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.make_ndarray": {
        "Parameter type": {
            "tensor": "TensorProto"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.dtypes.complex": {
        "Parameter type": {
            "real": "Tensor (types: float32, float64)",
            "imag": "Tensor (same type as real)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "real",
            "imag"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sysconfig.get_link_flags": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.pow": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.expm1": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.Counter": {
        "Parameter type": {
            "start": "int (default: 0)",
            "step": "int (default: 1)",
            "dtype": "tf.dtypes.DType (default: tf.int64)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.image.random_channel_shift": {
        "Parameter type": {
            "x": "Tensor (3D)",
            "intensity_range": "Union[float, Tuple[float, float]]",
            "channel_axis": "int (default: 0)"
        },
        "Mandatory Parameters": [
            "x",
            "intensity_range"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.logaddexp2": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.EfficientNetB2": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "name": "str (default: 'efficientnetb2')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.crossed_column": {
        "Parameter type": {
            "keys": "Iterable (string or CategoricalColumn)",
            "hash_bucket_size": "int (>1)",
            "hash_key": "Optional[int]"
        },
        "Mandatory Parameters": [
            "keys",
            "hash_bucket_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.rank": {
        "Parameter type": {
            "input": "Tensor or SparseTensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.linear_to_mel_weight_matrix": {
        "Parameter type": {
            "num_mel_bins": "int",
            "num_spectrogram_bins": "int Tensor",
            "sample_rate": "int or float Tensor",
            "lower_edge_hertz": "float",
            "upper_edge_hertz": "float",
            "dtype": "DType",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "num_mel_bins",
            "num_spectrogram_bins",
            "sample_rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.GlobalMaxPool2D": {
        "Parameter type": {
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')",
            "keepdims": "Optional[bool] (default: False)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.serialize_keras_object": {
        "Parameter type": {
            "instance": "Keras object"
        },
        "Mandatory Parameters": [
            "instance"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.poisson": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "lam": "Tensor or Python value or N-D array of type `dtype`",
            "dtype": "Optional[tf.dtypes.DType] (default: tf.dtypes.float32)",
            "seed": "Optional[Python integer]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "shape",
            "lam"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.unique": {
        "Parameter type": {
            "x": "Tensor (1-D)",
            "out_idx": "Optional[tf.DType] (default: tf.int32)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.logm": {
        "Parameter type": {
            "input": "Tensor (shape: [..., M, M])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.quantization.fake_quant_with_min_max_vars_per_channel": {
        "Parameter type": {
            "inputs": "Tensor (float32)",
            "min": "Tensor (float32)",
            "max": "Tensor (float32)",
            "num_bits": "int (default: 8)",
            "narrow_range": "bool (default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "inputs",
            "min",
            "max"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.Orthogonal": {
        "Parameter type": {
            "gain": "float (default: 1.0)",
            "seed": "Optional[int] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.Constant": {
        "Parameter type": {
            "value": "Python scalar"
        },
        "Mandatory Parameters": [
            "value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.ngrams": {
        "Parameter type": {
            "data": "Tensor or RaggedTensor",
            "ngram_width": "int or list/tuple of ints",
            "separator": "str",
            "pad_values": "tuple of strings, single string, or None",
            "padding_width": "int or None",
            "preserve_short_sequences": "bool",
            "name": "str or None"
        },
        "Mandatory Parameters": [
            "data",
            "ngram_width"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.tensor_scatter_nd_min": {
        "Parameter type": {
            "tensor": "Tensor",
            "indices": "Tensor (int32 or int64)",
            "updates": "Tensor (same type as tensor)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor",
            "indices",
            "updates"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.reverse": {
        "Parameter type": {
            "tensor": "Tensor (up to 8-D)",
            "axis": "Tensor (int32 or int64, 1-D)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor",
            "axis"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.StackedRNNCells": {
        "Parameter type": {
            "cells": "List of RNN cell instances"
        },
        "Mandatory Parameters": [
            "cells"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.swish": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.mobilenet.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.maximum": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.fill": {
        "Parameter type": {
            "dims": "1-D sequence of non-negative numbers (int32 or int64)",
            "value": "scalar value (same dtype as output tensor)",
            "name": "Optional string",
            "layout": "Optional tf.experimental.dtensor.Layout"
        },
        "Mandatory Parameters": [
            "dims",
            "value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.less": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.arcsin": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.constant_initializer": {
        "Parameter type": {
            "value": "Union[scalar, list, tuple, numpy.ndarray]",
            "support_partition": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.CategoricalCrossentropy": {
        "Parameter type": {
            "from_logits": "bool (default: False)",
            "label_smoothing": "float (default: 0)",
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'categorical_crossentropy')",
            "dtype": "Union[tf.DType, str, None] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.train.Coordinator": {
        "Parameter type": {
            "clean_stop_exception_types": "Optional[List[Type[Exception]]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.MaxPool2D": {
        "Parameter type": {
            "pool_size": "Union[int, Tuple[int, int]] (default: (2, 2))",
            "strides": "Union[int, Tuple[int, int], None] (default: None)",
            "padding": "str (default: 'valid'; options: 'valid', 'same')",
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')"
        },
        "Mandatory Parameters": [
            "pool_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.stateless_random_jpeg_quality": {
        "Parameter type": {
            "image": "Tensor (3D image, last dimension must be 1 or 3)",
            "min_jpeg_quality": "int (must be in [0, 100] and less than max_jpeg_quality)",
            "max_jpeg_quality": "int (must be in [0, 100])",
            "seed": "Tensor (shape [2], dtype int32 or int64)"
        },
        "Mandatory Parameters": [
            "image",
            "min_jpeg_quality",
            "max_jpeg_quality",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.TFRecordOptions": {
        "Parameter type": {
            "compression_type": "Optional[str] (default: None; options: 'ZLIB', 'GZIP', 'NONE')",
            "flush_mode": "Optional[str] (default: None; options: 'NEVER', 'SYNC', 'ALWAYS')",
            "input_buffer_size": "Optional[int] (default: None)",
            "output_buffer_size": "Optional[int] (default: None)",
            "window_bits": "Optional[int] (default: None)",
            "compression_level": "Optional[int] (default: None)",
            "compression_method": "Optional[str] (default: None; options: 'DEFLATE')",
            "mem_level": "Optional[int] (default: None)",
            "compression_strategy": "Optional[str] (default: None; options: 'DEFAULT', 'FILTERED', 'HUFFMAN_ONLY', 'RLE')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.rename": {
        "Parameter type": {
            "src": "string",
            "dst": "string",
            "overwrite": "boolean (default: False)"
        },
        "Mandatory Parameters": [
            "src",
            "dst"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.lite.experimental.load_delegate": {
        "Parameter type": {
            "library": "str",
            "options": "Optional[Dict[str, str]]"
        },
        "Mandatory Parameters": [
            "library"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.grad_pass_through": {
        "Parameter type": {
            "f": "function `f(*x)` that returns a `Tensor` or nested structure of `Tensor` outputs."
        },
        "Mandatory Parameters": [
            "f"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.ifft": {
        "Parameter type": {
            "input": "Tensor (complex64 or complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.log1p": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.mixed_precision.set_global_policy": {
        "Parameter type": {
            "policy": "str or tf.keras.mixed_precision.Policy"
        },
        "Mandatory Parameters": [
            "policy"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.scatter_nd": {
        "Parameter type": {
            "indices": "Tensor (types: int16, int32, int64)",
            "updates": "Tensor",
            "shape": "Tensor (same type as indices)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "indices",
            "updates",
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.ssim": {
        "Parameter type": {
            "img1": "Tensor (4-D shape: [batch, height, width, channels])",
            "img2": "Tensor (4-D shape: [batch, height, width, channels])",
            "max_val": "Union[int, float]",
            "filter_size": "int (default: 11)",
            "filter_sigma": "float (default: 1.5)",
            "k1": "float (default: 0.01)",
            "k2": "float (default: 0.03)",
            "return_index_map": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "img1",
            "img2",
            "max_val"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.ceil": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.scan": {
        "Parameter type": {
            "fn": "callable",
            "elems": "tensor or (possibly nested) sequence of tensors",
            "initializer": "optional tensor or (possibly nested) sequence of tensors",
            "parallel_iterations": "int (default: 10)",
            "back_prop": "bool (default: True)",
            "swap_memory": "bool (default: False)",
            "infer_shape": "bool (default: True)",
            "reverse": "bool (default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "fn",
            "elems"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "back_prop",
            "swap_memory",
            "(back_prop=False)&(swap_memory=True)"
        ]
    },
    "tf.no_op": {
        "Parameter type": {
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.softplus": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.image.smart_resize": {
        "Parameter type": {
            "x": "Tensor or NumPy array (shape: (height, width, channels) or (batch_size, height, width, channels))",
            "size": "Tuple of (height, width) integers",
            "interpolation": "String (default: 'bilinear'; options: 'bilinear', 'nearest', 'bicubic', 'lanczos3', 'lanczos5')",
            "data_format": "String (default: 'channels_last'; options: 'channels_last', 'channels_first')",
            "backend_module": "Backend module (optional)"
        },
        "Mandatory Parameters": [
            "x",
            "size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nest.flatten": {
        "Parameter type": {
            "structure": "Union[atom, nested structure]",
            "expand_composites": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "structure"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.unpack_x_y_sample_weight": {
        "Parameter type": {
            "data": "tuple of the form (x,), (x, y), or (x, y, sample_weight)"
        },
        "Mandatory Parameters": [
            "data"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.datasets.fashion_mnist.load_data": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.saved_model.load": {
        "Parameter type": {
            "export_dir": "str",
            "tags": "Union[str, List[str], None]",
            "options": "Union[tf.saved_model.LoadOptions, None]"
        },
        "Mandatory Parameters": [
            "export_dir"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.deserialize": {
        "Parameter type": {
            "config": "dict",
            "custom_objects": "Optional[dict]"
        },
        "Mandatory Parameters": [
            "config"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.lu_solve": {
        "Parameter type": {
            "lower_upper": "Tensor",
            "perm": "Tensor",
            "rhs": "Tensor",
            "validate_args": "bool",
            "name": "str"
        },
        "Mandatory Parameters": [
            "lower_upper",
            "perm",
            "rhs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.random.seed": {
        "Parameter type": {
            "s": "int"
        },
        "Mandatory Parameters": [
            "s"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.elu": {
        "Parameter type": {
            "x": "Tensor",
            "alpha": "float (default: 1.0)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.LayerNormalization": {
        "Parameter type": {
            "axis": "Union[int, List[int], Tuple[int]] (default: -1)",
            "epsilon": "float (default: 0.001)",
            "center": "bool (default: True)",
            "scale": "bool (default: True)",
            "beta_initializer": "str or Initializer instance (default: 'zeros')",
            "gamma_initializer": "str or Initializer instance (default: 'ones')",
            "beta_regularizer": "Optional[Regularizer] (default: None)",
            "gamma_regularizer": "Optional[Regularizer] (default: None)",
            "beta_constraint": "Optional[Constraint] (default: None)",
            "gamma_constraint": "Optional[Constraint] (default: None)",
            "trainable": "bool (default: True)",
            "name": "Optional[str] (default: None)",
            "kwargs": "dict (additional keyword arguments)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.igammac": {
        "Parameter type": {
            "a": "Tensor (types: bfloat16, half, float32, float64)",
            "x": "Tensor (same type as a)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "a",
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.EarlyStopping": {
        "Parameter type": {
            "monitor": "str (default: 'val_loss')",
            "min_delta": "float (default: 0)",
            "patience": "int (default: 0)",
            "verbose": "int (default: 0)",
            "mode": "str (default: 'auto')",
            "baseline": "Optional[float] (default: None)",
            "restore_best_weights": "bool (default: False)",
            "start_from_epoch": "int (default: 0)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.to_hash_bucket_fast": {
        "Parameter type": {
            "input": "Tensor of type string",
            "num_buckets": "int (>= 1)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "num_buckets"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.bitwise_not": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.while_loop": {
        "Parameter type": {
            "cond": "callable",
            "body": "callable",
            "loop_vars": "tuple, namedtuple, or list of tensors",
            "shape_invariants": "optional list of TensorShape",
            "parallel_iterations": "int (default: 10)",
            "back_prop": "bool (default: True)",
            "swap_memory": "bool (default: False)",
            "maximum_iterations": "optional int",
            "name": "optional str"
        },
        "Mandatory Parameters": [
            "cond",
            "body",
            "loop_vars"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.compat.path_to_str": {
        "Parameter type": {
            "path": "Any object that can be converted to a PathLike representation"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.histogram_fixed_width_bins": {
        "Parameter type": {
            "values": "Numeric Tensor",
            "value_range": "Shape [2] Tensor of same dtype as values",
            "nbins": "Scalar int32 Tensor (default: 100)",
            "dtype": "dtype (default: tf.dtypes.int32)",
            "name": "str (default: None)"
        },
        "Mandatory Parameters": [
            "values",
            "value_range"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.ResNet101V2": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.load_op_library": {
        "Parameter type": {
            "library_filename": "str"
        },
        "Mandatory Parameters": [
            "library_filename"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.not_equal": {
        "Parameter type": {
            "x": "tf.Tensor",
            "y": "tf.Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.subtract": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.backend.set_image_data_format": {
        "Parameter type": {
            "data_format": "str"
        },
        "Mandatory Parameters": [
            "data_format"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.write_file": {
        "Parameter type": {
            "filename": "Tensor (type: string)",
            "contents": "Tensor (type: string)",
            "name": "Optional[string]"
        },
        "Mandatory Parameters": [
            "filename",
            "contents"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.unicode_script": {
        "Parameter type": {
            "input": "Tensor of type int32",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.GaussianNoise": {
        "Parameter type": {
            "stddev": "Float",
            "seed": "Optional[Integer]"
        },
        "Mandatory Parameters": [
            "stddev"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.array": {
        "Parameter type": {
            "val": "Union[Tensor, ndarray, list, tuple]",
            "dtype": "Optional[DType]",
            "copy": "bool",
            "ndmin": "int"
        },
        "Mandatory Parameters": [
            "val"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.isfinite": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.vectorized_map": {
        "Parameter type": {
            "fn": "callable",
            "elems": "Union[Tensor, Sequence[Tensor]]",
            "fallback_to_while_loop": "bool (default: True)"
        },
        "Mandatory Parameters": [
            "fn",
            "elems"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.expm1": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.FalseNegatives": {
        "Parameter type": {
            "thresholds": "Optional[Union[float, List[float], Tuple[float]]] (default: None)",
            "name": "Optional[str] (default: None)",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.sample_from_datasets": {
        "Parameter type": {
            "datasets": "List[tf.data.Dataset]",
            "weights": "Optional[List[float] | tf.data.Dataset]",
            "seed": "Optional[tf.int64]",
            "stop_on_empty_dataset": "Optional[bool]"
        },
        "Mandatory Parameters": [
            "datasets"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperator": {
        "Parameter type": {
            "dtype": "tf.DType",
            "graph_parents": "Optional[List[tf.Tensor]]",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "name": "Optional[str]",
            "parameters": "Optional[dict]"
        },
        "Mandatory Parameters": [
            "dtype"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.random_jpeg_quality": {
        "Parameter type": {
            "image": "Tensor (3D, last dimension 1 or 3)",
            "min_jpeg_quality": "int (0-100)",
            "max_jpeg_quality": "int (0-100)",
            "seed": "Optional[int]"
        },
        "Mandatory Parameters": [
            "image",
            "min_jpeg_quality",
            "max_jpeg_quality"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.log_sigmoid": {
        "Parameter type": {
            "x": "Tensor (float32 or float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nest.pack_sequence_as": {
        "Parameter type": {
            "structure": "Nested structure (lists, tuples, dicts, etc.)",
            "flat_sequence": "List of elements to be packed",
            "expand_composites": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "structure",
            "flat_sequence"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.sobol_sample": {
        "Parameter type": {
            "dim": "Positive scalar Tensor",
            "num_results": "Positive scalar Tensor of dtype int32",
            "skip": "Optional positive scalar Tensor of dtype int32",
            "dtype": "Optional tf.Dtype (default: tf.float32)",
            "name": "Optional Python str"
        },
        "Mandatory Parameters": [
            "dim",
            "num_results"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.LambdaCallback": {
        "Parameter type": {
            "on_epoch_begin": "Optional[Callable]",
            "on_epoch_end": "Optional[Callable]",
            "on_batch_begin": "Optional[Callable]",
            "on_batch_end": "Optional[Callable]",
            "on_train_begin": "Optional[Callable]",
            "on_train_end": "Optional[Callable]",
            "**kwargs": "Dict[str, Any]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.max_pool": {
        "Parameter type": {
            "input": "Tensor of rank N+2",
            "ksize": "int or list of ints",
            "strides": "int or list of ints",
            "padding": "string or list",
            "data_format": "string",
            "name": "string"
        },
        "Mandatory Parameters": [
            "input",
            "ksize",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorHouseholder": {
        "Parameter type": {
            "reflection_axis": "Tensor",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "name": "str"
        },
        "Mandatory Parameters": [
            "reflection_axis"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.ReLU": {
        "Parameter type": {
            "max_value": "Float (>=0; default: None)",
            "negative_slope": "Float (>=0; default: 0.0)",
            "threshold": "Float (>=0; default: 0.0)",
            "**kwargs": "Base layer keyword arguments (e.g., name, dtype)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.service.DispatchServer": {
        "Parameter type": {
            "config": "Optional[tf.data.experimental.service.DispatcherConfig]",
            "start": "bool (default: True)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reduce_logsumexp": {
        "Parameter type": {
            "input_tensor": "Tensor",
            "axis": "Optional[Union[int, List[int]]]",
            "keepdims": "bool",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.Hinge": {
        "Parameter type": {
            "name": "str (default: 'hinge')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.compute_average_loss": {
        "Parameter type": {
            "per_example_loss": "Tensor",
            "sample_weight": "Optional[Tensor]",
            "global_batch_size": "Optional[int]"
        },
        "Mandatory Parameters": [
            "per_example_loss"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.reduce_sum": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "axis": "Union[int, List[int]] (default: None)",
            "keepdims": "Optional[bool] (default: None)",
            "output_is_sparse": "bool (default: False)",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "sp_input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sequence_mask": {
        "Parameter type": {
            "lengths": "integer tensor",
            "maxlen": "scalar integer tensor (optional)",
            "dtype": "data type (optional, default: tf.dtypes.bool)",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "lengths"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.Graph": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.dot": {
        "Parameter type": {
            "inputs": "List of tensors",
            "axes": "Integer or tuple of integers",
            "normalize": "Boolean (default: False)",
            "**kwargs": "Standard layer keyword arguments"
        },
        "Mandatory Parameters": [
            "inputs",
            "axes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.backend.epsilon": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nest.assert_same_structure": {
        "Parameter type": {
            "nest1": "an atom or a nested structure",
            "nest2": "an atom or a nested structure",
            "check_types": "bool (default: True)",
            "expand_composites": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "nest1",
            "nest2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reduce_prod": {
        "Parameter type": {
            "input_tensor": "Tensor",
            "axis": "Optional[Union[int, Tuple[int]]]",
            "keepdims": "bool",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ragged.segment_ids_to_row_splits": {
        "Parameter type": {
            "segment_ids": "1-D integer Tensor",
            "num_segments": "scalar integer (optional)",
            "out_type": "dtype (optional)",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "segment_ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.floor": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nest.is_nested": {
        "Parameter type": {
            "seq": "Any"
        },
        "Mandatory Parameters": [
            "seq"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.lookup.KeyValueTensorInitializer": {
        "Parameter type": {
            "keys": "Tensor",
            "values": "Tensor",
            "key_dtype": "Optional[tf.dtypes.DType]",
            "value_dtype": "Optional[tf.dtypes.DType]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "keys",
            "values"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.group": {
        "Parameter type": {
            "inputs": "Zero or more tensors",
            "name": "Optional string"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.Nadam": {
        "Parameter type": {
            "learning_rate": "float or LearningRateSchedule or callable",
            "beta_1": "float or constant float tensor or callable",
            "beta_2": "float or constant float tensor or callable",
            "epsilon": "float",
            "name": "str",
            "weight_decay": "float",
            "clipnorm": "float",
            "clipvalue": "float",
            "global_clipnorm": "float",
            "use_ema": "bool",
            "ema_momentum": "float",
            "ema_overwrite_frequency": "int or None",
            "loss_scale_factor": "float or None",
            "gradient_accumulation_steps": "int or None"
        },
        "Mandatory Parameters": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "name"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "clipnorm",
                "clipvalue"
            ],
            [
                "clipnorm",
                "global_clipnorm"
            ],
            [
                "clipvalue",
                "global_clipnorm"
            ]
        ],
        "Mandatory Coexistence Parameters": [
            [
                "use_ema",
                "ema_momentum"
            ],
            [
                "use_ema",
                "ema_overwrite_frequency"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.exp2": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.MaxPool3D": {
        "Parameter type": {
            "pool_size": "Union[int, Tuple[int, int, int]] (default: (2, 2, 2))",
            "strides": "Union[int, Tuple[int, int, int], None] (default: None)",
            "padding": "str (default: 'valid'; options: 'valid', 'same')",
            "data_format": "str (default: None; options: 'channels_last', 'channels_first')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.categorical_hinge": {
        "Parameter type": {
            "y_true": "Tensor (shape: [batch_size, d0, .. dN])",
            "y_pred": "Tensor (shape: [batch_size, d0, .. dN])"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.SpatialDropout2D": {
        "Parameter type": {
            "rate": "float",
            "data_format": "Optional[str]"
        },
        "Mandatory Parameters": [
            "rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.CategoricalHinge": {
        "Parameter type": {
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'categorical_hinge')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.audio.encode_wav": {
        "Parameter type": {
            "audio": "Tensor (float32, shape: [length, channels])",
            "sample_rate": "Tensor (int32, scalar)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "audio",
            "sample_rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.segment_min": {
        "Parameter type": {
            "data": "Tensor",
            "segment_ids": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "data",
            "segment_ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.GRUCell": {
        "Parameter type": {
            "units": "int",
            "activation": "str or None",
            "recurrent_activation": "str or None",
            "use_bias": "bool",
            "kernel_initializer": "str or Initializer instance",
            "recurrent_initializer": "str or Initializer instance",
            "bias_initializer": "str or Initializer instance",
            "kernel_regularizer": "Regularizer or None",
            "recurrent_regularizer": "Regularizer or None",
            "bias_regularizer": "Regularizer or None",
            "kernel_constraint": "Constraint or None",
            "recurrent_constraint": "Constraint or None",
            "bias_constraint": "Constraint or None",
            "dropout": "float",
            "recurrent_dropout": "float",
            "reset_after": "bool",
            "seed": "int or None"
        },
        "Mandatory Parameters": [
            "units"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.saved_model.Asset": {
        "Parameter type": {
            "path": "str or 0-D tf.string tensor"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.eye": {
        "Parameter type": {
            "num_rows": "Non-negative integer or int32 scalar tensor",
            "num_columns": "Optional non-negative integer or int32 scalar tensor",
            "dtype": "tf.dtypes.DType",
            "name": "str"
        },
        "Mandatory Parameters": [
            "num_rows"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.kaiser_bessel_derived_window": {
        "Parameter type": {
            "window_length": "Tensor (scalar)",
            "beta": "float (default: 12.0)",
            "dtype": "tf.dtypes.float32 (default)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "window_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.ModelCheckpoint": {
        "Parameter type": {
            "filepath": "string or PathLike",
            "monitor": "string",
            "verbose": "int",
            "save_best_only": "bool",
            "save_weights_only": "bool",
            "mode": "string",
            "save_freq": "string or int",
            "options": "tf.train.CheckpointOptions",
            "kwargs": "dict"
        },
        "Mandatory Parameters": [
            "filepath"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.squared_hinge": {
        "Parameter type": {
            "y_true": "Tensor (shape: [batch_size, d0, .. dN])",
            "y_pred": "Tensor (shape: [batch_size, d0, .. dN])"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.atrous_conv2d": {
        "Parameter type": {
            "value": "Tensor (shape: [batch, in_height, in_width, in_channels])",
            "filters": "Tensor (shape: [filter_height, filter_width, in_channels, out_channels])",
            "rate": "int32",
            "padding": "str (options: 'VALID', 'SAME')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value",
            "filters",
            "rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.Input": {
        "Parameter type": {
            "shape": "tuple of integers or None",
            "batch_size": "Optional[int]",
            "name": "Optional[str]",
            "dtype": "Optional[str]",
            "sparse": "bool",
            "tensor": "Optional[tensor]",
            "ragged": "bool",
            "batch_shape": "Optional[tuple of integers or None]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "shape",
                "batch_shape"
            ],
            [
                "tensor",
                "shape"
            ],
            [
                "tensor",
                "batch_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.get_logger": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.LearningRateScheduler": {
        "Parameter type": {
            "schedule": "function (takes epoch index and current learning rate, returns new learning rate)",
            "verbose": "int (default: 0)"
        },
        "Mandatory Parameters": [
            "schedule"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.mixed_precision.LossScaleOptimizer": {
        "Parameter type": {
            "inner_optimizer": "keras.optimizers.Optimizer",
            "dynamic": "bool (default: True)",
            "initial_scale": "Optional[float]",
            "dynamic_growth_steps": "Optional[int]",
            "name": "Optional[str]",
            "weight_decay": "Optional[float]",
            "clipnorm": "Optional[float]",
            "clipvalue": "Optional[float]",
            "global_clipnorm": "Optional[float]",
            "use_ema": "bool (default: False)",
            "ema_momentum": "float (default: 0.99)",
            "ema_overwrite_frequency": "Optional[int]",
            "loss_scale_factor": "Optional[float]",
            "gradient_accumulation_steps": "Optional[int]"
        },
        "Mandatory Parameters": [
            "inner_optimizer"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.AdditiveAttention": {
        "Parameter type": {
            "use_scale": "bool (default: True)",
            "dropout": "float (default: 0.0)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.yuv_to_rgb": {
        "Parameter type": {
            "images": "Tensor (shape: (batch, height, width, 3))"
        },
        "Mandatory Parameters": [
            "images"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.substr": {
        "Parameter type": {
            "input": "Tensor of type string",
            "pos": "Tensor of type int32 or int64",
            "len": "Tensor of type int32 or int64",
            "unit": "string (optional, default: 'BYTE')",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "input",
            "pos",
            "len"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.lookup.StaticHashTable": {
        "Parameter type": {
            "initializer": "tf.lookup.KeyValueTensorInitializer",
            "default_value": "int",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "initializer",
            "default_value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.add": {
        "Parameter type": {
            "x": "tf.Tensor",
            "y": "tf.Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.bincount": {
        "Parameter type": {
            "arr": "Tensor, RaggedTensor, or SparseTensor",
            "weights": "Optional[Tensor]",
            "minlength": "Optional[int]",
            "maxlength": "Optional[int]",
            "dtype": "Optional[DType]",
            "name": "Optional[str]",
            "axis": "Optional[int]",
            "binary_output": "Optional[bool]"
        },
        "Mandatory Parameters": [
            "arr"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "weights",
                "binary_output"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.OptimizationOptions": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.lgamma": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.invert_permutation": {
        "Parameter type": {
            "x": "Tensor (type: int32 or int64, shape: 1-D)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.arccosh": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.shuffle_and_repeat": {
        "Parameter type": {
            "buffer_size": "tf.int64 scalar tf.Tensor",
            "count": "Optional[tf.int64 scalar tf.Tensor]",
            "seed": "Optional[tf.int64 scalar tf.Tensor]"
        },
        "Mandatory Parameters": [
            "buffer_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.matrix_rank": {
        "Parameter type": {
            "a": "Tensor (float-like, matrix-shaped)",
            "tol": "Optional[float] (default: None)",
            "validate_args": "bool (default: False)",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "a"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Add": {
        "Parameter type": {
            "input": "List of tensors (all of the same shape)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.power": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.MeanSquaredError": {
        "Parameter type": {
            "name": "str (default: 'mean_squared_error')",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.stateless_binomial": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "seed": "shape [2] Tensor, dtype int32 or int64",
            "counts": "Tensor",
            "probs": "Tensor",
            "output_dtype": "tf.dtypes.int32 (default)",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "shape",
            "seed",
            "counts",
            "probs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.zeros_like": {
        "Parameter type": {
            "input": "Tensor or array-like object",
            "dtype": "Optional type (float16, float32, float64, int8, uint8, int16, uint16, int32, int64, complex64, complex128, bool, or string)",
            "name": "Optional string",
            "layout": "Optional tf.experimental.dtensor.Layout"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.tensor_diag_part": {
        "Parameter type": {
            "input": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.uniform": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "minval": "Tensor or Python value of type `dtype`",
            "maxval": "Tensor or Python value of type `dtype`",
            "dtype": "tf.dtypes.DType",
            "seed": "Python integer",
            "name": "str"
        },
        "Mandatory Parameters": [
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.BinaryCrossentropy": {
        "Parameter type": {
            "from_logits": "bool (default: False)",
            "label_smoothing": "float (default: 0)",
            "axis": "int (default: -1)",
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'binary_crossentropy')",
            "dtype": "Union[tf.DType, str, None] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Embedding": {
        "Parameter type": {
            "input_dim": "int",
            "output_dim": "int",
            "embeddings_initializer": "str or Initializer instance",
            "embeddings_regularizer": "Regularizer instance or None",
            "activity_regularizer": "Regularizer instance or None",
            "embeddings_constraint": "Constraint instance or None",
            "mask_zero": "bool",
            "input_length": "int or None",
            "weights": "list of numpy arrays or None",
            "lora_rank": "int or None",
            "lora_alpha": "int or None"
        },
        "Mandatory Parameters": [
            "input_dim",
            "output_dim"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.MAPE": {
        "Parameter type": {
            "y_true": "Tensor (shape: [batch_size, d0, .. dN])",
            "y_pred": "Tensor (shape: [batch_size, d0, .. dN])"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.quantization.fake_quant_with_min_max_vars_gradient": {
        "Parameter type": {
            "gradients": "Tensor (float32)",
            "inputs": "Tensor (float32)",
            "min": "Tensor (float32)",
            "max": "Tensor (float32)",
            "num_bits": "int (default: 8)",
            "narrow_range": "bool (default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "gradients",
            "inputs",
            "min",
            "max"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Conv3DTranspose": {
        "Parameter type": {
            "filters": "int",
            "kernel_size": "Union[int, Tuple[int]]",
            "strides": "Union[int, Tuple[int]] (default: (1, 1, 1))",
            "padding": "str (default: 'valid'; options: 'valid', 'same')",
            "output_padding": "Optional[Tuple[int]]",
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')",
            "dilation_rate": "Union[int, Tuple[int]] (default: (1, 1, 1))",
            "activation": "Optional[Activation]",
            "use_bias": "bool (default: True)",
            "kernel_initializer": "Union[str, Initializer]",
            "bias_initializer": "Union[str, Initializer]",
            "kernel_regularizer": "Optional[Regularizer]",
            "bias_regularizer": "Optional[Regularizer]",
            "activity_regularizer": "Optional[Regularizer]",
            "kernel_constraint": "Optional[Constraint]",
            "bias_constraint": "Optional[Constraint]"
        },
        "Mandatory Parameters": [
            "filters",
            "kernel_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation_rate",
            "(strides > 1) & (dilation_rate > 1)"
        ]
    },
    "tf.signal.stft": {
        "Parameter type": {
            "signals": "Tensor (shape: [..., samples], dtype: float32/float64)",
            "frame_length": "int scalar Tensor",
            "frame_step": "int scalar Tensor",
            "fft_length": "Optional[int scalar Tensor]",
            "window_fn": "Optional[Callable]",
            "pad_end": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "signals",
            "frame_length",
            "frame_step"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.isdir": {
        "Parameter type": {
            "path": "str"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.RMSprop": {
        "Parameter type": {
            "learning_rate": "Union[float, keras.optimizers.schedules.LearningRateSchedule, callable]",
            "rho": "float",
            "momentum": "float",
            "epsilon": "float",
            "centered": "bool",
            "name": "str",
            "weight_decay": "float",
            "clipnorm": "float",
            "clipvalue": "float",
            "global_clipnorm": "float",
            "use_ema": "bool",
            "ema_momentum": "float",
            "ema_overwrite_frequency": "Union[int, None]",
            "loss_scale_factor": "Union[float, None]",
            "gradient_accumulation_steps": "Union[int, None]"
        },
        "Mandatory Parameters": [
            "learning_rate"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "clipnorm",
                "clipvalue"
            ],
            [
                "clipnorm",
                "global_clipnorm"
            ],
            [
                "clipvalue",
                "global_clipnorm"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.dlpack.from_dlpack": {
        "Parameter type": {
            "dlcapsule": "PyCapsule named as dltensor"
        },
        "Mandatory Parameters": [
            "dlcapsule"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.adjust_hue": {
        "Parameter type": {
            "image": "Tensor (shape: [..., 3])",
            "delta": "float",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "image",
            "delta"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.parse_example_dataset": {
        "Parameter type": {
            "features": "dict mapping feature keys to FixedLenFeature, VarLenFeature, RaggedFeature, or SparseFeature",
            "num_parallel_calls": "Optional[tf.int32 scalar tf.Tensor] (default: 1)",
            "deterministic": "Optional[bool] (default: None)"
        },
        "Mandatory Parameters": [
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.autodiff.ForwardAccumulator": {
        "Parameter type": {
            "primals": "Union[Tensor, Variable]",
            "tangents": "Tensor"
        },
        "Mandatory Parameters": [
            "primals",
            "tangents"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.segment_sum": {
        "Parameter type": {
            "data": "Tensor",
            "segment_ids": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "data",
            "segment_ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.models.load_model": {
        "Parameter type": {
            "filepath": "str or pathlib.Path",
            "custom_objects": "Optional[dict]",
            "compile": "bool (default: True)",
            "safe_mode": "bool (default: True)"
        },
        "Mandatory Parameters": [
            "filepath"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.resize": {
        "Parameter type": {
            "images": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "size": "1-D int32 Tensor of 2 elements: [new_height, new_width]",
            "method": "Union[ResizeMethod, str] (default: ResizeMethod.BILINEAR)",
            "preserve_aspect_ratio": "bool (default: False)",
            "antialias": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "images",
            "size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.parse_sequence_example": {
        "Parameter type": {
            "serialized": "Tensor (shape: (batch_size,), dtype: string)",
            "context_features": "Optional[Mapping[str, Union[FixedLenFeature, VarLenFeature, RaggedFeature]]]",
            "sequence_features": "Optional[Mapping[str, Union[FixedLenSequenceFeature, VarLenFeature, RaggedFeature]]]",
            "example_names": "Optional[Tensor (shape: (batch_size,), dtype: string)]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "serialized"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [
            [
                "context_features",
                "sequence_features"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.image.apply_brightness_shift": {
        "Parameter type": {
            "x": "Tensor (3D)",
            "brightness": "Float",
            "scale": "Boolean (default: True)"
        },
        "Mandatory Parameters": [
            "x",
            "brightness"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.to_dense": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "default_value": "Optional[Scalar]",
            "validate_indices": "Optional[bool]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sp_input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.ResNet152V2": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.ResNet152": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Optional[Union[str, callable]] (default: 'softmax')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.TFRecordWriter": {
        "Parameter type": {
            "filename": "str",
            "compression_type": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "filename"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.not_equal": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.shape_n": {
        "Parameter type": {
            "input": "List of Tensor objects",
            "out_type": "tf.dtypes.DType (default: tf.int32)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.random_contrast": {
        "Parameter type": {
            "image": "Tensor (shape: (..., height, width, channels))",
            "lower": "float",
            "upper": "float",
            "seed": "Optional[int]"
        },
        "Mandatory Parameters": [
            "image",
            "lower",
            "upper"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.sample_distorted_bounding_box": {
        "Parameter type": {
            "image_size": "Tensor (types: uint8, int8, int16, int32, int64; shape: [height, width, channels])",
            "bounding_boxes": "Tensor (type: float32; shape: [batch, N, 4])",
            "seed": "Optional[int] (default: 0)",
            "min_object_covered": "Optional[Tensor] (type: float32; default: 0.1)",
            "aspect_ratio_range": "Optional[List[float]] (default: [0.75, 1.33])",
            "area_range": "Optional[List[float]] (default: [0.05, 1])",
            "max_attempts": "Optional[int] (default: 100)",
            "use_image_if_no_bounding_boxes": "Optional[bool] (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "image_size",
            "bounding_boxes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.InceptionResNetV2": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, Callable] (default: 'softmax')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.mod": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.unsorted_segment_join": {
        "Parameter type": {
            "inputs": "List of tf.Tensor objects of type tf.string",
            "segment_ids": "tf.Tensor of type tf.int32 or tf.int64",
            "num_segments": "Scalar of type tf.int32 or tf.int64",
            "separator": "String (default: '')",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "inputs",
            "segment_ids",
            "num_segments"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.LogCosh": {
        "Parameter type": {
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'log_cosh')",
            "dtype": "Union[None, str, keras.DTypePolicy] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.softsign": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.stateless_random_brightness": {
        "Parameter type": {
            "image": "Tensor",
            "max_delta": "float",
            "seed": "Tensor (shape [2], dtype int32 or int64)"
        },
        "Mandatory Parameters": [
            "image",
            "max_delta",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.shape": {
        "Parameter type": {
            "input": "Tensor or SparseTensor",
            "out_type": "tf.dtypes.DType (default: tf.int32)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.diag": {
        "Parameter type": {
            "diagonal": "Tensor",
            "name": "str (optional)",
            "k": "Union[int, Tuple[int, int]]",
            "num_rows": "int (optional)",
            "num_cols": "int (optional)",
            "padding_value": "Union[int, float] (default: 0)",
            "align": "str (default: 'RIGHT_LEFT')"
        },
        "Mandatory Parameters": [
            "diagonal"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.conv_transpose": {
        "Parameter type": {
            "input": "Tensor (shape: [batch_size] + input_spatial_shape + [in_channels] or [batch_size, in_channels] + input_spatial_shape)",
            "filters": "Tensor (shape: spatial_filter_shape + [in_channels, out_channels])",
            "output_shape": "1-D Tensor",
            "strides": "Union[int, List[int]]",
            "padding": "str ('VALID' or 'SAME')",
            "data_format": "Optional[str] ('NWC', 'NCW', 'NHWC', 'NCHW', 'NDHWC', 'NCDHW')",
            "dilations": "Union[int, List[int]]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "filters",
            "output_shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.rsqrt": {
        "Parameter type": {
            "x": "tf.Tensor (types: bfloat16, half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.finfo": {
        "Parameter type": {
            "dtype": "dtype"
        },
        "Mandatory Parameters": [
            "dtype"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.less_equal": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorLowerTriangular": {
        "Parameter type": {
            "tril": "Tensor (shape: [B1,...,Bb, N, N])",
            "is_non_singular": "Optional[bool] (default: None)",
            "is_self_adjoint": "Optional[bool] (default: None)",
            "is_positive_definite": "Optional[bool] (default: None)",
            "is_square": "Optional[bool] (default: None)",
            "name": "str (default: 'LinearOperatorLowerTriangular')"
        },
        "Mandatory Parameters": [
            "tril"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.backend.set_floatx": {
        "Parameter type": {
            "value": "str (options: 'bfloat16', 'float16', 'float32', 'float64')"
        },
        "Mandatory Parameters": [
            "value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.trace": {
        "Parameter type": {
            "x": "tensor",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.as_string": {
        "Parameter type": {
            "input": "Tensor",
            "precision": "int",
            "scientific": "bool",
            "shortest": "bool",
            "width": "int",
            "fill": "string",
            "name": "string"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.switch_case": {
        "Parameter type": {
            "branch_index": "Tensor (int)",
            "branch_fns": "Union[dict, list]",
            "default": "Optional[callable]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "branch_index",
            "branch_fns"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.save": {
        "Parameter type": {
            "dataset": "tf.data.Dataset",
            "path": "str",
            "compression": "Optional[str] (default: None; options: 'GZIP', 'NONE')",
            "shard_func": "Optional[Callable]",
            "checkpoint_args": "Optional[dict]"
        },
        "Mandatory Parameters": [
            "dataset",
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.separable_conv2d": {
        "Parameter type": {
            "input": "Tensor (shape: according to data_format)",
            "depthwise_filter": "Tensor (shape: [filter_height, filter_width, in_channels, channel_multiplier])",
            "pointwise_filter": "Tensor (shape: [1, 1, channel_multiplier * in_channels, out_channels])",
            "strides": "List[int] (size 4)",
            "padding": "Union[str, List[List[int]]] (options: 'SAME', 'VALID', or explicit padding)",
            "data_format": "Optional[str] (default: 'NHWC'; options: 'NHWC', 'NCHW')",
            "dilations": "Optional[List[int]] (size 2)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "depthwise_filter",
            "pointwise_filter",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilations",
            "(dilations > 1)"
        ]
    },
    "tf.io.decode_bmp": {
        "Parameter type": {
            "contents": "Tensor (type: string, shape: 0-D)",
            "channels": "int (default: 0)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "contents"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nest.map_structure": {
        "Parameter type": {
            "func": "callable",
            "*structure": "nested structure",
            "**kwargs": "dictionary of keyword arguments"
        },
        "Mandatory Parameters": [
            "func",
            "*structure"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.TimeDistributed": {
        "Parameter type": {
            "layer": "keras.layers.Layer instance",
            "inputs": "Tensor of shape (batch, time, ...) or nested tensors",
            "training": "Optional[bool]",
            "mask": "Optional[Binary tensor of shape (samples, timesteps)]"
        },
        "Mandatory Parameters": [
            "layer"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.searchsorted": {
        "Parameter type": {
            "sorted_sequence": "Tensor",
            "values": "Tensor",
            "side": "str (default: 'left')",
            "out_type": "tf.dtypes.DType (default: tf.int32)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sorted_sequence",
            "values"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.MobileNetV2": {
        "Parameter type": {
            "input_shape": "Optional[tuple]",
            "alpha": "float (default: 1.0)",
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_shape",
                "input_tensor"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.categorical_column_with_vocabulary_list": {
        "Parameter type": {
            "key": "str",
            "vocabulary_list": "Iterable",
            "dtype": "Optional[tf.dtypes.DType]",
            "default_value": "int (default: -1)",
            "num_oov_buckets": "int (default: 0)"
        },
        "Mandatory Parameters": [
            "key",
            "vocabulary_list"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "default_value",
                "num_oov_buckets"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.decode_jpeg": {
        "Parameter type": {
            "contents": "Tensor (type: string)",
            "channels": "int (default: 0)",
            "ratio": "int (default: 1)",
            "fancy_upscaling": "bool (default: True)",
            "try_recover_truncated": "bool (default: False)",
            "acceptable_fraction": "float (default: 1)",
            "dct_method": "string (default: '')",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "contents"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.numeric_column": {
        "Parameter type": {
            "key": "str",
            "shape": "Union[int, Tuple[int]] (default: (1,))",
            "default_value": "Optional[Union[None, int, float, Iterable[Union[int, float]]]]",
            "dtype": "tf.dtypes.DType (default: tf.float32)",
            "normalizer_fn": "Optional[Callable[[Tensor], Tensor]]"
        },
        "Mandatory Parameters": [
            "key"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.unicode_decode_with_offsets": {
        "Parameter type": {
            "input": "N-dimensional potentially ragged string tensor",
            "input_encoding": "string",
            "errors": "string (default: 'replace')",
            "replacement_char": "int (default: 65533)",
            "replace_control_characters": "bool (default: False)",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "input",
            "input_encoding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.schedules.serialize": {
        "Parameter type": {
            "learning_rate_schedule": "LearningRateSchedule object"
        },
        "Mandatory Parameters": [
            "learning_rate_schedule"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.fft3d": {
        "Parameter type": {
            "input": "Tensor (must be complex64 or complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.per_image_standardization": {
        "Parameter type": {
            "image": "Tensor (at least 3 dimensions)"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.unique": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.image.img_to_array": {
        "Parameter type": {
            "img": "PIL Image instance",
            "data_format": "Optional[str] (default: None; options: 'channels_first', 'channels_last')",
            "dtype": "Optional[Union[str, np.dtype]] (default: None)"
        },
        "Mandatory Parameters": [
            "img"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.embedding_lookup_sparse": {
        "Parameter type": {
            "params": "Union[Tensor, List[Tensor]]",
            "sp_ids": "Union[SparseTensor, RaggedTensor]",
            "sp_weights": "Optional[Union[SparseTensor, RaggedTensor]]",
            "combiner": "Optional[str] (default: 'mean')",
            "max_norm": "Optional[float]",
            "name": "Optional[str]",
            "allow_fast_lookup": "Optional[bool]"
        },
        "Mandatory Parameters": [
            "params",
            "sp_ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.elu": {
        "Parameter type": {
            "features": "Tensor (types: half, bfloat16, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.central_crop": {
        "Parameter type": {
            "image": "Tensor (shape: [height, width, depth] or [batch_size, height, width, depth])",
            "central_fraction": "float (0, 1]"
        },
        "Mandatory Parameters": [
            "image",
            "central_fraction"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.depthwise_conv2d_backprop_input": {
        "Parameter type": {
            "input_sizes": "Tensor (int32)",
            "filter": "Tensor (half, bfloat16, float32, float64)",
            "out_backprop": "Tensor (same as filter)",
            "strides": "List[int]",
            "padding": "Union[str, List[List[int]]]",
            "data_format": "Optional[str] (NHWC, NCHW)",
            "dilations": "Optional[List[int]]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_sizes",
            "filter",
            "out_backprop",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.sigmoid_cross_entropy_with_logits": {
        "Parameter type": {
            "labels": "Tensor",
            "logits": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "labels",
            "logits"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.sigmoid": {
        "Parameter type": {
            "x": "Tensor (type: float16, float32, float64, complex64, or complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.group_by_reducer": {
        "Parameter type": {
            "key_func": "function mapping tensors to scalar tf.int64 tensor",
            "reducer": "instance of Reducer"
        },
        "Mandatory Parameters": [
            "key_func",
            "reducer"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.transpose": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.backend.image_data_format": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.GRU": {
        "Parameter type": {
            "units": "int",
            "activation": "str or None",
            "recurrent_activation": "str or None",
            "use_bias": "bool",
            "kernel_initializer": "str or Initializer instance",
            "recurrent_initializer": "str or Initializer instance",
            "bias_initializer": "str or Initializer instance",
            "kernel_regularizer": "Regularizer or None",
            "recurrent_regularizer": "Regularizer or None",
            "bias_regularizer": "Regularizer or None",
            "activity_regularizer": "Regularizer or None",
            "kernel_constraint": "Constraint or None",
            "recurrent_constraint": "Constraint or None",
            "bias_constraint": "Constraint or None",
            "dropout": "float",
            "recurrent_dropout": "float",
            "return_sequences": "bool",
            "return_state": "bool",
            "go_backwards": "bool",
            "stateful": "bool",
            "unroll": "bool",
            "time_major": "bool",
            "reset_after": "bool",
            "use_cudnn": "str"
        },
        "Mandatory Parameters": [
            "units"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.equal": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.roll": {
        "Parameter type": {
            "input": "Tensor",
            "shift": "Tensor (int32 or int64)",
            "axis": "Tensor (int32 or int64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "shift",
            "axis"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.unique_with_counts": {
        "Parameter type": {
            "x": "Tensor (1-D)",
            "out_idx": "Optional[tf.DType] (default: tf.int32)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.dct": {
        "Parameter type": {
            "input": "Tensor (float32 or float64)",
            "type": "int (1, 2, 3, or 4)",
            "n": "int or None",
            "axis": "int (must be -1)",
            "norm": "str or None ('ortho' or None)",
            "name": "str or None"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "type",
            "norm",
            "(type == 1) & (norm == 'ortho')"
        ]
    },
    "tf.bitwise.bitwise_xor": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.get": {
        "Parameter type": {
            "identifier": "Union[None, str, dict, function, Metric]"
        },
        "Mandatory Parameters": [
            "identifier"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.unsorted_segment_max": {
        "Parameter type": {
            "data": "Tensor",
            "segment_ids": "Tensor",
            "num_segments": "Tensor",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "data",
            "segment_ids",
            "num_segments"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.make_csv_dataset": {
        "Parameter type": {
            "file_pattern": "List of strings or patterns",
            "batch_size": "int",
            "column_names": "Optional[list of strings]",
            "column_defaults": "Optional[list of default values or tensors]",
            "label_name": "Optional[string]",
            "select_columns": "Optional[list of integers or strings]",
            "field_delim": "string (default: ',')",
            "use_quote_delim": "bool (default: True)",
            "na_value": "string (default: '')",
            "header": "bool (default: True)",
            "num_epochs": "Optional[int]",
            "shuffle": "bool (default: True)",
            "shuffle_buffer_size": "int (default: 10000)",
            "shuffle_seed": "Optional[int]",
            "prefetch_buffer_size": "Optional[int]",
            "num_parallel_reads": "Optional[int]",
            "sloppy": "bool (default: False)",
            "num_rows_for_inference": "int (default: 100)",
            "compression_type": "Optional[string]",
            "ignore_errors": "bool (default: False)",
            "encoding": "string (default: 'UTF-8')"
        },
        "Mandatory Parameters": [
            "file_pattern",
            "batch_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.rgb_to_grayscale": {
        "Parameter type": {
            "images": "Tensor (shape: (..., 3))",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "images"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.logical_and": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.mkdir": {
        "Parameter type": {
            "path": "string"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.det": {
        "Parameter type": {
            "input": "Tensor (shape: [..., M, M])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.xlogy": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.avg_pool": {
        "Parameter type": {
            "input": "Tensor of rank N+2",
            "ksize": "int or list of ints",
            "strides": "int or list of ints",
            "padding": "str ('VALID' or 'SAME')",
            "data_format": "Optional[str]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "ksize",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.MobileNetV3Small": {
        "Parameter type": {
            "input_shape": "Optional[Tuple[int, int, int]]",
            "alpha": "float (default: 1.0)",
            "minimalistic": "bool (default: False)",
            "include_top": "bool (default: True)",
            "weights": "Union[str, None]",
            "input_tensor": "Optional[Keras tensor]",
            "classes": "int (default: 1000)",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "dropout_rate": "float (default: 0.2)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "include_preprocessing": "bool (default: True)",
            "name": "str (default: 'mobilenet_v3_small')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_shape",
                "input_tensor"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.special.spence": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Cropping1D": {
        "Parameter type": {
            "cropping": "Union[int, Tuple[int, int], Dict]"
        },
        "Mandatory Parameters": [
            "cropping"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.space_to_batch_nd": {
        "Parameter type": {
            "input": "Tensor",
            "block_shape": "Tensor (int32 or int64)",
            "paddings": "Tensor (int32 or int64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "block_shape",
            "paddings"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.regularizers.l1_l2": {
        "Parameter type": {
            "l1": "float (default: 0.01)",
            "l2": "float (default: 0.01)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.truediv": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.sequence_categorical_column_with_identity": {
        "Parameter type": {
            "key": "str",
            "num_buckets": "int",
            "default_value": "Optional[int]"
        },
        "Mandatory Parameters": [
            "key",
            "num_buckets"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorZeros": {
        "Parameter type": {
            "num_rows": "int",
            "num_columns": "Optional[int]",
            "batch_shape": "Optional[List[int]]",
            "dtype": "Optional[tf.DType]",
            "is_non_singular": "bool",
            "is_self_adjoint": "bool",
            "is_positive_definite": "bool",
            "is_square": "bool",
            "assert_proper_shapes": "bool",
            "name": "str"
        },
        "Mandatory Parameters": [
            "num_rows"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.ctc_loss": {
        "Parameter type": {
            "labels": "Tensor or SparseTensor",
            "logits": "Tensor",
            "label_length": "Tensor",
            "logit_length": "Tensor",
            "logits_time_major": "bool (default: True)",
            "unique": "Optional[Tensor]",
            "blank_index": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "labels",
            "logits",
            "label_length",
            "logit_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.uniform_candidate_sampler": {
        "Parameter type": {
            "true_classes": "Tensor (int64, shape: [batch_size, num_true])",
            "num_true": "int",
            "num_sampled": "int",
            "unique": "bool",
            "range_max": "int",
            "seed": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "true_classes",
            "num_true",
            "num_sampled",
            "range_max"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "num_sampled",
            "unique",
            "(unique=True) & (num_sampled > range_max)"
        ]
    },
    "tf.image.rgb_to_yiq": {
        "Parameter type": {
            "images": "Tensor (shape: (batch, height, width, 3))"
        },
        "Mandatory Parameters": [
            "images"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.EfficientNetB3": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "name": "str (default: 'efficientnetb3')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.TrueNegatives": {
        "Parameter type": {
            "thresholds": "Optional[Union[float, List[float], Tuple[float]]] (default: None)",
            "name": "Optional[str] (default: None)",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.decode_image": {
        "Parameter type": {
            "contents": "Tensor of type string (0-D)",
            "channels": "Optional[int] (default: 0)",
            "dtype": "DType (default: tf.dtypes.uint8)",
            "name": "Optional[str]",
            "expand_animations": "Optional[bool] (default: True)"
        },
        "Mandatory Parameters": [
            "contents"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reciprocal_no_nan": {
        "Parameter type": {
            "x": "Tensor (type: float16, float32, float64, complex64, or complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.tuple": {
        "Parameter type": {
            "tensors": "List of Tensor or IndexedSlices, can include None",
            "control_inputs": "Optional[List of Operation or Tensor]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensors"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.equal": {
        "Parameter type": {
            "x": "tf.Tensor",
            "y": "tf.Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.matrix_transpose": {
        "Parameter type": {
            "a": "Tensor (rank >= 2)",
            "name": "str (optional)",
            "conjugate": "bool (optional, default: False)"
        },
        "Mandatory Parameters": [
            "a"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.stack": {
        "Parameter type": {
            "values": "List[Tensor]",
            "axis": "int (default: 0)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "values"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.EfficientNetB6": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "name": "str (default: 'efficientnetb6')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.abs": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.tridiagonal_matmul": {
        "Parameter type": {
            "diagonals": "Tensor or tuple of Tensors",
            "rhs": "Tensor",
            "diagonals_format": "str (default: 'compact')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "diagonals",
            "rhs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.expand_dims": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "axis": "int (default: -1)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "sp_input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.Mean": {
        "Parameter type": {
            "name": "str (default: 'mean')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.floormod": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.densenet.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.unicode_transcode": {
        "Parameter type": {
            "input": "Tensor of type string",
            "input_encoding": "string",
            "output_encoding": "string",
            "errors": "optional string (default: 'replace')",
            "replacement_char": "optional int (default: 65533)",
            "replace_control_characters": "optional bool (default: False)",
            "name": "optional string"
        },
        "Mandatory Parameters": [
            "input",
            "input_encoding",
            "output_encoding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.concatenate": {
        "Parameter type": {
            "inputs": "List of tensors",
            "axis": "int (default: -1)",
            "kwargs": "dict (additional keyword arguments)"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.GradientTape": {
        "Parameter type": {
            "persistent": "bool (default: False)",
            "watch_accessed_variables": "bool (default: True)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.queue.QueueBase": {
        "Parameter type": {
            "dtypes": "List of tf.DType",
            "shapes": "List of tuples or None",
            "names": "List of strings or None",
            "queue_ref": "Optional[tf.Tensor]"
        },
        "Mandatory Parameters": [
            "dtypes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.bias_add": {
        "Parameter type": {
            "value": "Tensor",
            "bias": "1-D Tensor",
            "data_format": "Optional[str]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value",
            "bias"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.bitwise_or": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.hamming_window": {
        "Parameter type": {
            "window_length": "Tensor (scalar)",
            "periodic": "bool Tensor (default: True)",
            "dtype": "tf.dtypes.float32 (default)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "window_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Reshape": {
        "Parameter type": {
            "target_shape": "Tuple of integers (does not include the samples dimension)"
        },
        "Mandatory Parameters": [
            "target_shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.irfft2d": {
        "Parameter type": {
            "input": "Tensor (complex64 or complex128)",
            "fft_length": "Tensor (int32, shape [2])",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ragged.range": {
        "Parameter type": {
            "starts": "Tensor",
            "limits": "Optional[Tensor]",
            "deltas": "Optional[Tensor]",
            "dtype": "Optional[tf.dtypes.DType]",
            "name": "Optional[str]",
            "row_splits_dtype": "tf.dtypes.DType"
        },
        "Mandatory Parameters": [
            "starts"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.selu": {
        "Parameter type": {
            "features": "Tensor (types: half, bfloat16, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.sequence_categorical_column_with_vocabulary_list": {
        "Parameter type": {
            "key": "str",
            "vocabulary_list": "Iterable",
            "dtype": "Optional[tf.DType]",
            "default_value": "int (default: -1)",
            "num_oov_buckets": "int (default: 0)"
        },
        "Mandatory Parameters": [
            "key",
            "vocabulary_list"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "default_value",
                "num_oov_buckets"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.EfficientNetB1": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "name": "str (default: 'efficientnetb1')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.argmax": {
        "Parameter type": {
            "input": "Tensor",
            "axis": "int (default: None)",
            "output_type": "dtype (default: tf.int64)",
            "name": "str (default: None)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.format": {
        "Parameter type": {
            "template": "string",
            "inputs": "list of Tensor objects or a single Tensor",
            "placeholder": "optional string (default: '{}')",
            "summarize": "optional int (default: 3)",
            "name": "optional string"
        },
        "Mandatory Parameters": [
            "template",
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.stateless_sample_distorted_bounding_box": {
        "Parameter type": {
            "image_size": "Tensor (types: uint8, int8, int16, int32, int64; shape: [height, width, channels])",
            "bounding_boxes": "Tensor (type: float32; shape: [batch, N, 4])",
            "seed": "Tensor (type: int32 or int64; shape: [2])",
            "min_object_covered": "Tensor (type: float32; default: 0.1)",
            "aspect_ratio_range": "Optional[List[float]] (default: [0.75, 1.33])",
            "area_range": "Optional[List[float]] (default: [0.05, 1])",
            "max_attempts": "Optional[int] (default: 100)",
            "use_image_if_no_bounding_boxes": "Optional[bool] (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "image_size",
            "bounding_boxes",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.max_pool2d": {
        "Parameter type": {
            "input": "Tensor (shape: (batch_size, height, width, channels))",
            "ksize": "Union[int, List[int]]",
            "strides": "Union[int, List[int]]",
            "padding": "Union[str, List[List[int]]]",
            "data_format": "str (default: 'NHWC')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "ksize",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.InputSpec": {
        "Parameter type": {
            "dtype": "Optional[tf.dtypes.DType]",
            "shape": "Optional[Tuple[Optional[int], ...]]",
            "ndim": "Optional[int]",
            "max_ndim": "Optional[int]",
            "min_ndim": "Optional[int]",
            "axes": "Optional[Dict[int, int]]",
            "allow_last_axis_squeeze": "bool",
            "name": "Optional[str]",
            "optional": "bool"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.sparse_top_k_categorical_accuracy": {
        "Parameter type": {
            "y_true": "Tensor (shape: (batch_size))",
            "y_pred": "Tensor (shape: (batch_size, num_categories) or (batch_size, N))",
            "k": "int (default: 5)",
            "from_sorted_ids": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.service.register_dataset": {
        "Parameter type": {
            "service": "string or tuple",
            "dataset": "tf.data.Dataset",
            "compression": "string (optional)",
            "dataset_id": "string (optional)"
        },
        "Mandatory Parameters": [
            "service",
            "dataset"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.InceptionV3": {
        "Parameter type": {
            "include_top": "Boolean",
            "weights": "Union[None, str, PathLike]",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Union[None, str]",
            "classes": "int",
            "classifier_activation": "Union[str, callable]",
            "name": "str"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.add_n": {
        "Parameter type": {
            "inputs": "List of tf.Tensor or tf.IndexedSlices",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.MSE": {
        "Parameter type": {
            "y_true": "Tensor (shape: [batch_size, d0, ..., dN])",
            "y_pred": "Tensor (shape: [batch_size, d0, ..., dN])"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.rfft2d": {
        "Parameter type": {
            "input": "Tensor (float32 or float64)",
            "fft_length": "Tensor (int32, shape [2])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.cosh": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorComposition": {
        "Parameter type": {
            "operators": "List[tf.linalg.LinearOperator]",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "operators"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.datasets.boston_housing.load_data": {
        "Parameter type": {
            "path": "str (default: 'boston_housing.npz')",
            "test_split": "float (default: 0.2)",
            "seed": "int (default: 113)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.Precision": {
        "Parameter type": {
            "thresholds": "Optional[Union[float, List[float], Tuple[float]]] (default: None)",
            "top_k": "Optional[int] (default: None)",
            "class_id": "Optional[int] (default: None)",
            "name": "Optional[str] (default: None)",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "top_k",
                "class_id"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.Progbar": {
        "Parameter type": {
            "target": "int or None",
            "width": "int (default: 30)",
            "verbose": "int (default: 1)",
            "interval": "float (default: 0.05)",
            "stateful_metrics": "Iterable[str] or None (default: None)",
            "unit_name": "str (default: 'step')"
        },
        "Mandatory Parameters": [
            "target"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.arccos": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.erfcinv": {
        "Parameter type": {
            "x": "Tensor (float or double)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.py_function": {
        "Parameter type": {
            "func": "Python function",
            "inp": "List of Tensors or CompositeTensors",
            "Tout": "Union[tf.DType, tf.TypeSpec, list]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "func",
            "inp",
            "Tout"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "func",
                "inp"
            ],
            [
                "func",
                "Tout"
            ],
            [
                "inp",
                "Tout"
            ]
        ],
        "Mandatory Coexistence Parameters": [
            [
                "func",
                "inp",
                "Tout"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.bitwise.bitwise_or": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.gelu": {
        "Parameter type": {
            "features": "float Tensor",
            "approximate": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.multiply": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.eigvalsh": {
        "Parameter type": {
            "tensor": "Tensor (shape: [..., N, N])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.cross_hashed": {
        "Parameter type": {
            "inputs": "iterable of Tensor or SparseTensor",
            "num_buckets": "int (>=0)",
            "hash_key": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.cbrt": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.MAE": {
        "Parameter type": {
            "y_true": "Tensor (shape: [batch_size, d0, .. dN])",
            "y_pred": "Tensor (shape: [batch_size, d0, .. dN])"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.norm": {
        "Parameter type": {
            "tensor": "Tensor (types: float32, float64, complex64, complex128)",
            "ord": "Union[str, int, float] (default: 'euclidean')",
            "axis": "Union[None, int, Tuple[int, int]]",
            "keepdims": "Union[None, bool]",
            "name": "Union[None, str]"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "ord",
            "axis",
            "(ord == 'fro') & (axis is None)"
        ]
    },
    "tf.experimental.numpy.float_power": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.subtract": {
        "Parameter type": {
            "inputs": "List of tensors (size 2, same shape)",
            "**kwargs": "Standard layer keyword arguments"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.imagenet_utils.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.minimum": {
        "Parameter type": {
            "inputs": "List of tensors (all of the same shape)"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.inception_v3.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.RemoteMonitor": {
        "Parameter type": {
            "root": "str (default: 'http://localhost:9000')",
            "path": "str (default: '/publish/epoch/end/')",
            "field": "str (default: 'data')",
            "headers": "Optional[dict]",
            "send_as_json": "bool (default: False)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.total_variation": {
        "Parameter type": {
            "images": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "images"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.read_file": {
        "Parameter type": {
            "filename": "string",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "filename"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.xdivy": {
        "Parameter type": {
            "x": "Tensor (types: half, float32, float64, complex64, complex128)",
            "y": "Tensor (types: half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.recompute_grad": {
        "Parameter type": {
            "f": "function that returns a Tensor or sequence of Tensors"
        },
        "Mandatory Parameters": [
            "f"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.flip_left_right": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.floor": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Conv2D": {
        "Parameter type": {
            "filters": "int",
            "kernel_size": "Union[int, Tuple[int, int]]",
            "strides": "Union[int, Tuple[int, int]] (default: (1, 1))",
            "padding": "str (default: 'valid'; options: 'valid', 'same')",
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')",
            "dilation_rate": "Union[int, Tuple[int, int]] (default: (1, 1))",
            "groups": "int (default: 1)",
            "activation": "Optional[Activation function] (default: None)",
            "use_bias": "bool (default: True)",
            "kernel_initializer": "Union[str, Initializer] (default: 'glorot_uniform')",
            "bias_initializer": "Union[str, Initializer] (default: 'zeros')",
            "kernel_regularizer": "Optional[Regularizer] (default: None)",
            "bias_regularizer": "Optional[Regularizer] (default: None)",
            "activity_regularizer": "Optional[Regularizer] (default: None)",
            "kernel_constraint": "Optional[Constraint] (default: None)",
            "bias_constraint": "Optional[Constraint] (default: None)"
        },
        "Mandatory Parameters": [
            "filters",
            "kernel_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation_rate",
            "(strides > 1) & (dilation_rate > 1)"
        ]
    },
    "tf.nn.max_pool1d": {
        "Parameter type": {
            "input": "Tensor (shape: (batch_size, input_length, num_channels))",
            "ksize": "Union[int, List[int]]",
            "strides": "Union[int, List[int]]",
            "padding": "Union[str, List[List[int]]]",
            "data_format": "str (default: 'NWC')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "ksize",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.copy_to_device": {
        "Parameter type": {
            "target_device": "str",
            "source_device": "str (default: '/cpu:0')"
        },
        "Mandatory Parameters": [
            "target_device"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.lite.TFLiteConverter": {
        "Parameter type": {
            "funcs": "List[ConcreteFunction]",
            "trackable_obj": "Optional[Trackable]"
        },
        "Mandatory Parameters": [
            "funcs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.where": {
        "Parameter type": {
            "condition": "Tensor (dtype: bool or numeric)",
            "x": "Optional[Tensor]",
            "y": "Optional[Tensor]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "condition"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [
            [
                "x",
                "y"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.weighted_moments": {
        "Parameter type": {
            "x": "Tensor",
            "axes": "1-d tensor of int32 values",
            "frequency_weights": "Tensor",
            "keepdims": "bool (default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "x",
            "axes",
            "frequency_weights"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.vgg19.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.Reducer": {
        "Parameter type": {
            "init_func": "Callable",
            "reduce_func": "Callable",
            "finalize_func": "Callable"
        },
        "Mandatory Parameters": [
            "init_func",
            "reduce_func",
            "finalize_func"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.greater_equal": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reduce_euclidean_norm": {
        "Parameter type": {
            "input_tensor": "Tensor",
            "axis": "Optional[Union[int, List[int]]]",
            "keepdims": "bool",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.softmax": {
        "Parameter type": {
            "sp_input": "N-D SparseTensor (where N >= 2)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sp_input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Softmax": {
        "Parameter type": {
            "axis": "int (default: -1)",
            "kwargs": "Base layer keyword arguments (e.g., name, dtype)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.maximum": {
        "Parameter type": {
            "sp_a": "SparseTensor",
            "sp_b": "SparseTensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sp_a",
            "sp_b"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.band_part": {
        "Parameter type": {
            "input": "Tensor",
            "num_lower": "int32 or int64",
            "num_upper": "int32 or int64",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input",
            "num_lower",
            "num_upper"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.adjust_gamma": {
        "Parameter type": {
            "image": "Tensor",
            "gamma": "Union[float, Tensor]",
            "gain": "Union[float, Tensor]"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.ssim_multiscale": {
        "Parameter type": {
            "img1": "Tensor (shape: [batch, height, width, channels])",
            "img2": "Tensor (shape: [batch, height, width, channels])",
            "max_val": "float",
            "power_factors": "Iterable (default: (0.0448, 0.2856, 0.3001, 0.2363, 0.1333))",
            "filter_size": "int (default: 11)",
            "filter_sigma": "float (default: 1.5)",
            "k1": "float (default: 0.01)",
            "k2": "float (default: 0.03)"
        },
        "Mandatory Parameters": [
            "img1",
            "img2",
            "max_val"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.logical_xor": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.sin": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.train.load_checkpoint": {
        "Parameter type": {
            "ckpt_dir_or_file": "str"
        },
        "Mandatory Parameters": [
            "ckpt_dir_or_file"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.logical_xor": {
        "Parameter type": {
            "x": "tf.Tensor (type: bool)",
            "y": "tf.Tensor (type: bool)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.avg_pool1d": {
        "Parameter type": {
            "input": "Tensor (3-D)",
            "ksize": "Union[int, List[int]]",
            "strides": "Union[int, List[int]]",
            "padding": "str ('VALID' or 'SAME')",
            "data_format": "str ('NWC' or 'NCW')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "ksize",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.size": {
        "Parameter type": {
            "input": "Tensor or SparseTensor",
            "out_type": "tf.dtypes.DType (default: tf.int32)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.mask": {
        "Parameter type": {
            "a": "IndexedSlices instance",
            "mask_indices": "list of integers",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "a",
            "mask_indices"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorFullMatrix": {
        "Parameter type": {
            "matrix": "Tensor (shape: [B1,...,Bb, M, N])",
            "is_non_singular": "Optional[bool] (default: None)",
            "is_self_adjoint": "Optional[bool] (default: None)",
            "is_positive_definite": "Optional[bool] (default: None)",
            "is_square": "Optional[bool] (default: None)",
            "name": "str (default: 'LinearOperatorFullMatrix')"
        },
        "Mandatory Parameters": [
            "matrix"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.conv3d": {
        "Parameter type": {
            "input": "Tensor (shape: [batch, in_depth, in_height, in_width, in_channels])",
            "filters": "Tensor (shape: [filter_depth, filter_height, filter_width, in_channels, out_channels])",
            "strides": "List[int] (length >=5)",
            "padding": "str (options: 'SAME', 'VALID')",
            "data_format": "Optional[str] (default: 'NDHWC')",
            "dilations": "Optional[List[int]] (default: [1,1,1,1,1])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "filters",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "dilations",
            "strides",
            "(dilations != [1,1,1,1,1]) & (strides != [1,1,1,1,1])"
        ]
    },
    "tf.nn.depthwise_conv2d": {
        "Parameter type": {
            "input": "Tensor (shape: (batch, height, width, channels) or (batch, channels, height, width))",
            "filter": "Tensor (shape: (filter_height, filter_width, in_channels, channel_multiplier))",
            "strides": "List[int] (size 4)",
            "padding": "Union[str, List[List[int]]] (options: 'SAME', 'VALID', or explicit padding)",
            "data_format": "Optional[str] (default: 'NHWC')",
            "dilations": "Optional[List[int]] (size 2)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "filter",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilations",
            "(strides != [1,1,1,1]) & (dilations > 1)"
        ]
    },
    "tf.math.special.fresnel_sin": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (type: float32 or float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.normalize": {
        "Parameter type": {
            "tensor": "Tensor (types: float32, float64, complex64, complex128)",
            "ord": "Union[str, int, float] (default: 'euclidean')",
            "axis": "Union[None, int, Tuple[int, int]] (default: None)",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.remainder": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.tensor_scatter_nd_update": {
        "Parameter type": {
            "tensor": "Tensor",
            "indices": "Tensor",
            "updates": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor",
            "indices",
            "updates"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.rint": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.squeeze": {
        "Parameter type": {
            "input": "Tensor",
            "axis": "Optional[List[int]]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.rad2deg": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.generate_bounding_box_proposals": {
        "Parameter type": {
            "scores": "Tensor (shape: [num_images, height, width, num_anchors])",
            "bbox_deltas": "Tensor (shape: [num_images, height, width, 4 x num_anchors])",
            "image_info": "Tensor (shape: [num_images, 5])",
            "anchors": "Tensor (shape: [num_anchors, 4])",
            "nms_threshold": "float (default: 0.7)",
            "pre_nms_topn": "int (default: 6000)",
            "min_size": "float (default: 16)",
            "post_nms_topn": "int (default: 300)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "scores",
            "bbox_deltas",
            "image_info",
            "anchors"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.length": {
        "Parameter type": {
            "input": "Tensor (type: string)",
            "unit": "string (default: 'BYTE')",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.backend.get_uid": {
        "Parameter type": {
            "prefix": "str (default: '')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Lambda": {
        "Parameter type": {
            "function": "Callable",
            "output_shape": "Optional[Union[Tuple, Callable]]",
            "mask": "Optional[Union[Callable, Tensor]]",
            "arguments": "Optional[Dict]"
        },
        "Mandatory Parameters": [
            "function"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.yiq_to_rgb": {
        "Parameter type": {
            "images": "Tensor (shape: (..., 3))"
        },
        "Mandatory Parameters": [
            "images"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.resnet_v2.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.weighted_categorical_column": {
        "Parameter type": {
            "categorical_column": "CategoricalColumn",
            "weight_feature_key": "str",
            "dtype": "tf.dtypes.DType (default: tf.dtypes.float32)"
        },
        "Mandatory Parameters": [
            "categorical_column",
            "weight_feature_key"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorCirculant": {
        "Parameter type": {
            "spectrum": "Tensor",
            "input_output_dtype": "tf.dtypes.DType",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "bool",
            "name": "str"
        },
        "Mandatory Parameters": [
            "spectrum"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.unstack": {
        "Parameter type": {
            "value": "Tensor",
            "num": "int (optional)",
            "axis": "int (optional)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.saved_model.contains_saved_model": {
        "Parameter type": {
            "export_dir": "str"
        },
        "Mandatory Parameters": [
            "export_dir"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.sparse_softmax_cross_entropy_with_logits": {
        "Parameter type": {
            "labels": "Tensor (dtype: int32 or int64)",
            "logits": "Tensor (dtype: float16, float32, or float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "labels",
            "logits"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.meshgrid": {
        "Parameter type": {
            "*args": "Tensor (rank 1)",
            "indexing": "str (optional, default: 'xy')",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "*args"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reduce_any": {
        "Parameter type": {
            "input_tensor": "Tensor (boolean)",
            "axis": "Union[int, Tuple[int], None] (default: None)",
            "keepdims": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.Model": {
        "Parameter type": {
            "inputs": "Union[Tensor, List[Tensor], Dict[str, Tensor]]",
            "outputs": "Union[Tensor, List[Tensor], Dict[str, Tensor]]",
            "name": "Optional[str]",
            "trainable": "Optional[bool]",
            "dtype": "Optional[tf.dtypes.DType]",
            "dynamic": "Optional[bool]",
            "activity_regularizer": "Optional[tf.keras.regularizers.Regularizer]",
            "layers": "List[tf.keras.layers.Layer]",
            "build_graph": "Optional[bool]",
            "weights": "List[Tensor]",
            "trainable_weights": "List[Tensor]",
            "non_trainable_weights": "List[Tensor]",
            "updates": "List[Tensor]",
            "losses": "List[Tensor]",
            "metrics": "List[Tensor]",
            "input_spec": "Optional[tf.keras.layers.InputSpec]",
            "call": "Callable",
            "compile": "Callable",
            "fit": "Callable",
            "evaluate": "Callable",
            "predict": "Callable",
            "save": "Callable",
            "load_weights": "Callable",
            "get_layer": "Callable",
            "get_weights": "Callable",
            "set_weights": "Callable",
            "summary": "Callable"
        },
        "Mandatory Parameters": [
            "inputs",
            "outputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.HeNormal": {
        "Parameter type": {
            "seed": "Optional[Union[int, keras.backend.SeedGenerator]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.unsorted_segment_sqrt_n": {
        "Parameter type": {
            "data": "Tensor (floating point or complex dtype)",
            "segment_ids": "Integer Tensor (shape is a prefix of data.shape)",
            "num_segments": "Integer scalar Tensor",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "data",
            "segment_ids",
            "num_segments"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ragged.cross_hashed": {
        "Parameter type": {
            "inputs": "List of RaggedTensor, Tensor, or SparseTensor",
            "num_buckets": "int (default: 0)",
            "hash_key": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.audio.decode_wav": {
        "Parameter type": {
            "contents": "Tensor of type string",
            "desired_channels": "int (default: -1)",
            "desired_samples": "int (default: -1)",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "contents"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.compat.as_bytes": {
        "Parameter type": {
            "bytes_or_text": "Union[bytearray, bytes, str, unicode]",
            "encoding": "str (default: 'utf-8')"
        },
        "Mandatory Parameters": [
            "bytes_or_text"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.to_number": {
        "Parameter type": {
            "input": "Tensor of type string",
            "out_type": "Optional[tf.DType] (default: tf.float32)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.boolean_mask": {
        "Parameter type": {
            "tensor": "Tensor",
            "mask": "Tensor (boolean)",
            "axis": "int (optional)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "tensor",
            "mask"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.LecunUniform": {
        "Parameter type": {
            "seed": "Optional[Union[int, keras.backend.SeedGenerator]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.quantization.quantize_and_dequantize": {
        "Parameter type": {
            "input": "Tensor",
            "input_min": "Tensor",
            "input_max": "Tensor",
            "signed_input": "bool",
            "num_bits": "int",
            "range_given": "bool",
            "round_mode": "str",
            "name": "str",
            "narrow_range": "bool",
            "axis": "int"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.EfficientNetB4": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "name": "str (default: 'efficientnetb4')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.quantization.fake_quant_with_min_max_args": {
        "Parameter type": {
            "inputs": "Tensor (float32)",
            "min": "float (optional, default: -6)",
            "max": "float (optional, default: 6)",
            "num_bits": "int (optional, default: 8)",
            "narrow_range": "bool (optional, default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.strip": {
        "Parameter type": {
            "input": "Tensor of type string",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.sinh": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Dense": {
        "Parameter type": {
            "units": "int",
            "activation": "Optional[Callable]",
            "use_bias": "bool",
            "kernel_initializer": "Optional[Initializer]",
            "bias_initializer": "Optional[Initializer]",
            "kernel_regularizer": "Optional[Regularizer]",
            "bias_regularizer": "Optional[Regularizer]",
            "activity_regularizer": "Optional[Regularizer]",
            "kernel_constraint": "Optional[Constraint]",
            "bias_constraint": "Optional[Constraint]",
            "lora_rank": "Optional[int]",
            "lora_alpha": "Optional[int]"
        },
        "Mandatory Parameters": [
            "units"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "lora_rank",
            "lora_alpha",
            "(lora_rank is not None) & (lora_alpha is not None)"
        ]
    },
    "tf.keras.initializers.Identity": {
        "Parameter type": {
            "gain": "float (default: 1.0)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.asinh": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.crop_and_resize": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, image_height, image_width, depth])",
            "boxes": "Tensor (shape: [num_boxes, 4])",
            "box_indices": "Tensor (shape: [num_boxes])",
            "crop_size": "Tensor (shape: [2])",
            "method": "str (default: 'bilinear')",
            "extrapolation_value": "float (default: 0.0)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "image",
            "boxes",
            "box_indices",
            "crop_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Conv1D": {
        "Parameter type": {
            "filters": "int",
            "kernel_size": "int or tuple/list of 1 integer",
            "strides": "int or tuple/list of 1 integer",
            "padding": "string ('valid', 'same', 'causal')",
            "data_format": "string ('channels_last' or 'channels_first')",
            "dilation_rate": "int or tuple/list of 1 integers",
            "groups": "int",
            "activation": "Activation function or None",
            "use_bias": "bool",
            "kernel_initializer": "Initializer or None",
            "bias_initializer": "Initializer or None",
            "kernel_regularizer": "Regularizer or None",
            "bias_regularizer": "Regularizer or None",
            "activity_regularizer": "Regularizer or None",
            "kernel_constraint": "Projection function or None",
            "bias_constraint": "Projection function or None"
        },
        "Mandatory Parameters": [
            "filters",
            "kernel_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation_rate",
            "(strides > 1) & (dilation_rate > 1)"
        ]
    },
    "tf.strings.split": {
        "Parameter type": {
            "input": "string Tensor of rank N",
            "sep": "0-D string Tensor",
            "maxsplit": "int",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.special.bessel_k0e": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.numpy_function": {
        "Parameter type": {
            "func": "Python function",
            "inp": "List of tf.Tensor objects",
            "Tout": "List or tuple of tensorflow data types or a single tensorflow data type",
            "stateful": "Boolean",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "func",
            "inp",
            "Tout"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.dynamic_partition": {
        "Parameter type": {
            "data": "Tensor",
            "partitions": "Tensor (int32)",
            "num_partitions": "int (>=1)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "data",
            "partitions",
            "num_partitions"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.huber": {
        "Parameter type": {
            "y_true": "tensor",
            "y_pred": "tensor",
            "delta": "float (default: 1.0)"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.constraints.get": {
        "Parameter type": {
            "identifier": "str or callable"
        },
        "Mandatory Parameters": [
            "identifier"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.regex_replace": {
        "Parameter type": {
            "input": "string Tensor",
            "pattern": "string or scalar string Tensor",
            "rewrite": "string or scalar string Tensor",
            "replace_global": "bool (default: True)",
            "name": "Optional[string]"
        },
        "Mandatory Parameters": [
            "input",
            "pattern",
            "rewrite"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.bucket_by_sequence_length": {
        "Parameter type": {
            "element_length_func": "function",
            "bucket_boundaries": "list<int>",
            "bucket_batch_sizes": "list<int>",
            "padded_shapes": "Optional[Nested structure of tf.TensorShape]",
            "padding_values": "Optional[Union[int, float, str, bytes, list, tuple, dict, tf.Tensor]]",
            "pad_to_bucket_boundary": "bool",
            "no_padding": "bool",
            "drop_remainder": "Optional[tf.bool]"
        },
        "Mandatory Parameters": [
            "element_length_func",
            "bucket_boundaries",
            "bucket_batch_sizes"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "pad_to_bucket_boundary",
                "no_padding"
            ],
            [
                "padded_shapes",
                "no_padding"
            ],
            [
                "padding_values",
                "no_padding"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.GlobalAveragePooling3D": {
        "Parameter type": {
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')",
            "keepdims": "Optional[bool] (default: False)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.Recall": {
        "Parameter type": {
            "thresholds": "Optional[Union[float, List[float]]] (default: None)",
            "top_k": "Optional[int] (default: None)",
            "class_id": "Optional[int] (default: None)",
            "name": "Optional[str] (default: None)",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "thresholds",
                "top_k"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.glob": {
        "Parameter type": {
            "pattern": "string or iterable of strings"
        },
        "Mandatory Parameters": [
            "pattern"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.TruePositives": {
        "Parameter type": {
            "thresholds": "Optional[Union[float, List[float], Tuple[float]]] (default: None)",
            "name": "Optional[str] (default: None)",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.reshape": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "shape": "1-D int64 Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sp_input",
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.ifft2d": {
        "Parameter type": {
            "input": "Tensor (complex64 or complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.softmax": {
        "Parameter type": {
            "x": "Tensor",
            "axis": "int (default: -1)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.segment_mean": {
        "Parameter type": {
            "data": "Tensor",
            "segment_ids": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "data",
            "segment_ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.split": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "num_split": "int",
            "axis": "int32 Tensor",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "sp_input",
            "num_split",
            "axis"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.remove": {
        "Parameter type": {
            "path": "string"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.extract_glimpse": {
        "Parameter type": {
            "input": "Tensor (shape: [batch_size, height, width, channels])",
            "size": "Tensor (shape: [2], type: int32)",
            "offsets": "Tensor (shape: [batch_size, 2], type: float32)",
            "centered": "bool (default: True)",
            "normalized": "bool (default: True)",
            "noise": "string (default: 'uniform'; options: 'uniform', 'gaussian', 'zero')",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "input",
            "size",
            "offsets"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.regularizers.L1L2": {
        "Parameter type": {
            "l1": "float (default: 0.0)",
            "l2": "float (default: 0.0)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.cardinality": {
        "Parameter type": {
            "dataset": "tf.data.Dataset"
        },
        "Mandatory Parameters": [
            "dataset"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.vorbis_window": {
        "Parameter type": {
            "window_length": "Tensor (scalar)",
            "dtype": "tf.dtypes.DType (default: tf.float32)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "window_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.sequence_numeric_column": {
        "Parameter type": {
            "key": "str",
            "shape": "Tuple[int] (default: (1,))",
            "default_value": "float (default: 0.0)",
            "dtype": "tf.dtypes.DType (default: tf.dtypes.float32)",
            "normalizer_fn": "Optional[Callable[[Tensor], Tensor]] (default: None)"
        },
        "Mandatory Parameters": [
            "key"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.batch_to_space": {
        "Parameter type": {
            "input": "Tensor",
            "block_shape": "1-D Tensor of int32 or int64",
            "crops": "2-D Tensor of int32 or int64",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "input",
            "block_shape",
            "crops"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.erfinv": {
        "Parameter type": {
            "x": "Tensor (type: float or double)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorDiag": {
        "Parameter type": {
            "diag": "Tensor",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "diag"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.case": {
        "Parameter type": {
            "pred_fn_pairs": "List[Tuple[Tensor, Callable]]",
            "default": "Optional[Callable]",
            "exclusive": "bool (default: False)",
            "strict": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "pred_fn_pairs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.ignore_errors": {
        "Parameter type": {
            "log_warning": "tf.bool (default: False)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.negative": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Layer": {
        "Parameter type": {
            "trainable": "bool (default: True)",
            "name": "str (default: None)",
            "dtype": "Union[tf.dtypes.DType, keras.DTypePolicy, None] (default: None)",
            "dynamic": "bool (default: False)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.make_parse_example_spec": {
        "Parameter type": {
            "feature_columns": "Iterable[FeatureColumn]"
        },
        "Mandatory Parameters": [
            "feature_columns"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.makedirs": {
        "Parameter type": {
            "path": "string"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.foldr": {
        "Parameter type": {
            "fn": "callable",
            "elems": "tensor or (possibly nested) sequence of tensors",
            "initializer": "optional tensor or (possibly nested) sequence of tensors",
            "parallel_iterations": "int (default: 10)",
            "back_prop": "bool (default: True)",
            "swap_memory": "bool (default: False)",
            "name": "optional str"
        },
        "Mandatory Parameters": [
            "fn",
            "elems"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "back_prop",
            "swap_memory",
            "(back_prop=False)&(swap_memory=True)"
        ]
    },
    "tf.keras.optimizers.Adamax": {
        "Parameter type": {
            "learning_rate": "float or keras.optimizers.schedules.LearningRateSchedule or callable",
            "beta_1": "float or constant float tensor",
            "beta_2": "float or constant float tensor",
            "epsilon": "float",
            "name": "str",
            "weight_decay": "float",
            "clipnorm": "float",
            "clipvalue": "float",
            "global_clipnorm": "float",
            "use_ema": "bool",
            "ema_momentum": "float",
            "ema_overwrite_frequency": "int or None",
            "loss_scale_factor": "float or None",
            "gradient_accumulation_steps": "int or None"
        },
        "Mandatory Parameters": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "clipnorm",
                "clipvalue"
            ],
            [
                "clipnorm",
                "global_clipnorm"
            ],
            [
                "clipvalue",
                "global_clipnorm"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.isnan": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.reorder": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sp_input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.GFile": {
        "Parameter type": {
            "name": "str",
            "mode": "str (default: 'r')"
        },
        "Mandatory Parameters": [
            "name"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.non_max_suppression_padded": {
        "Parameter type": {
            "boxes": "Tensor (rank 2 or higher, shape: [..., num_boxes, 4])",
            "scores": "Tensor (rank 1 or higher, shape: [..., num_boxes])",
            "max_output_size": "Scalar integer Tensor",
            "iou_threshold": "float (default: 0.5)",
            "score_threshold": "float (default: float('-inf'))",
            "pad_to_max_output_size": "bool (default: False)",
            "name": "str (optional)",
            "sorted_input": "bool (default: False)",
            "canonicalized_coordinates": "bool (default: False)",
            "tile_size": "int (default: 512)"
        },
        "Mandatory Parameters": [
            "boxes",
            "scores",
            "max_output_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.zeta": {
        "Parameter type": {
            "x": "Tensor (float32 or float64)",
            "q": "Tensor (same type as x)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "q"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.logaddexp": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.mixed_precision.Policy": {
        "Parameter type": {
            "name": "str"
        },
        "Mandatory Parameters": [
            "name"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.SensitivityAtSpecificity": {
        "Parameter type": {
            "specificity": "float (range: [0, 1])",
            "num_thresholds": "int (default: 200)",
            "class_id": "Optional[int]",
            "name": "Optional[str]",
            "dtype": "Optional[tf.DType]"
        },
        "Mandatory Parameters": [
            "specificity"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.softmax": {
        "Parameter type": {
            "logits": "Tensor (types: half, float32, float64)",
            "axis": "int (default: -1)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "logits"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.pad": {
        "Parameter type": {
            "tensor": "Tensor",
            "paddings": "Tensor of type int32",
            "mode": "str (one of 'CONSTANT', 'REFLECT', 'SYMMETRIC')",
            "constant_values": "scalar (same type as tensor)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "tensor",
            "paddings"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.negative": {
        "Parameter type": {
            "x": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.resnet.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.PrecisionAtRecall": {
        "Parameter type": {
            "recall": "float (range: [0, 1])",
            "num_thresholds": "int (default: 200)",
            "class_id": "Optional[int]",
            "name": "Optional[str]",
            "dtype": "Optional[tf.DType]"
        },
        "Mandatory Parameters": [
            "recall"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.exp": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.backend.set_epsilon": {
        "Parameter type": {
            "value": "float"
        },
        "Mandatory Parameters": [
            "value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.imagenet_utils.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)",
            "mode": "String (default: 'caffe')"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.train.checkpoints_iterator": {
        "Parameter type": {
            "checkpoint_dir": "str",
            "min_interval_secs": "int (default: 0)",
            "timeout": "Optional[int] (default: None)",
            "timeout_fn": "Optional[Callable[[], bool]] (default: None)"
        },
        "Mandatory Parameters": [
            "checkpoint_dir"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.required_space_to_batch_paddings": {
        "Parameter type": {
            "input_shape": "int32 Tensor (shape: [N])",
            "block_shape": "int32 Tensor (shape: [N])",
            "base_paddings": "Optional[int32 Tensor] (shape: [N, 2])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_shape",
            "block_shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.minimum": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.SparseTopKCategoricalAccuracy": {
        "Parameter type": {
            "k": "int (default: 5)",
            "name": "str (default: 'sparse_top_k_categorical_accuracy')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)",
            "from_sorted_ids": "bool (default: False)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Masking": {
        "Parameter type": {
            "mask_value": "float (default: 0.0)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.constraints.MinMaxNorm": {
        "Parameter type": {
            "min_value": "float (default: 0.0)",
            "max_value": "float (default: 1.0)",
            "rate": "float (default: 1.0)",
            "axis": "int (default: 0)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.SpatialDropout3D": {
        "Parameter type": {
            "rate": "float",
            "data_format": "Optional[str]"
        },
        "Mandatory Parameters": [
            "rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.decode_and_crop_jpeg": {
        "Parameter type": {
            "contents": "Tensor (type: string)",
            "crop_window": "Tensor (type: int32)",
            "channels": "int (default: 0)",
            "ratio": "int (default: 1)",
            "fancy_upscaling": "bool (default: True)",
            "try_recover_truncated": "bool (default: False)",
            "acceptable_fraction": "float (default: 1)",
            "dct_method": "string (default: '')",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "contents",
            "crop_window"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.sequence.pad_sequences": {
        "Parameter type": {
            "sequences": "List of sequences (each sequence is a list of integers)",
            "maxlen": "Optional Int",
            "dtype": "Optional, defaults to 'int32'",
            "padding": "String, 'pre' or 'post'",
            "truncating": "String, 'pre' or 'post'",
            "value": "Float or String, padding value"
        },
        "Mandatory Parameters": [
            "sequences"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.cumulative_logsumexp": {
        "Parameter type": {
            "x": "Tensor (types: float16, float32, float64)",
            "axis": "Tensor (types: int32, int64) (default: 0)",
            "exclusive": "bool (default: False)",
            "reverse": "bool (default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.bitwise.left_shift": {
        "Parameter type": {
            "x": "Tensor (types: int8, int16, int32, int64, uint8, uint16, uint32, uint64)",
            "y": "Tensor (same type as x)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.inverse_stft": {
        "Parameter type": {
            "stfts": "Tensor (complex64/complex128, shape: [..., frames, fft_unique_bins])",
            "frame_length": "int scalar Tensor",
            "frame_step": "int scalar Tensor",
            "fft_length": "Optional[int scalar Tensor]",
            "window_fn": "Optional[callable]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "stfts",
            "frame_length",
            "frame_step"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.accumulate_n": {
        "Parameter type": {
            "inputs": "List[Tensor]",
            "shape": "Optional[List[int]]",
            "tensor_dtype": "Optional[tf.DType]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.tanh": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ragged.boolean_mask": {
        "Parameter type": {
            "data": "potentially ragged tensor",
            "mask": "potentially ragged boolean tensor",
            "name": "optional string"
        },
        "Mandatory Parameters": [
            "data",
            "mask"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reduce_mean": {
        "Parameter type": {
            "input_tensor": "Tensor",
            "axis": "Optional[Union[int, Tuple[int]]]",
            "keepdims": "bool",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.reverse_sequence": {
        "Parameter type": {
            "input": "Tensor",
            "seq_lengths": "Tensor",
            "seq_axis": "int",
            "batch_axis": "int",
            "name": "str"
        },
        "Mandatory Parameters": [
            "input",
            "seq_lengths"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorBlockDiag": {
        "Parameter type": {
            "operators": "List[tf.linalg.LinearOperator]",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "bool (default: True)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "operators"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.combined_non_max_suppression": {
        "Parameter type": {
            "boxes": "Tensor (shape: [batch_size, num_boxes, q, 4])",
            "scores": "Tensor (shape: [batch_size, num_boxes, num_classes])",
            "max_output_size_per_class": "int",
            "max_total_size": "int",
            "iou_threshold": "float (default: 0.5)",
            "score_threshold": "float (default: float('-inf'))",
            "pad_per_class": "bool (default: False)",
            "clip_boxes": "bool (default: True)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "boxes",
            "scores",
            "max_output_size_per_class",
            "max_total_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.silu": {
        "Parameter type": {
            "features": "Tensor",
            "beta": "Tensor (default: 1.0)"
        },
        "Mandatory Parameters": [
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.logical_or": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.acos": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient": {
        "Parameter type": {
            "gradients": "Tensor (float32)",
            "inputs": "Tensor (float32)",
            "min": "Tensor (float32)",
            "max": "Tensor (float32)",
            "num_bits": "int (optional, default: 8)",
            "narrow_range": "bool (optional, default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "gradients",
            "inputs",
            "min",
            "max"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.deserialize": {
        "Parameter type": {
            "config": "dict",
            "custom_objects": "Optional[dict]"
        },
        "Mandatory Parameters": [
            "config"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.ResNet101": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Optional[Union[str, callable]] (default: 'softmax')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.Adam": {
        "Parameter type": {
            "learning_rate": "float or keras.optimizers.schedules.LearningRateSchedule or callable",
            "beta_1": "float or constant float tensor or callable",
            "beta_2": "float or constant float tensor or callable",
            "epsilon": "float",
            "amsgrad": "boolean",
            "name": "string",
            "weight_decay": "float",
            "clipnorm": "float",
            "clipvalue": "float",
            "global_clipnorm": "float",
            "use_ema": "boolean",
            "ema_momentum": "float",
            "ema_overwrite_frequency": "int or None",
            "loss_scale_factor": "float or None",
            "gradient_accumulation_steps": "int or None"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "clipnorm",
                "clipvalue"
            ],
            [
                "clipnorm",
                "global_clipnorm"
            ],
            [
                "clipvalue",
                "global_clipnorm"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.sin": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.to_hash_bucket_strong": {
        "Parameter type": {
            "input": "Tensor of type string",
            "num_buckets": "int (>= 1)",
            "key": "list of ints (length 2)",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "input",
            "num_buckets",
            "key"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.regularizers.L1": {
        "Parameter type": {
            "l1": "float (default: 0.01)"
        },
        "Mandatory Parameters": [
            "l1"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.squared_difference": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.BinaryCrossentropy": {
        "Parameter type": {
            "name": "str (default: 'binary_crossentropy')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)",
            "from_logits": "bool (default: False)",
            "label_smoothing": "float (default: 0)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.MeanAbsoluteError": {
        "Parameter type": {
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'mean_absolute_error')",
            "dtype": "Union[tf.DType, keras.DTypePolicy, None] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.in_top_k": {
        "Parameter type": {
            "targets": "Tensor (int32 or int64)",
            "predictions": "Tensor (float32)",
            "k": "int",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "targets",
            "predictions",
            "k"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.models.model_from_json": {
        "Parameter type": {
            "json_string": "str",
            "custom_objects": "Optional[dict]"
        },
        "Mandatory Parameters": [
            "json_string"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorCirculant3D": {
        "Parameter type": {
            "spectrum": "Tensor",
            "input_output_dtype": "tf.dtypes.DType",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "bool",
            "name": "str"
        },
        "Mandatory Parameters": [
            "spectrum"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.bytes_split": {
        "Parameter type": {
            "input": "string Tensor or RaggedTensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.Operation": {
        "Parameter type": {
            "node_def": "NodeDef",
            "g": "Graph",
            "inputs": "Optional[List[Tensor]]",
            "output_types": "Optional[List[tf.DType]]",
            "control_inputs": "Optional[List[Operation]]",
            "input_types": "Optional[List[tf.DType]]",
            "original_op": "Optional[Operation]",
            "op_def": "Optional[OpDef]"
        },
        "Mandatory Parameters": [
            "node_def",
            "g"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.stateless_random_hue": {
        "Parameter type": {
            "image": "Tensor (shape: (..., 3))",
            "max_delta": "float",
            "seed": "Tensor (shape: [2], dtype: int32 or int64)"
        },
        "Mandatory Parameters": [
            "image",
            "max_delta",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.divide": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.TensorBoard": {
        "Parameter type": {
            "log_dir": "str (default: 'logs')",
            "histogram_freq": "int (default: 0)",
            "write_graph": "bool (default: True)",
            "write_images": "bool (default: False)",
            "update_freq": "Union[str, int] (default: 'epoch')",
            "profile_batch": "Union[int, Tuple[int, int]] (default: 2)",
            "embeddings_freq": "int (default: 0)",
            "embeddings_metadata": "Optional[Dict[str, str]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ones_like": {
        "Parameter type": {
            "input": "Tensor",
            "dtype": "Optional[Union[tf.DType, str]]",
            "name": "Optional[str]",
            "layout": "Optional[tf.experimental.dtensor.Layout]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.heaviside": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.adjust_saturation": {
        "Parameter type": {
            "image": "Tensor (shape: [..., 3])",
            "saturation_factor": "float",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "image",
            "saturation_factor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.ReduceLROnPlateau": {
        "Parameter type": {
            "monitor": "str (default: 'val_loss')",
            "factor": "float (default: 0.1)",
            "patience": "int (default: 10)",
            "verbose": "int (default: 0)",
            "mode": "str (default: 'auto'; options: 'auto', 'min', 'max')",
            "min_delta": "float (default: 0.0001)",
            "cooldown": "int (default: 0)",
            "min_lr": "float (default: 0)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.categorical_crossentropy": {
        "Parameter type": {
            "y_true": "Tensor",
            "y_pred": "Tensor",
            "from_logits": "bool (default: False)",
            "label_smoothing": "float (default: 0)",
            "axis": "int (default: -1)"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.get": {
        "Parameter type": {
            "identifier": "Union[str, dict, tf.keras.optimizers.Optimizer]"
        },
        "Mandatory Parameters": [
            "identifier"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.arctan": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.MobileNetV3Large": {
        "Parameter type": {
            "input_shape": "Optional[Tuple[int, int, int]]",
            "alpha": "float (default: 1.0)",
            "minimalistic": "bool (default: False)",
            "include_top": "bool (default: True)",
            "weights": "Union[str, None]",
            "input_tensor": "Optional[Keras tensor]",
            "classes": "int (default: 1000)",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "dropout_rate": "float (default: 0.2)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "include_preprocessing": "bool (default: True)",
            "name": "str (default: 'mobilenet_v3_large')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_shape",
                "input_tensor"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.UpSampling2D": {
        "Parameter type": {
            "size": "Union[int, Tuple[int, int]] (default: (2, 2))",
            "data_format": "Optional[str] (default: None)",
            "interpolation": "str (default: 'nearest')"
        },
        "Mandatory Parameters": [
            "size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.rgb_to_hsv": {
        "Parameter type": {
            "images": "Tensor (types: half, bfloat16, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "images"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.DenseNet169": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor] (default: None)",
            "input_shape": "Optional[tuple] (default: None)",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "name": "str (default: 'densenet169')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.stateless_poisson": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "seed": "shape [2] Tensor, int32 or int64",
            "lam": "Tensor",
            "dtype": "Dtype (default: int32)",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "shape",
            "seed",
            "lam"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.sinh": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.bitwise.right_shift": {
        "Parameter type": {
            "x": "Tensor (must be one of: int8, int16, int32, int64, uint8, uint16, uint32, uint64)",
            "y": "Tensor (same type as x)",
            "name": "Optional[str] (operation name)"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.arctanh": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.exists": {
        "Parameter type": {
            "path": "string"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.DenseNet201": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor] (default: None)",
            "input_shape": "Optional[tuple] (default: None)",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "name": "str (default: 'densenet201')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.DistributeOptions": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.slice": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "start": "1-D tensor",
            "size": "1-D tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sp_input",
            "start",
            "size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.gcd": {
        "Parameter type": {
            "x1": "Tensor or array-like",
            "x2": "Tensor or array-like"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.ctc_beam_search_decoder": {
        "Parameter type": {
            "inputs": "3-D float Tensor, size [max_time, batch_size, num_classes]",
            "sequence_length": "1-D int32 vector, size [batch_size]",
            "beam_width": "int scalar >= 0",
            "top_paths": "int scalar >= 0, <= beam_width"
        },
        "Mandatory Parameters": [
            "inputs",
            "sequence_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.serialize_many_sparse": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "out_type": "dtype (default: tf.dtypes.string)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sp_input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.sign": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, int32, int64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.maximum": {
        "Parameter type": {
            "inputs": "List of tensors (all of the same shape)",
            "**kwargs": "Standard layer keyword arguments"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.nasnet.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.is_strictly_increasing": {
        "Parameter type": {
            "x": "Numeric Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.segment_prod": {
        "Parameter type": {
            "data": "Tensor",
            "segment_ids": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "data",
            "segment_ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.datasets.reuters.load_data": {
        "Parameter type": {
            "path": "str (default: 'reuters.npz')",
            "num_words": "Optional[int] (default: None)",
            "skip_top": "int (default: 0)",
            "maxlen": "Optional[int] (default: None)",
            "test_split": "float (default: 0.2)",
            "seed": "int (default: 113)",
            "start_char": "int (default: 1)",
            "oov_char": "int (default: 2)",
            "index_from": "int (default: 3)",
            "**kwargs": "dict"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.constraints.UnitNorm": {
        "Parameter type": {
            "axis": "int (default: 0)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.special.bessel_j1": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.adjust_contrast": {
        "Parameter type": {
            "images": "Tensor (at least 3-D)",
            "contrast_factor": "float"
        },
        "Mandatory Parameters": [
            "images",
            "contrast_factor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.mdct": {
        "Parameter type": {
            "signals": "Tensor (shape: [..., samples], dtype: float32/float64)",
            "frame_length": "int scalar Tensor",
            "window_fn": "callable or None",
            "pad_end": "bool",
            "norm": "str or None",
            "name": "str or None"
        },
        "Mandatory Parameters": [
            "signals",
            "frame_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.lu": {
        "Parameter type": {
            "input": "Tensor",
            "output_idx_type": "tf.DType",
            "name": "str"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.eigvals": {
        "Parameter type": {
            "tensor": "Tensor (shape: [..., N, N])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.polyval": {
        "Parameter type": {
            "coeffs": "List[Tensor]",
            "x": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "coeffs",
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.special.bessel_k0": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.custom_gradient": {
        "Parameter type": {
            "f": "function"
        },
        "Mandatory Parameters": [
            "f"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.stateless_random_saturation": {
        "Parameter type": {
            "image": "Tensor (shape: (..., 3))",
            "lower": "float",
            "upper": "float",
            "seed": "Optional[Tensor] (shape: [2], dtype: int32 or int64)"
        },
        "Mandatory Parameters": [
            "image",
            "lower",
            "upper"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sort": {
        "Parameter type": {
            "values": "Tensor",
            "axis": "int (default: -1)",
            "direction": "str (default: 'ASCENDING')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "values"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.hinge": {
        "Parameter type": {
            "y_true": "Tensor (shape: [batch_size, d0, .. dN])",
            "y_pred": "Tensor (shape: [batch_size, d0, .. dN])"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.categorical_column_with_identity": {
        "Parameter type": {
            "key": "str",
            "num_buckets": "int",
            "default_value": "Optional[int]"
        },
        "Mandatory Parameters": [
            "key",
            "num_buckets"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.conv3d_transpose": {
        "Parameter type": {
            "input": "Tensor (shape: [batch, depth, height, width, in_channels] or [batch, in_channels, depth, height, width])",
            "filters": "Tensor (shape: [depth, height, width, output_channels, in_channels])",
            "output_shape": "Tensor (shape: [batch, depth, height, width, output_channels])",
            "strides": "Union[int, List[int]] (length: 1, 3, or 5)",
            "padding": "str (options: 'VALID', 'SAME')",
            "data_format": "str (options: 'NDHWC', 'NCDHW')",
            "dilations": "Union[int, List[int]] (length: 1, 3, or 5)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "filters",
            "output_shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.igamma": {
        "Parameter type": {
            "a": "Tensor (types: bfloat16, half, float32, float64)",
            "x": "Tensor (same type as a)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "a",
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.lite.RepresentativeDataset": {
        "Parameter type": {
            "input_gen": "Generator function"
        },
        "Mandatory Parameters": [
            "input_gen"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.fingerprint": {
        "Parameter type": {
            "data": "Tensor",
            "method": "Tensor of type tf.string",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "data"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.square": {
        "Parameter type": {
            "x": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.matmul": {
        "Parameter type": {
            "a": "Tensor",
            "b": "Tensor",
            "transpose_a": "bool (default: False)",
            "transpose_b": "bool (default: False)",
            "adjoint_a": "bool (default: False)",
            "adjoint_b": "bool (default: False)",
            "a_is_sparse": "bool (default: False)",
            "b_is_sparse": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "a",
            "b"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "transpose_a",
                "adjoint_a"
            ],
            [
                "transpose_b",
                "adjoint_b"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.image.load_img": {
        "Parameter type": {
            "path": "str",
            "grayscale": "bool",
            "color_mode": "str",
            "target_size": "Optional[Tuple[int, int]]",
            "interpolation": "str",
            "keep_aspect_ratio": "bool"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.cholesky_solve": {
        "Parameter type": {
            "chol": "Tensor (shape: [..., M, M])",
            "rhs": "Tensor (same type as chol, shape: [..., M, K])",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "chol",
            "rhs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.conv2d": {
        "Parameter type": {
            "input": "Tensor",
            "filters": "Tensor",
            "strides": "Union[int, List[int]]",
            "padding": "Union[str, List[List[int]]]",
            "data_format": "Optional[str]",
            "dilations": "Optional[Union[int, List[int]]]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "filters"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.lu_reconstruct": {
        "Parameter type": {
            "lower_upper": "Tensor",
            "perm": "Tensor",
            "validate_args": "bool",
            "name": "str"
        },
        "Mandatory Parameters": [
            "lower_upper",
            "perm"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.datasets.cifar10.load_data": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.reciprocal": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.get": {
        "Parameter type": {
            "identifier": "Union[None, str, dict, function, Loss]"
        },
        "Mandatory Parameters": [
            "identifier"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.psnr": {
        "Parameter type": {
            "a": "Tensor",
            "b": "Tensor",
            "max_val": "Union[int, float]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "a",
            "b",
            "max_val"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.deserialize": {
        "Parameter type": {
            "name": "str",
            "custom_objects": "Optional[Dict[str, Any]] (default: None)"
        },
        "Mandatory Parameters": [
            "name"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.lookup.StaticVocabularyTable": {
        "Parameter type": {
            "initializer": "tf.lookup.Initializer",
            "num_oov_buckets": "int",
            "lookup_key_dtype": "Optional[tf.dtypes.DType]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "initializer",
            "num_oov_buckets"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.special.bessel_j0": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.bitwise.invert": {
        "Parameter type": {
            "x": "Tensor (supported types: int8, int16, int32, int64, uint8, uint16, uint32, uint64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.decode_base64": {
        "Parameter type": {
            "input": "Tensor of type string",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.global_norm": {
        "Parameter type": {
            "t_list": "list or tuple of Tensors, IndexedSlices, or None",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "t_list"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.TruncatedNormal": {
        "Parameter type": {
            "mean": "float (default: 0.0)",
            "stddev": "float (default: 0.05)",
            "seed": "Optional[Union[int, keras.backend.SeedGenerator]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.tan": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.enumerate_dataset": {
        "Parameter type": {
            "start": "tf.int64 scalar tf.Tensor"
        },
        "Mandatory Parameters": [
            "start"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sysconfig.get_lib": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.image.apply_channel_shift": {
        "Parameter type": {
            "x": "Tensor (must be 3D)",
            "intensity": "int",
            "channel_axis": "int (default: 0)"
        },
        "Mandatory Parameters": [
            "x",
            "intensity"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.decode_proto": {
        "Parameter type": {
            "bytes": "Tensor (type: string)",
            "message_type": "string",
            "field_names": "list of strings",
            "output_types": "list of tf.DTypes",
            "descriptor_source": "optional string (default: 'local://')",
            "message_format": "optional string (default: 'binary')",
            "sanitize": "optional bool (default: False)",
            "name": "optional string"
        },
        "Mandatory Parameters": [
            "bytes",
            "message_type",
            "field_names",
            "output_types"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.tile": {
        "Parameter type": {
            "input": "Tensor",
            "multiples": "Tensor (type: int32 or int64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "multiples"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.MeanAbsolutePercentageError": {
        "Parameter type": {
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'mean_absolute_percentage_error')",
            "dtype": "Union[tf.DType, keras.DTypePolicy, None] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.unicode_split_with_offsets": {
        "Parameter type": {
            "input": "N-dimensional potentially ragged string tensor",
            "input_encoding": "string",
            "errors": "string (default: 'replace')",
            "replacement_char": "int (default: 65533)",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "input",
            "input_encoding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.bessel_i0e": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.cross": {
        "Parameter type": {
            "inputs": "Iterable of Tensor or SparseTensor",
            "name": "Optional string",
            "separator": "Optional string (default: '_X_')"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.special.expint": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.stop_gradient": {
        "Parameter type": {
            "input": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.cos": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.decode_json_example": {
        "Parameter type": {
            "json_examples": "string tensor",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "json_examples"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.lu_matrix_inverse": {
        "Parameter type": {
            "lower_upper": "Tensor",
            "perm": "Tensor",
            "validate_args": "bool",
            "name": "str"
        },
        "Mandatory Parameters": [
            "lower_upper",
            "perm"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.AveragePooling3D": {
        "Parameter type": {
            "pool_size": "Union[int, Tuple[int, int, int]] (default: (2, 2, 2))",
            "strides": "Union[int, Tuple[int, int, int], None] (default: None)",
            "padding": "str (default: 'valid'; options: 'valid', 'same')",
            "data_format": "str (default: None; options: 'channels_last', 'channels_first')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.ifft3d": {
        "Parameter type": {
            "input": "Tensor (complex64 or complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.parse_example": {
        "Parameter type": {
            "serialized": "Tensor (shape: (batch_size,), dtype: string)",
            "features": "Mapping (keys: strings, values: FixedLenFeature, VarLenFeature, SparseFeature, or RaggedFeature)",
            "example_names": "Optional[Tensor] (shape: (batch_size,), dtype: string)",
            "name": "Optional[string]"
        },
        "Mandatory Parameters": [
            "serialized",
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.lite.Interpreter": {
        "Parameter type": {
            "model_path": "Optional[str]",
            "model_content": "Optional[bytes]",
            "experimental_delegates": "Optional[List[Delegate]]",
            "num_threads": "Optional[int]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "model_path",
                "model_content"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.regularizers.get": {
        "Parameter type": {
            "identifier": "Union[str, regularizer.Regularizer]"
        },
        "Mandatory Parameters": [
            "identifier"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.map_and_batch": {
        "Parameter type": {
            "map_func": "function mapping a nested structure of tensors to another nested structure of tensors",
            "batch_size": "tf.int64 scalar tf.Tensor",
            "num_parallel_batches": "optional tf.int64 scalar tf.Tensor",
            "drop_remainder": "optional tf.bool scalar tf.Tensor",
            "num_parallel_calls": "optional tf.int32 scalar tf.Tensor"
        },
        "Mandatory Parameters": [
            "map_func",
            "batch_size"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "num_parallel_batches",
                "num_parallel_calls"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.isotonic_regression": {
        "Parameter type": {
            "inputs": "Tensor",
            "decreasing": "bool (default: True)",
            "axis": "int (default: -1)"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.unsorted_segment_min": {
        "Parameter type": {
            "data": "Tensor",
            "segment_ids": "Tensor",
            "num_segments": "Tensor",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "data",
            "segment_ids",
            "num_segments"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Conv2DTranspose": {
        "Parameter type": {
            "filters": "int",
            "kernel_size": "int or tuple/list of 1 integer",
            "strides": "int or tuple/list of 1 integer",
            "padding": "string ('valid' or 'same')",
            "output_padding": "int or tuple/list of 1 integer",
            "data_format": "string ('channels_last' or 'channels_first')",
            "dilation_rate": "int or tuple/list of 1 integers",
            "activation": "Activation function",
            "use_bias": "bool",
            "kernel_initializer": "Initializer",
            "bias_initializer": "Initializer",
            "kernel_regularizer": "Regularizer",
            "bias_regularizer": "Regularizer",
            "activity_regularizer": "Regularizer",
            "kernel_constraint": "Projection function",
            "bias_constraint": "Projection function"
        },
        "Mandatory Parameters": [
            "filters",
            "kernel_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation_rate",
            "(strides > 1) & (dilation_rate > 1)"
        ]
    },
    "tf.keras.metrics.SparseCategoricalCrossentropy": {
        "Parameter type": {
            "name": "str (default: 'sparse_categorical_crossentropy')",
            "dtype": "Optional[tf.DType] (default: None)",
            "from_logits": "bool (default: False)",
            "axis": "int (default: -1)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.atan": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.softmax_cross_entropy_with_logits": {
        "Parameter type": {
            "labels": "Tensor",
            "logits": "Tensor",
            "axis": "int (default: -1)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "labels",
            "logits"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reduce_std": {
        "Parameter type": {
            "input_tensor": "Tensor",
            "axis": "Optional[Union[int, Tuple[int]]]",
            "keepdims": "bool",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.NASNetMobile": {
        "Parameter type": {
            "input_shape": "Optional[shape tuple]",
            "include_top": "bool",
            "weights": "str or None",
            "input_tensor": "Optional[Keras tensor]",
            "pooling": "Optional[str]",
            "classes": "int",
            "classifier_activation": "Optional[str or callable]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_shape",
                "input_tensor"
            ],
            [
                "weights",
                "classes"
            ]
        ],
        "Mandatory Coexistence Parameters": [
            [
                "include_top",
                "classes"
            ],
            [
                "include_top",
                "classifier_activation"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.exponential": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reduce_all": {
        "Parameter type": {
            "input_tensor": "Tensor (boolean)",
            "axis": "Union[int, Tuple[int], None] (default: None)",
            "keepdims": "bool (default: False)",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "input_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorToeplitz": {
        "Parameter type": {
            "col": "Tensor",
            "row": "Tensor",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "col",
            "row"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.LSTMCell": {
        "Parameter type": {
            "units": "int",
            "activation": "str or None",
            "recurrent_activation": "str or None",
            "use_bias": "bool",
            "kernel_initializer": "str or Initializer instance",
            "recurrent_initializer": "str or Initializer instance",
            "bias_initializer": "str or Initializer instance",
            "unit_forget_bias": "bool",
            "kernel_regularizer": "Regularizer or None",
            "recurrent_regularizer": "Regularizer or None",
            "bias_regularizer": "Regularizer or None",
            "kernel_constraint": "Constraint or None",
            "recurrent_constraint": "Constraint or None",
            "bias_constraint": "Constraint or None",
            "dropout": "float",
            "recurrent_dropout": "float",
            "seed": "int or None"
        },
        "Mandatory Parameters": [
            "units"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.rot90": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "k": "int (default: 1)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.to_indicator": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "vocab_size": "int64 Tensor or Python int",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "sp_input",
            "vocab_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.poisson": {
        "Parameter type": {
            "y_true": "Tensor (shape: [batch_size, d0, .. dN])",
            "y_pred": "Tensor (shape: [batch_size, d0, .. dN])"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.zeros": {
        "Parameter type": {
            "shape": "Union[List[int], Tuple[int], Tensor]",
            "dtype": "DType (default: tf.dtypes.float32)",
            "name": "Optional[str]",
            "layout": "Optional[tf.experimental.dtensor.Layout]"
        },
        "Mandatory Parameters": [
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.arctan2": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.arange": {
        "Parameter type": {
            "start": "Union[int, float, Tensor]",
            "stop": "Optional[Union[int, float, Tensor]]",
            "step": "Union[int, float, Tensor]",
            "dtype": "Optional[Union[tf.DType, np.dtype, type]]"
        },
        "Mandatory Parameters": [
            "start"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.hypot": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.sequence_categorical_column_with_hash_bucket": {
        "Parameter type": {
            "key": "str",
            "hash_bucket_size": "int",
            "dtype": "tf.dtypes.DType (default: tf.dtypes.string)"
        },
        "Mandatory Parameters": [
            "key",
            "hash_bucket_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.GaussianDropout": {
        "Parameter type": {
            "rate": "float",
            "seed": "Optional[int]"
        },
        "Mandatory Parameters": [
            "rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.lite.TargetSpec": {
        "Parameter type": {
            "supported_ops": "Set of tf.lite.OpsSet (default: {tf.lite.OpsSet.TFLITE_BUILTINS})",
            "supported_types": "Set of tf.dtypes.DType (default: set())",
            "experimental_select_user_tf_ops": "Set of strings (default: set())",
            "experimental_supported_backends": "Set of strings (default: set())"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.all_candidate_sampler": {
        "Parameter type": {
            "true_classes": "Tensor (int64, shape: [batch_size, num_true])",
            "num_true": "int",
            "num_sampled": "int",
            "unique": "bool",
            "seed": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "true_classes",
            "num_true",
            "num_sampled"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.clip_by_value": {
        "Parameter type": {
            "t": "Tensor or IndexedSlices",
            "clip_value_min": "Tensor or scalar",
            "clip_value_max": "Tensor or scalar",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "t",
            "clip_value_min",
            "clip_value_max"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.to_hash_bucket": {
        "Parameter type": {
            "input": "Tensor of type string",
            "num_buckets": "int (>= 1)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "num_buckets"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.backend.floatx": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.timestamp": {
        "Parameter type": {
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.MeanSquaredError": {
        "Parameter type": {
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'mean_squared_error')",
            "dtype": "Union[tf.DType, keras.DTypePolicy, None] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.parse_tensor": {
        "Parameter type": {
            "serialized": "Tensor of type string",
            "out_type": "tf.DType",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "serialized",
            "out_type"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.EfficientNetB7": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "name": "str (default: 'efficientnetb7')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linspace": {
        "Parameter type": {
            "start": "Tensor (type: bfloat16, float32, float64)",
            "stop": "Tensor (same type and shape as start)",
            "num": "Tensor (type: int32, int64)",
            "name": "Optional[str]",
            "axis": "Optional[int] (default: 0)"
        },
        "Mandatory Parameters": [
            "start",
            "stop",
            "num"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.tensor_scatter_nd_max": {
        "Parameter type": {
            "tensor": "Tensor",
            "indices": "Tensor (int32 or int64)",
            "updates": "Tensor (same type as tensor)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor",
            "indices",
            "updates"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.solve": {
        "Parameter type": {
            "matrix": "Tensor (types: float64, float32, half, complex64, complex128; shape: [..., M, M])",
            "rhs": "Tensor (same type as matrix; shape: [..., M, K])",
            "adjoint": "Optional[bool] (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "matrix",
            "rhs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.dtypes.saturate_cast": {
        "Parameter type": {
            "value": "Tensor",
            "dtype": "DType",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value",
            "dtype"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.walk": {
        "Parameter type": {
            "top": "string",
            "topdown": "bool (default: True)",
            "onerror": "optional function"
        },
        "Mandatory Parameters": [
            "top"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.schedules.deserialize": {
        "Parameter type": {
            "config": "Dictionary of the form {'class_name': str, 'config': dict}",
            "custom_objects": "Optional[Dictionary] mapping class names to class/functions"
        },
        "Mandatory Parameters": [
            "config"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.schedules.InverseTimeDecay": {
        "Parameter type": {
            "initial_learning_rate": "float",
            "decay_steps": "float",
            "decay_rate": "float",
            "staircase": "bool (default: False)",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "initial_learning_rate",
            "decay_steps",
            "decay_rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.deserialize_many_sparse": {
        "Parameter type": {
            "serialized_sparse": "Tensor (shape: [N, 3], dtype: string)",
            "dtype": "dtype",
            "rank": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "serialized_sparse",
            "dtype"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorAdjoint": {
        "Parameter type": {
            "operator": "LinearOperator",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "operator"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.multiply_no_nan": {
        "Parameter type": {
            "x": "Tensor (float32 or float64)",
            "y": "Tensor (compatible with x)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.sequence.skipgrams": {
        "Parameter type": {
            "sequence": "List of integers",
            "vocabulary_size": "Int",
            "window_size": "Int (default: 4)",
            "negative_samples": "Float (default: 1.0)",
            "shuffle": "Bool (default: True)",
            "categorical": "Bool (default: False)",
            "sampling_table": "Optional[1D array] (size: vocabulary_size)",
            "seed": "Optional[Int]"
        },
        "Mandatory Parameters": [
            "sequence",
            "vocabulary_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.print": {
        "Parameter type": {
            "inputs": "Positional arguments (can be tensors, primitives, or data structures)",
            "output_stream": "Union[str, io.TextIOWrapper, logging level] (default: sys.stderr)",
            "summarize": "int (default: None)",
            "sep": "str (default: ' ')",
            "end": "str (default: '\\n')",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.schedules.PolynomialDecay": {
        "Parameter type": {
            "initial_learning_rate": "float",
            "decay_steps": "int",
            "end_learning_rate": "float",
            "power": "float",
            "cycle": "bool",
            "name": "str"
        },
        "Mandatory Parameters": [
            "initial_learning_rate",
            "decay_steps"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.non_max_suppression_with_scores": {
        "Parameter type": {
            "boxes": "2-D float Tensor (shape: [num_boxes, 4])",
            "scores": "1-D float Tensor (shape: [num_boxes])",
            "max_output_size": "scalar integer Tensor",
            "iou_threshold": "0-D float tensor (default: 0.5)",
            "score_threshold": "0-D float tensor (default: float('-inf'))",
            "soft_nms_sigma": "0-D float tensor (default: 0.0)",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "boxes",
            "scores",
            "max_output_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "iou_threshold",
            "soft_nms_sigma",
            "(soft_nms_sigma > 0)"
        ]
    },
    "tf.xla.experimental.compile": {
        "Parameter type": {
            "computation": "Python function",
            "inputs": "Optional[List of inputs or None]"
        },
        "Mandatory Parameters": [
            "computation"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.CategoricalCrossentropy": {
        "Parameter type": {
            "name": "str (default: 'categorical_crossentropy')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)",
            "from_logits": "bool (default: False)",
            "label_smoothing": "float (default: 0)",
            "axis": "int (default: -1)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.erf": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.compat.as_text": {
        "Parameter type": {
            "bytes_or_text": "Union[bytes, str, unicode]",
            "encoding": "str (default: 'utf-8')"
        },
        "Mandatory Parameters": [
            "bytes_or_text"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.tensor_scatter_nd_sub": {
        "Parameter type": {
            "tensor": "Tensor",
            "indices": "Tensor (int32 or int64)",
            "updates": "Tensor (same type as tensor)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor",
            "indices",
            "updates"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.CustomObjectScope": {
        "Parameter type": {
            "custom_objects": "Dictionary of {str: object} pairs"
        },
        "Mandatory Parameters": [
            "custom_objects"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.log1p": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.random_crop": {
        "Parameter type": {
            "value": "Tensor",
            "size": "1-D tensor",
            "seed": "Optional[Python integer]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value",
            "size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.efficientnet.preprocess_input": {
        "Parameter type": {
            "x": "Union[numpy.array, tensor]",
            "data_format": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.map_values": {
        "Parameter type": {
            "op": "Callable",
            "*args": "Variable positional arguments",
            "**kwargs": "Variable keyword arguments"
        },
        "Mandatory Parameters": [
            "op"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.image.save_img": {
        "Parameter type": {
            "path": "Path or file object",
            "x": "NumPy array",
            "data_format": "Optional[str] (either 'channels_first' or 'channels_last')",
            "file_format": "Optional[str]",
            "scale": "Optional[bool] (default: True)",
            "kwargs": "Additional keyword arguments"
        },
        "Mandatory Parameters": [
            "path",
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.gfile.stat": {
        "Parameter type": {
            "path": "str"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Average": {
        "Parameter type": {
            "input": "List of tensors, all of the same shape"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.draw_bounding_boxes": {
        "Parameter type": {
            "images": "Tensor (types: float32, half; shape: [batch, height, width, depth])",
            "boxes": "Tensor (type: float32; shape: [batch, num_bounding_boxes, 4])",
            "colors": "Tensor (type: float32; shape: [num_colors, 4])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "images",
            "boxes",
            "colors"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.meshgrid": {
        "Parameter type": {
            "*xi": "Variable number of tensors or arrays",
            "**kwargs": "Keyword arguments"
        },
        "Mandatory Parameters": [
            "*xi"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.dynamic_stitch": {
        "Parameter type": {
            "indices": "List of Tensor objects with type int32",
            "data": "List of Tensor objects with the same type as data",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "indices",
            "data"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.encode_jpeg": {
        "Parameter type": {
            "image": "Tensor (type: uint8, shape: [height, width, channels])",
            "format": "string (optional, default: \"\")",
            "quality": "int (optional, default: 95)",
            "progressive": "bool (optional, default: False)",
            "optimize_size": "bool (optional, default: False)",
            "chroma_downsampling": "bool (optional, default: True)",
            "density_unit": "string (optional, default: \"in\")",
            "x_density": "int (optional, default: 300)",
            "y_density": "int (optional, default: 300)",
            "xmp_metadata": "string (optional, default: \"\")",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.set_diag": {
        "Parameter type": {
            "input": "Tensor",
            "diagonal": "Tensor",
            "name": "str (optional)",
            "k": "Union[int, Tuple[int, int]] (default: 0)",
            "align": "str (default: 'RIGHT_LEFT')"
        },
        "Mandatory Parameters": [
            "input",
            "diagonal"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.LecunNormal": {
        "Parameter type": {
            "seed": "Optional[Union[int, keras.backend.SeedGenerator]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.datasets.imdb.get_word_index": {
        "Parameter type": {
            "path": "str (default: 'imdb_word_index.json')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.hsv_to_rgb": {
        "Parameter type": {
            "images": "Tensor (types: half, bfloat16, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "images"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.floordiv": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.sequence.TimeseriesGenerator": {
        "Parameter type": {
            "data": "Indexable generator (e.g., list or Numpy array) with shape (timesteps, features)",
            "targets": "Indexable generator with same length as data",
            "length": "int",
            "sampling_rate": "int (default: 1)",
            "stride": "int (default: 1)",
            "start_index": "int (default: 0)",
            "end_index": "int or None (default: None)",
            "shuffle": "bool (default: False)",
            "reverse": "bool (default: False)",
            "batch_size": "int (default: 128)"
        },
        "Mandatory Parameters": [
            "data",
            "targets",
            "length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.regularizers.deserialize": {
        "Parameter type": {
            "config": "Union[dict, str]",
            "custom_objects": "Optional[dict]"
        },
        "Mandatory Parameters": [
            "config"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.divide": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.imag": {
        "Parameter type": {
            "input": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.diag_part": {
        "Parameter type": {
            "input": "Tensor (rank >= 2)",
            "name": "str (optional)",
            "k": "Union[int, Tuple[int, int]] (default: 0)",
            "padding_value": "Union[int, float] (default: 0)",
            "align": "str (default: 'RIGHT_LEFT')"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.softsign": {
        "Parameter type": {
            "features": "Tensor (types: half, bfloat16, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.hann_window": {
        "Parameter type": {
            "window_length": "Tensor (scalar)",
            "periodic": "bool Tensor (default: True)",
            "dtype": "tf.dtypes.float32 (default: float32)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "window_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.from_variant": {
        "Parameter type": {
            "variant": "tf.variant tensor",
            "structure": "nested structure of tf.TypeSpec objects"
        },
        "Mandatory Parameters": [
            "variant",
            "structure"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.quantization.fake_quant_with_min_max_vars": {
        "Parameter type": {
            "inputs": "Tensor (float32)",
            "min": "Tensor (float32)",
            "max": "Tensor (float32)",
            "num_bits": "int (default: 8)",
            "narrow_range": "bool (default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "inputs",
            "min",
            "max"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.mobilenet_v3.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.zeros": {
        "Parameter type": {
            "shape": "Tuple[int, ...] (required)"
        },
        "Mandatory Parameters": [
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.train.latest_checkpoint": {
        "Parameter type": {
            "checkpoint_dir": "str",
            "latest_filename": "Optional[str]"
        },
        "Mandatory Parameters": [
            "checkpoint_dir"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.weighted_cross_entropy_with_logits": {
        "Parameter type": {
            "labels": "Tensor",
            "logits": "Tensor",
            "pos_weight": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "labels",
            "logits",
            "pos_weight"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.stateless_categorical": {
        "Parameter type": {
            "logits": "Tensor (shape: [batch_size, num_classes])",
            "num_samples": "int",
            "seed": "Tensor (shape: [2], dtype: int32 or int64)",
            "dtype": "dtype (default: int64)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "logits",
            "num_samples",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.unsorted_segment_prod": {
        "Parameter type": {
            "data": "Tensor",
            "segment_ids": "Tensor",
            "num_segments": "Tensor",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "data",
            "segment_ids",
            "num_segments"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.service.from_dataset_id": {
        "Parameter type": {
            "processing_mode": "Union[tf.data.experimental.service.ShardingPolicy, str]",
            "service": "Union[str, Tuple[str, str]]",
            "dataset_id": "int",
            "element_spec": "Optional[Nested tf.TypeSpec]",
            "job_name": "Optional[str]",
            "max_outstanding_requests": "Optional[int]",
            "data_transfer_protocol": "Optional[str]",
            "cross_trainer_cache": "Optional[tf.data.experimental.service.CrossTrainerCache]",
            "target_workers": "Optional[str]"
        },
        "Mandatory Parameters": [
            "processing_mode",
            "service",
            "dataset_id"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [
            [
                "consumer_index",
                "num_consumers"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.quantization.fake_quant_with_min_max_args_gradient": {
        "Parameter type": {
            "gradients": "Tensor (float32)",
            "inputs": "Tensor (float32)",
            "min": "float (optional, default: -6)",
            "max": "float (optional, default: 6)",
            "num_bits": "int (optional, default: 8)",
            "narrow_range": "bool (optional, default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "gradients",
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.inverse_stft_window_fn": {
        "Parameter type": {
            "frame_step": "integer scalar Tensor",
            "forward_window_fn": "callable (default: tf.signal.hann_window)",
            "name": "optional string"
        },
        "Mandatory Parameters": [
            "frame_step"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.stateless_random_flip_left_right": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "seed": "Tensor (shape: [2], dtype: int32 or int64)"
        },
        "Mandatory Parameters": [
            "image",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.get_single_element": {
        "Parameter type": {
            "dataset": "tf.data.Dataset"
        },
        "Mandatory Parameters": [
            "dataset"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.AveragePooling2D": {
        "Parameter type": {
            "pool_size": "Union[int, Tuple[int, int]] (default: (2, 2))",
            "strides": "Union[int, Tuple[int, int], None] (default: None)",
            "padding": "str (default: 'valid'; options: 'valid', 'same')",
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')"
        },
        "Mandatory Parameters": [
            "pool_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.pack_x_y_sample_weight": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Optional[Tensor]",
            "sample_weight": "Optional[Tensor]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.l2_normalize": {
        "Parameter type": {
            "x": "Tensor",
            "axis": "Optional[Union[int, List[int]]]",
            "epsilon": "float",
            "name": "Optional[str]",
            "dim": "Deprecated"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "axis",
                "dim"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.ConvLSTM2D": {
        "Parameter type": {
            "filters": "int",
            "kernel_size": "Union[int, Tuple[int, int]]",
            "strides": "Union[int, Tuple[int, int]] (default: (1, 1))",
            "padding": "str (default: 'valid'; options: 'valid', 'same')",
            "data_format": "Optional[str] (default: None; options: 'channels_last', 'channels_first')",
            "dilation_rate": "Union[int, Tuple[int, int]] (default: (1, 1))",
            "activation": "str (default: 'tanh')",
            "recurrent_activation": "str (default: 'hard_sigmoid')",
            "use_bias": "bool (default: True)",
            "kernel_initializer": "str (default: 'glorot_uniform')",
            "recurrent_initializer": "str (default: 'orthogonal')",
            "bias_initializer": "str (default: 'zeros')",
            "unit_forget_bias": "bool (default: True)",
            "kernel_regularizer": "Optional[Regularizer] (default: None)",
            "recurrent_regularizer": "Optional[Regularizer] (default: None)",
            "bias_regularizer": "Optional[Regularizer] (default: None)",
            "activity_regularizer": "Optional[Regularizer] (default: None)",
            "kernel_constraint": "Optional[Constraint] (default: None)",
            "recurrent_constraint": "Optional[Constraint] (default: None)",
            "bias_constraint": "Optional[Constraint] (default: None)",
            "return_sequences": "bool (default: False)",
            "return_state": "bool (default: False)",
            "go_backwards": "bool (default: False)",
            "stateful": "bool (default: False)",
            "dropout": "float (default: 0.0)",
            "recurrent_dropout": "float (default: 0.0)"
        },
        "Mandatory Parameters": [
            "filters",
            "kernel_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation_rate",
            "(strides > 1) & (dilation_rate > 1)"
        ]
    },
    "tf.math.special.dawsn": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.lstsq": {
        "Parameter type": {
            "matrix": "Tensor (shape: [..., M, N])",
            "rhs": "Tensor (shape: [..., M, K])",
            "l2_regularizer": "0-D double Tensor",
            "fast": "bool (default: True)",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "matrix",
            "rhs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "fast",
            "l2_regularizer",
            "(fast=False)"
        ]
    },
    "tf.sparse.minimum": {
        "Parameter type": {
            "sp_a": "SparseTensor",
            "sp_b": "SparseTensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sp_a",
            "sp_b"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.join": {
        "Parameter type": {
            "inputs": "List of tf.Tensor objects (dtype: tf.string)",
            "separator": "str (default: '')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.encode_png": {
        "Parameter type": {
            "image": "Tensor (type: uint8 or uint16, shape: batch_dims + [height, width, channels])",
            "compression": "int (default: -1)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.serialize": {
        "Parameter type": {
            "layer": "keras.layers.Layer instance"
        },
        "Mandatory Parameters": [
            "layer"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.tensor_diag": {
        "Parameter type": {
            "diagonal": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "diagonal"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.map_fn": {
        "Parameter type": {
            "fn": "callable",
            "elems": "tensor or nested structure of tensors",
            "dtype": "deprecated, equivalent to fn_output_signature",
            "parallel_iterations": "optional int",
            "back_prop": "optional bool",
            "swap_memory": "optional bool",
            "infer_shape": "optional bool",
            "name": "optional str",
            "fn_output_signature": "optional structure describing output"
        },
        "Mandatory Parameters": [
            "fn",
            "elems"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "dtype",
                "fn_output_signature"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.image.Iterator": {
        "Parameter type": {
            "n": "Integer",
            "batch_size": "Integer",
            "shuffle": "Boolean",
            "seed": "Integer"
        },
        "Mandatory Parameters": [
            "n",
            "batch_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.random.randn": {
        "Parameter type": {
            "*args": "Variable-length argument list specifying the shape of the output array."
        },
        "Mandatory Parameters": [
            "*args"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.from_dense": {
        "Parameter type": {
            "tensor": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.set_seed": {
        "Parameter type": {
            "seed": "integer"
        },
        "Mandatory Parameters": [
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.truncatediv": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.cross": {
        "Parameter type": {
            "a": "Tensor",
            "b": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "a",
            "b"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.Accuracy": {
        "Parameter type": {
            "name": "str (default: 'accuracy')",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.deserialize": {
        "Parameter type": {
            "name": "str",
            "custom_objects": "Optional[dict]"
        },
        "Mandatory Parameters": [
            "name"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.device": {
        "Parameter type": {
            "device_name": "str"
        },
        "Mandatory Parameters": [
            "device_name"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.mlir.experimental.convert_function": {
        "Parameter type": {
            "concrete_function": "ConcreteFunction",
            "pass_pipeline": "str (default: 'tf-standard-pipeline')"
        },
        "Mandatory Parameters": [
            "concrete_function"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.greater": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.constraints.MaxNorm": {
        "Parameter type": {
            "max_value": "int (default: 2)",
            "axis": "int (default: 0)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.pad_to_bounding_box": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "offset_height": "int",
            "offset_width": "int",
            "target_height": "int",
            "target_width": "int"
        },
        "Mandatory Parameters": [
            "image",
            "offset_height",
            "offset_width",
            "target_height",
            "target_width"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.schedules.ExponentialDecay": {
        "Parameter type": {
            "initial_learning_rate": "float",
            "decay_steps": "int",
            "decay_rate": "float",
            "staircase": "bool",
            "name": "str"
        },
        "Mandatory Parameters": [
            "initial_learning_rate",
            "decay_steps",
            "decay_rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.maximum": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.SquaredHinge": {
        "Parameter type": {
            "name": "str (default: 'squared_hinge')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.backend.clear_session": {
        "Parameter type": {
            "free_memory": "bool (default: True)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.is_finite": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.reciprocal": {
        "Parameter type": {
            "x": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.log_softmax": {
        "Parameter type": {
            "logits": "Tensor",
            "axis": "int (default: -1)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "logits"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.mixed_precision.global_policy": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.scan": {
        "Parameter type": {
            "initial_state": "nested structure of tensors",
            "scan_func": "function"
        },
        "Mandatory Parameters": [
            "initial_state",
            "scan_func"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.rfft3d": {
        "Parameter type": {
            "input": "Tensor (float32 or float64)",
            "fft_length": "Tensor (int32, shape [3])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.broadcast_dynamic_shape": {
        "Parameter type": {
            "shape_x": "Tensor (rank 1, integer)",
            "shape_y": "Tensor (rank 1, integer)"
        },
        "Mandatory Parameters": [
            "shape_x",
            "shape_y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.MeanIoU": {
        "Parameter type": {
            "num_classes": "int",
            "name": "Optional[str]",
            "dtype": "Optional[tf.dtypes.DType]",
            "ignore_class": "Optional[int]",
            "sparse_y_true": "bool",
            "sparse_y_pred": "bool",
            "axis": "int"
        },
        "Mandatory Parameters": [
            "num_classes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.decode_raw": {
        "Parameter type": {
            "input_bytes": "Tensor of strings (bytes)",
            "out_type": "DType",
            "little_endian": "bool (default: True)",
            "fixed_length": "int (optional)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input_bytes",
            "out_type"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.stateless_truncated_normal": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "seed": "shape [2] Tensor of int32 or int64",
            "mean": "0-D Tensor or Python value of type dtype",
            "stddev": "0-D Tensor or Python value of type dtype",
            "dtype": "tf.dtypes.DType",
            "name": "str (optional)",
            "alg": "str (optional)"
        },
        "Mandatory Parameters": [
            "shape",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.image.array_to_img": {
        "Parameter type": {
            "x": "Input data, in any form that can be converted to a NumPy array",
            "data_format": "str (either 'channels_first' or 'channels_last')",
            "scale": "bool (default: True)",
            "dtype": "str or None (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.bitwise_xor": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.KLDivergence": {
        "Parameter type": {
            "name": "str (default: 'kullback_leibler_divergence')",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.datasets.cifar100.load_data": {
        "Parameter type": {
            "label_mode": "str (default: 'fine')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.avg_pool2d": {
        "Parameter type": {
            "input": "Tensor (shape: [batch, height, width, channels])",
            "ksize": "Union[int, List[int]]",
            "strides": "Union[int, List[int]]",
            "padding": "str ('VALID' or 'SAME')",
            "data_format": "str ('NHWC' or 'NCHW')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "ksize",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.convert_to_tensor": {
        "Parameter type": {
            "value": "Union[Tensor, numpy.ndarray, list, scalar]",
            "dtype": "Optional[tf.DType]",
            "dtype_hint": "Optional[tf.DType]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "dtype",
                "dtype_hint"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.BinaryAccuracy": {
        "Parameter type": {
            "name": "str (default: 'binary_accuracy')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)",
            "threshold": "float (default: 0.5)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.crop_to_bounding_box": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "offset_height": "int32 Tensor or python integer",
            "offset_width": "int32 Tensor or python integer",
            "target_height": "int32 Tensor or python integer",
            "target_width": "int32 Tensor or python integer"
        },
        "Mandatory Parameters": [
            "image",
            "offset_height",
            "offset_width",
            "target_height",
            "target_width"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.vgg19.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.xception.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.MultiHeadAttention": {
        "Parameter type": {
            "num_heads": "int",
            "key_dim": "int",
            "value_dim": "Optional[int]",
            "dropout": "float",
            "use_bias": "bool",
            "output_shape": "Optional[Union[int, Tuple[int]]]",
            "attention_axes": "Optional[Union[int, Tuple[int]]]",
            "kernel_initializer": "str",
            "bias_initializer": "str",
            "kernel_regularizer": "Optional[Regularizer]",
            "bias_regularizer": "Optional[Regularizer]",
            "activity_regularizer": "Optional[Regularizer]",
            "kernel_constraint": "Optional[Constraint]",
            "bias_constraint": "Optional[Constraint]",
            "seed": "Optional[int]"
        },
        "Mandatory Parameters": [
            "num_heads",
            "key_dim"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.truncated_normal": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "mean": "0-D Tensor or Python value of type `dtype`",
            "stddev": "0-D Tensor or Python value of type `dtype`",
            "dtype": "Floating-point type (e.g., tf.half, tf.float32, tf.double)",
            "seed": "Python integer",
            "name": "String (optional)"
        },
        "Mandatory Parameters": [
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.tensorrt.Converter": {
        "Parameter type": {
            "input_saved_model_dir": "str",
            "input_saved_model_tags": "List[str]",
            "input_saved_model_signature_key": "str",
            "conversion_params": "tf.experimental.tensorrt.ConversionParams"
        },
        "Mandatory Parameters": [
            "conversion_params"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.xception.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.serialize_sparse": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "out_type": "dtype (default: tf.dtypes.string)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sp_input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.reduce_max": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "axis": "Union[int, List[int], None] (default: None)",
            "keepdims": "Optional[bool] (default: None)",
            "output_is_sparse": "bool (default: False)",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "sp_input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.inv": {
        "Parameter type": {
            "input": "Tensor (shape: [..., M, M])",
            "adjoint": "bool (default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.positive": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.matvec": {
        "Parameter type": {
            "a": "Tensor",
            "b": "Tensor",
            "transpose_a": "bool",
            "adjoint_a": "bool",
            "a_is_sparse": "bool",
            "b_is_sparse": "bool",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "a",
            "b"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "transpose_a",
                "adjoint_a"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.nextafter": {
        "Parameter type": {
            "x1": "Tensor (types: float64, float32)",
            "x2": "Tensor (same type as x1)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.tanh": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.indicator_column": {
        "Parameter type": {
            "categorical_column": "CategoricalColumn"
        },
        "Mandatory Parameters": [
            "categorical_column"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.random_saturation": {
        "Parameter type": {
            "image": "Tensor (shape: (..., 3))",
            "lower": "float",
            "upper": "float",
            "seed": "Optional[int]"
        },
        "Mandatory Parameters": [
            "image",
            "lower",
            "upper"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.max_pool3d": {
        "Parameter type": {
            "input": "Tensor (shape: (batch, in_depth, in_height, in_width, in_channels))",
            "ksize": "Union[int, List[int]] (length: 1, 3, or 5)",
            "strides": "Union[int, List[int]] (length: 1, 3, or 5)",
            "padding": "str (options: 'VALID', 'SAME')",
            "data_format": "str (default: 'NDHWC')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "ksize",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.conv2d_transpose": {
        "Parameter type": {
            "input": "Tensor (shape: [batch, height, width, in_channels] or [batch, in_channels, height, width])",
            "filters": "Tensor (shape: [height, width, output_channels, in_channels])",
            "output_shape": "Tensor (shape: [batch, height, width, output_channels] or [batch, output_channels, height, width])",
            "strides": "Union[int, List[int]] (length: 1, 2, or 4)",
            "padding": "Union[str, List[List[int]]] (options: 'SAME', 'VALID', or explicit padding)",
            "data_format": "str (options: 'NHWC', 'NCHW')",
            "dilations": "Union[int, List[int]] (length: 1, 2, or 4)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "filters",
            "output_shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.binary_crossentropy": {
        "Parameter type": {
            "y_true": "Tensor (shape: [batch_size, d0, ... dN])",
            "y_pred": "Tensor (shape: [batch_size, d0, ... dN])",
            "from_logits": "bool (default: False)",
            "label_smoothing": "float (default: 0)",
            "axis": "int (default: -1)"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.sqrt": {
        "Parameter type": {
            "x": "tf.Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.fractional_avg_pool": {
        "Parameter type": {
            "value": "Tensor (shape: [batch, height, width, channels])",
            "pooling_ratio": "List[float] (length >= 4)",
            "pseudo_random": "Optional[bool] (default: False)",
            "overlapping": "Optional[bool] (default: False)",
            "seed": "Optional[int] (default: 0)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value",
            "pooling_ratio"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ragged.cross": {
        "Parameter type": {
            "inputs": "List of RaggedTensor, Tensor, or SparseTensor",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.vgg16.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.ResNet50V2": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor]",
            "input_shape": "Optional[tuple]",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.register_filesystem_plugin": {
        "Parameter type": {
            "plugin_location": "str"
        },
        "Mandatory Parameters": [
            "plugin_location"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.unicode_split": {
        "Parameter type": {
            "input": "N-dimensional potentially ragged string tensor",
            "input_encoding": "string",
            "errors": "string (default: 'replace')",
            "replacement_char": "int (default: 65533)",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "input",
            "input_encoding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.transpose": {
        "Parameter type": {
            "a": "Tensor",
            "perm": "Optional[List[int]]",
            "conjugate": "Optional[bool]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "a"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.MeanSquaredLogarithmicError": {
        "Parameter type": {
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'mean_squared_logarithmic_error')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.CategoricalAccuracy": {
        "Parameter type": {
            "name": "str (default: 'categorical_accuracy')",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.overlap_and_add": {
        "Parameter type": {
            "signal": "Tensor (shape: [..., frames, frame_length])",
            "frame_step": "Union[int, scalar Tensor]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "signal",
            "frame_step"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.train.ClusterSpec": {
        "Parameter type": {
            "cluster": "dict or ClusterSpec"
        },
        "Mandatory Parameters": [
            "cluster"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.real": {
        "Parameter type": {
            "input": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.decode_png": {
        "Parameter type": {
            "contents": "Tensor (type: string, shape: 0-D)",
            "channels": "int (optional, default: 0)",
            "dtype": "tf.DType (optional, default: tf.uint8)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "contents"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.tanh": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.KLDivergence": {
        "Parameter type": {
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'kl_divergence')",
            "dtype": "Union[tf.DType, keras.DTypePolicy, None] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.stateless_random_crop": {
        "Parameter type": {
            "value": "Tensor",
            "size": "1-D tensor",
            "seed": "shape [2] Tensor",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "value",
            "size",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.SparseCategoricalCrossentropy": {
        "Parameter type": {
            "from_logits": "bool (default: False)",
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'sparse_categorical_crossentropy')",
            "dtype": "Union[tf.DType, str, None] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.assert_cardinality": {
        "Parameter type": {
            "expected_cardinality": "int"
        },
        "Mandatory Parameters": [
            "expected_cardinality"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.asin": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.IndexedSlices": {
        "Parameter type": {
            "values": "Tensor",
            "indices": "1-D integer Tensor",
            "dense_shape": "Optional[Tensor]"
        },
        "Mandatory Parameters": [
            "values",
            "indices"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.conj": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.identity_n": {
        "Parameter type": {
            "input": "List of Tensor objects",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.cholesky": {
        "Parameter type": {
            "input": "Tensor (shape: [..., M, M])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.lookup.experimental.DenseHashTable": {
        "Parameter type": {
            "key_dtype": "tf.DType",
            "value_dtype": "tf.DType",
            "default_value": "Union[int, float, str, bytes]",
            "empty_key": "Union[int, float, str, bytes]",
            "deleted_key": "Union[int, float, str, bytes]",
            "initial_num_buckets": "Optional[int]",
            "name": "str",
            "checkpoint": "bool"
        },
        "Mandatory Parameters": [
            "key_dtype",
            "value_dtype",
            "default_value",
            "empty_key",
            "deleted_key"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.set_global_generator": {
        "Parameter type": {
            "generator": "Generator object"
        },
        "Mandatory Parameters": [
            "generator"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.RandomUniform": {
        "Parameter type": {
            "minval": "python scalar or scalar keras tensor",
            "maxval": "python scalar or scalar keras tensor",
            "seed": "Python integer or instance of keras.backend.SeedGenerator"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.clip_by_global_norm": {
        "Parameter type": {
            "t_list": "list of Tensors, IndexedSlices, or None",
            "clip_norm": "0-D Tensor > 0",
            "use_norm": "Optional[0-D Tensor of type float]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "t_list",
            "clip_norm"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.fftshift": {
        "Parameter type": {
            "x": "Tensor",
            "axes": "Optional[Union[int, Tuple[int]]]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.cos": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.space_to_batch": {
        "Parameter type": {
            "input": "Tensor",
            "block_shape": "Tensor (int32 or int64)",
            "paddings": "Tensor (int32 or int64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "block_shape",
            "paddings"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ragged.stack_dynamic_partitions": {
        "Parameter type": {
            "data": "Tensor or RaggedTensor",
            "partitions": "int32 or int64 Tensor or RaggedTensor",
            "num_partitions": "int32 or int64 scalar",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "data",
            "partitions",
            "num_partitions"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.MSLE": {
        "Parameter type": {
            "y_true": "Tensor (shape: [batch_size, d0, ..., dN])",
            "y_pred": "Tensor (shape: [batch_size, d0, ..., dN])"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.betainc": {
        "Parameter type": {
            "a": "Tensor (float32 or float64)",
            "b": "Tensor (same type as a)",
            "x": "Tensor (same type as a)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "a",
            "b",
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.Poisson": {
        "Parameter type": {
            "name": "str (default: 'poisson')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.CosineSimilarity": {
        "Parameter type": {
            "name": "str (default: 'cosine_similarity')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)",
            "axis": "int (default: -1)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.GlobalAveragePooling1D": {
        "Parameter type": {
            "data_format": "str (default: 'channels_last')",
            "keepdims": "bool (default: False)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.image_gradients": {
        "Parameter type": {
            "image": "Tensor (shape: [batch_size, h, w, d])"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Flatten": {
        "Parameter type": {
            "data_format": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sets.size": {
        "Parameter type": {
            "a": "SparseTensor",
            "validate_indices": "bool (default: True)"
        },
        "Mandatory Parameters": [
            "a"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.datasets.mnist.load_data": {
        "Parameter type": {
            "path": "str (default: 'mnist.npz')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.adjust_jpeg_quality": {
        "Parameter type": {
            "image": "Tensor (3D image; last dimension must be None, 1, or 3)",
            "jpeg_quality": "Union[int, Tensor] (int32; must be in [0, 100])",
            "dct_method": "Optional[str] (default: \"\" which maps to \"INTEGER_FAST\")",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "image",
            "jpeg_quality"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.SpecificityAtSensitivity": {
        "Parameter type": {
            "sensitivity": "float (range: [0, 1])",
            "num_thresholds": "int (default: 200)",
            "class_id": "Optional[int]",
            "name": "Optional[str]",
            "dtype": "Optional[tf.DType]"
        },
        "Mandatory Parameters": [
            "sensitivity"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.CSVLogger": {
        "Parameter type": {
            "filename": "str",
            "separator": "str",
            "append": "bool"
        },
        "Mandatory Parameters": [
            "filename"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.TerminateOnNaN": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.bitwise.bitwise_and": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.non_max_suppression_overlaps": {
        "Parameter type": {
            "overlaps": "2-D float Tensor (shape: [num_boxes, num_boxes])",
            "scores": "1-D float Tensor (shape: [num_boxes])",
            "max_output_size": "scalar integer Tensor",
            "overlap_threshold": "0-D float tensor (default: 0.5)",
            "score_threshold": "0-D float tensor (default: float('-inf'))",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "overlaps",
            "scores",
            "max_output_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.get_custom_objects": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.fft": {
        "Parameter type": {
            "input": "Tensor (must be complex64 or complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.rejection_resample": {
        "Parameter type": {
            "class_func": "function mapping an element to a scalar tf.int32 tensor",
            "target_dist": "floating point type tensor (shape: [num_classes])",
            "initial_dist": "optional floating point type tensor (shape: [num_classes])",
            "seed": "optional Python integer"
        },
        "Mandatory Parameters": [
            "class_func",
            "target_dist"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.gather": {
        "Parameter type": {
            "params": "Tensor",
            "indices": "Tensor",
            "validate_indices": "Optional[bool]",
            "axis": "Optional[Tensor]",
            "batch_dims": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "params",
            "indices"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.MaxPool1D": {
        "Parameter type": {
            "pool_size": "int",
            "strides": "int or None",
            "padding": "str",
            "data_format": "str"
        },
        "Mandatory Parameters": [
            "pool_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.DenseNet121": {
        "Parameter type": {
            "include_top": "bool (default: True)",
            "weights": "Union[None, str, PathLike] (default: 'imagenet')",
            "input_tensor": "Optional[Keras tensor] (default: None)",
            "input_shape": "Optional[tuple] (default: None)",
            "pooling": "Optional[str] (default: None; options: 'avg', 'max')",
            "classes": "int (default: 1000)",
            "classifier_activation": "Union[str, callable] (default: 'softmax')",
            "name": "str (default: 'densenet121')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "input_tensor",
                "input_shape"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.get_registered_name": {
        "Parameter type": {
            "obj": "object"
        },
        "Mandatory Parameters": [
            "obj"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.LogCoshError": {
        "Parameter type": {
            "name": "str (default: 'logcosh')",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.deg2rad": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nondifferentiable_batch_function": {
        "Parameter type": {
            "num_batch_threads": "int",
            "max_batch_size": "int",
            "batch_timeout_micros": "int",
            "allowed_batch_sizes": "Optional[List[int]]",
            "max_enqueued_batches": "int",
            "autograph": "bool",
            "enable_large_batch_splitting": "bool"
        },
        "Mandatory Parameters": [
            "num_batch_threads",
            "max_batch_size",
            "batch_timeout_micros"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.no_gradient": {
        "Parameter type": {
            "op_type": "str"
        },
        "Mandatory Parameters": [
            "op_type"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.sqrt": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.cosh": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.ActivityRegularization": {
        "Parameter type": {
            "l1": "float (default: 0.0)",
            "l2": "float (default: 0.0)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.logical_not": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.broadcast_static_shape": {
        "Parameter type": {
            "shape_x": "TensorShape",
            "shape_y": "TensorShape"
        },
        "Mandatory Parameters": [
            "shape_x",
            "shape_y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.erosion2d": {
        "Parameter type": {
            "value": "Tensor (shape: [batch, in_height, in_width, depth])",
            "filters": "Tensor (shape: [filters_height, filters_width, depth])",
            "strides": "List[int] (length 4)",
            "padding": "str (options: 'SAME', 'VALID')",
            "data_format": "str (currently only 'NHWC' is supported)",
            "dilations": "List[int] (length 4)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value",
            "filters",
            "strides",
            "padding",
            "dilations"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.to_categorical": {
        "Parameter type": {
            "y": "Array-like (integers)",
            "num_classes": "Optional[int] (default: None)",
            "dtype": "str (default: 'float32')"
        },
        "Mandatory Parameters": [
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.preprocessing.image.random_brightness": {
        "Parameter type": {
            "x": "Tensor (3D)",
            "brightness_range": "Tuple of floats",
            "scale": "bool (default: True)"
        },
        "Mandatory Parameters": [
            "x",
            "brightness_range"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.quantization.quantize_and_dequantize_v2": {
        "Parameter type": {
            "input": "Tensor",
            "input_min": "Tensor or scalar",
            "input_max": "Tensor or scalar",
            "signed_input": "bool (default: True)",
            "num_bits": "int (default: 8)",
            "range_given": "bool (default: False)",
            "round_mode": "str (default: 'HALF_TO_EVEN')",
            "name": "str (optional)",
            "narrow_range": "bool (default: False)",
            "axis": "int (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.confusion_matrix": {
        "Parameter type": {
            "labels": "1-D Tensor",
            "predictions": "1-D Tensor",
            "num_classes": "Optional[int]",
            "weights": "Optional[Tensor]",
            "dtype": "Optional[tf.dtypes.DType]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "labels",
            "predictions"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.SparseCategoricalAccuracy": {
        "Parameter type": {
            "name": "str (default: 'sparse_categorical_accuracy')",
            "dtype": "Optional[tf.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.random_brightness": {
        "Parameter type": {
            "image": "Tensor",
            "max_delta": "float",
            "seed": "Optional[int]"
        },
        "Mandatory Parameters": [
            "image",
            "max_delta"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.hessians": {
        "Parameter type": {
            "ys": "Tensor or list of tensors",
            "xs": "Tensor or list of tensors",
            "gate_gradients": "bool (default: False)",
            "aggregation_method": "Optional[Union[str, int]]",
            "name": "str (default: 'hessians')"
        },
        "Mandatory Parameters": [
            "ys",
            "xs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.bitcast": {
        "Parameter type": {
            "input": "Tensor",
            "type": "tf.DType",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "type"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.argmin": {
        "Parameter type": {
            "input": "Tensor",
            "axis": "Tensor",
            "output_type": "tf.DType",
            "name": "str"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.logical_and": {
        "Parameter type": {
            "x": "Tensor (type: bool)",
            "y": "Tensor (type: bool)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sets.union": {
        "Parameter type": {
            "a": "Tensor or SparseTensor",
            "b": "Tensor or SparseTensor",
            "validate_indices": "bool (default: True)"
        },
        "Mandatory Parameters": [
            "a",
            "b"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.nce_loss": {
        "Parameter type": {
            "weights": "Tensor (shape: [num_classes, dim]) or list of Tensors",
            "biases": "Tensor (shape: [num_classes])",
            "labels": "Tensor (type: int64, shape: [batch_size, num_true])",
            "inputs": "Tensor (shape: [batch_size, dim])",
            "num_sampled": "int",
            "num_classes": "int",
            "num_true": "int (default: 1)",
            "sampled_values": "tuple or None (default: None)",
            "remove_accidental_hits": "bool (default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "weights",
            "biases",
            "labels",
            "inputs",
            "num_sampled",
            "num_classes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.depth_to_space": {
        "Parameter type": {
            "input": "Tensor",
            "block_size": "int",
            "data_format": "str",
            "name": "str"
        },
        "Mandatory Parameters": [
            "input",
            "block_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.log": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.divmod": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.mobilenet_v2.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.mobilenet_v3.preprocess_input": {
        "Parameter type": {
            "x": "Union[numpy.array, tensor]",
            "data_format": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorLowRankUpdate": {
        "Parameter type": {
            "base_operator": "LinearOperator",
            "u": "Tensor",
            "diag_update": "Optional[Tensor]",
            "v": "Optional[Tensor]",
            "is_diag_update_positive": "Optional[bool]",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "name": "str (default: 'LinearOperatorLowRankUpdate')"
        },
        "Mandatory Parameters": [
            "base_operator",
            "u"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.svd": {
        "Parameter type": {
            "tensor": "Tensor (shape: [..., M, N])",
            "full_matrices": "bool (default: False)",
            "compute_uv": "bool (default: True)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.regex_full_match": {
        "Parameter type": {
            "input": "Tensor of type string",
            "pattern": "Tensor of type string",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "input",
            "pattern"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.stateless_uniform": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "seed": "shape [2] Tensor of int32 or int64",
            "minval": "Tensor or Python value of type dtype",
            "maxval": "Tensor or Python value of type dtype",
            "dtype": "tf.dtypes.DType",
            "name": "str (optional)",
            "alg": "str (optional)"
        },
        "Mandatory Parameters": [
            "shape",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "minval",
            "maxval",
            "(minval is None) & (maxval is None)"
        ]
    },
    "tf.math.erfc": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.qr": {
        "Parameter type": {
            "input": "Tensor (types: float64, float32, half, complex64, complex128)",
            "full_matrices": "Optional[bool] (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.tensordot": {
        "Parameter type": {
            "a": "Tensor (float32 or float64)",
            "b": "Tensor (same type as a)",
            "axes": "Union[int, List[List[int]], int32 Tensor]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "a",
            "b",
            "axes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.SimpleRNNCell": {
        "Parameter type": {
            "units": "int",
            "activation": "str or None",
            "use_bias": "bool",
            "kernel_initializer": "str or Initializer instance",
            "recurrent_initializer": "str or Initializer instance",
            "bias_initializer": "str or Initializer instance",
            "kernel_regularizer": "Regularizer or None",
            "recurrent_regularizer": "Regularizer or None",
            "bias_regularizer": "Regularizer or None",
            "kernel_constraint": "Constraint or None",
            "recurrent_constraint": "Constraint or None",
            "bias_constraint": "Constraint or None",
            "dropout": "float",
            "recurrent_dropout": "float",
            "seed": "int or None"
        },
        "Mandatory Parameters": [
            "units"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.RecallAtPrecision": {
        "Parameter type": {
            "precision": "float (range: [0, 1])",
            "num_thresholds": "int (default: 200)",
            "class_id": "Optional[int]",
            "name": "Optional[str]",
            "dtype": "Optional[tf.DType]"
        },
        "Mandatory Parameters": [
            "precision"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.space_to_depth": {
        "Parameter type": {
            "input": "Tensor",
            "block_size": "int",
            "data_format": "str",
            "name": "str"
        },
        "Mandatory Parameters": [
            "input",
            "block_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.GlorotUniform": {
        "Parameter type": {
            "seed": "Optional[Union[int, keras.backend.SeedGenerator]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.UpSampling3D": {
        "Parameter type": {
            "size": "Union[int, Tuple[int, int, int]] (default: (2, 2, 2))",
            "data_format": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.to_variant": {
        "Parameter type": {
            "dataset": "tf.data.Dataset"
        },
        "Mandatory Parameters": [
            "dataset"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.divide_no_nan": {
        "Parameter type": {
            "x": "Tensor (floating or integer dtype)",
            "y": "Tensor (same dtype as x)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.digamma": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.sigmoid": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.encode_base64": {
        "Parameter type": {
            "input": "Tensor of type string",
            "pad": "bool (default: False)",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.quantization.quantize": {
        "Parameter type": {
            "input": "Tensor (float32)",
            "min_range": "Tensor (float32)",
            "max_range": "Tensor (float32)",
            "T": "tf.DType (qint8, quint8, qint32, qint16, quint16)",
            "mode": "string (MIN_COMBINED, MIN_FIRST, SCALED)",
            "round_mode": "string (HALF_AWAY_FROM_ZERO, HALF_TO_EVEN)",
            "name": "string (optional)",
            "narrow_range": "bool (default: False)",
            "axis": "int (optional, default: None)",
            "ensure_minimum_range": "float (default: 0.01)"
        },
        "Mandatory Parameters": [
            "input",
            "min_range",
            "max_range",
            "T"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.get": {
        "Parameter type": {
            "identifier": "Union[str, dict, callable, tensor]"
        },
        "Mandatory Parameters": [
            "identifier"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.stateless_random_flip_up_down": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "seed": "Tensor (shape: [2], dtype: int32 or int64)"
        },
        "Mandatory Parameters": [
            "image",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.concat": {
        "Parameter type": {
            "axis": "int",
            "sp_inputs": "List[SparseTensor]",
            "name": "Optional[str]",
            "expand_nonconcat_dim": "bool (default: False)",
            "concat_dim": "int (deprecated)",
            "expand_nonconcat_dims": "bool (alias for expand_nonconcat_dim)"
        },
        "Mandatory Parameters": [
            "axis",
            "sp_inputs"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "concat_dim",
                "axis"
            ],
            [
                "expand_nonconcat_dim",
                "expand_nonconcat_dims"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Dropout": {
        "Parameter type": {
            "rate": "float",
            "noise_shape": "Optional[tf.TensorShape]",
            "seed": "Optional[int]"
        },
        "Mandatory Parameters": [
            "rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.RootMeanSquaredError": {
        "Parameter type": {
            "name": "str (default: 'root_mean_squared_error')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Activation": {
        "Parameter type": {
            "activation": "Union[callable, str]",
            "**kwargs": "Base layer keyword arguments"
        },
        "Mandatory Parameters": [
            "activation"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.serialize": {
        "Parameter type": {
            "metric": "Keras Metric instance or metric function"
        },
        "Mandatory Parameters": [
            "metric"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Bidirectional": {
        "Parameter type": {
            "layer": "keras.layers.RNN instance or compatible Layer instance",
            "merge_mode": "str (default: 'concat')",
            "weights": "Optional[List[Tensor]]",
            "backward_layer": "Optional[keras.layers.RNN or compatible Layer instance]"
        },
        "Mandatory Parameters": [
            "layer"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.is_nan": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ensure_shape": {
        "Parameter type": {
            "x": "Tensor",
            "shape": "TensorShape or list/tuple or None",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.is_tensor": {
        "Parameter type": {
            "x": "Python object"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.stateless_gamma": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "seed": "shape [2] Tensor, int32 or int64",
            "alpha": "Tensor",
            "beta": "Tensor",
            "dtype": "Floating point dtype",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "shape",
            "seed",
            "alpha"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.SquaredHinge": {
        "Parameter type": {
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'squared_hinge')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sysconfig.get_build_info": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.tan": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.irfft3d": {
        "Parameter type": {
            "input": "Tensor (complex64 or complex128)",
            "fft_length": "Tensor (int32, shape [3])",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.bessel_i1": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.load": {
        "Parameter type": {
            "path": "str",
            "element_spec": "Optional[nested structure of tf.TypeSpec]",
            "compression": "Optional[str] (default: 'NONE')",
            "reader_func": "Optional[function]"
        },
        "Mandatory Parameters": [
            "path"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.bucketized_column": {
        "Parameter type": {
            "source_column": "tf.feature_column.numeric_column",
            "boundaries": "List[float] or Tuple[float]"
        },
        "Mandatory Parameters": [
            "source_column",
            "boundaries"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ragged.row_splits_to_segment_ids": {
        "Parameter type": {
            "splits": "Tensor (1-D integer)",
            "name": "Optional[str]",
            "out_type": "Optional[tf.DType]"
        },
        "Mandatory Parameters": [
            "splits"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.log2": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.convolution": {
        "Parameter type": {
            "input": "Tensor",
            "filters": "Tensor",
            "strides": "Optional[Sequence[int]]",
            "padding": "str",
            "data_format": "Optional[str]",
            "dilations": "Optional[Sequence[int]]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "filters"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "strides",
                "dilations"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilations",
            "(strides>1)&(dilations>1)"
        ]
    },
    "tf.image.resize_with_crop_or_pad": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "target_height": "int",
            "target_width": "int"
        },
        "Mandatory Parameters": [
            "image",
            "target_height",
            "target_width"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.ragged.map_flat_values": {
        "Parameter type": {
            "op": "Callable",
            "*args": "Variable positional arguments",
            "**kwargs": "Variable keyword arguments"
        },
        "Mandatory Parameters": [
            "op"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.segment_sum": {
        "Parameter type": {
            "data": "Tensor",
            "indices": "1-D Tensor",
            "segment_ids": "1-D Tensor",
            "num_segments": "Optional[int32]",
            "name": "Optional[str]",
            "sparse_gradient": "Optional[bool]"
        },
        "Mandatory Parameters": [
            "data",
            "indices",
            "segment_ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.is_inf": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.random_flip_up_down": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "seed": "Optional[int] (default: None)"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.lcm": {
        "Parameter type": {
            "x1": "Tensor or array-like",
            "x2": "Tensor or array-like"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorIdentity": {
        "Parameter type": {
            "num_rows": "int",
            "batch_shape": "Optional[List[int]]",
            "dtype": "Optional[tf.DType]",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "assert_proper_shapes": "bool",
            "name": "str"
        },
        "Mandatory Parameters": [
            "num_rows"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.quantization.dequantize": {
        "Parameter type": {
            "input": "Tensor (types: qint8, quint8, qint32, qint16, quint16)",
            "min_range": "Tensor (type: float32)",
            "max_range": "Tensor (type: float32)",
            "mode": "Optional[str] (default: 'MIN_COMBINED'; options: 'MIN_COMBINED', 'MIN_FIRST', 'SCALED')",
            "name": "Optional[str]",
            "axis": "Optional[int] (default: -1)",
            "narrow_range": "Optional[bool] (default: False)",
            "dtype": "Optional[tf.DType] (default: tf.float32; options: tf.bfloat16, tf.float32)"
        },
        "Mandatory Parameters": [
            "input",
            "min_range",
            "max_range"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "dtype",
            "mode",
            "(dtype == tf.bfloat16) & (mode != 'MIN_COMBINED')"
        ]
    },
    "tf.feature_column.sequence_categorical_column_with_vocabulary_file": {
        "Parameter type": {
            "key": "str",
            "vocabulary_file": "str",
            "vocabulary_size": "Optional[int]",
            "num_oov_buckets": "int",
            "default_value": "Optional[int]",
            "dtype": "Union[tf.dtypes.string, tf.dtypes.int32, tf.dtypes.int64]"
        },
        "Mandatory Parameters": [
            "key",
            "vocabulary_file"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "num_oov_buckets",
                "default_value"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.ndtri": {
        "Parameter type": {
            "x": "Tensor (float or double)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.special.bessel_y1": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.GlorotNormal": {
        "Parameter type": {
            "seed": "Optional[Union[int, keras.backend.SeedGenerator]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.polygamma": {
        "Parameter type": {
            "a": "Tensor (float32 or float64)",
            "x": "Tensor (same type as a)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "a",
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.Optimizer": {
        "Parameter type": {
            "name": "str",
            "gradient_aggregator": "Optional[tf.keras.optimizers.GradientAggregator]",
            "gradient_transformers": "Optional[List[tf.keras.optimizers.GradientTransformer]]",
            "kwargs": "Dict"
        },
        "Mandatory Parameters": [
            "name"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.CriticalSection": {
        "Parameter type": {
            "name": "Optional[str]",
            "shared_name": "Optional[str]",
            "critical_section_def": "Optional[CriticalSectionDef]",
            "import_scope": "Optional[str]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.atrous_conv2d_transpose": {
        "Parameter type": {
            "value": "Tensor (shape: [batch, in_height, in_width, in_channels])",
            "filters": "Tensor (shape: [filter_height, filter_width, out_channels, in_channels])",
            "output_shape": "Tensor (shape: [batch, out_height, out_width, out_channels])",
            "rate": "int32",
            "padding": "str (options: 'VALID', 'SAME')",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value",
            "filters",
            "output_shape",
            "rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.SparseTensor": {
        "Parameter type": {
            "indices": "Tensor (shape: [N, ndims], dtype: int64)",
            "values": "Tensor (shape: [N])",
            "dense_shape": "Tensor (shape: [ndims], dtype: int64)"
        },
        "Mandatory Parameters": [
            "indices",
            "values",
            "dense_shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.inception_resnet_v2.decode_predictions": {
        "Parameter type": {
            "preds": "NumPy array",
            "top": "int (default: 5)"
        },
        "Mandatory Parameters": [
            "preds"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.BatchNormalization": {
        "Parameter type": {
            "axis": "int",
            "momentum": "float",
            "epsilon": "float",
            "center": "bool",
            "scale": "bool",
            "beta_initializer": "str or Initializer instance",
            "gamma_initializer": "str or Initializer instance",
            "moving_mean_initializer": "str or Initializer instance",
            "moving_variance_initializer": "str or Initializer instance",
            "beta_regularizer": "Regularizer instance or None",
            "gamma_regularizer": "Regularizer instance or None",
            "beta_constraint": "Constraint instance or None",
            "gamma_constraint": "Constraint instance or None",
            "renorm": "bool",
            "renorm_clipping": "dict or None",
            "renorm_momentum": "float",
            "fused": "bool or None",
            "trainable": "bool",
            "virtual_batch_size": "int or None",
            "adjustment": "callable or None",
            "name": "str or None"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strings.lower": {
        "Parameter type": {
            "input": "Tensor (type: string)",
            "encoding": "string (default: '')",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.eigh": {
        "Parameter type": {
            "tensor": "Tensor (shape: [..., N, N])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.deserialize": {
        "Parameter type": {
            "config": "Metric configuration (could be a dict or a string)",
            "custom_objects": "Optional[dict] (mapping strings to custom objects)"
        },
        "Mandatory Parameters": [
            "config"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.RNN": {
        "Parameter type": {
            "cell": "RNN cell instance or list of RNN cell instances",
            "return_sequences": "Boolean (default: False)",
            "return_state": "Boolean (default: False)",
            "go_backwards": "Boolean (default: False)",
            "stateful": "Boolean (default: False)",
            "unroll": "Boolean (default: False)",
            "time_major": "Boolean (default: False)"
        },
        "Mandatory Parameters": [
            "cell"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.serialize": {
        "Parameter type": {
            "initializer": "tf.keras.initializers.Initializer"
        },
        "Mandatory Parameters": [
            "initializer"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.Sum": {
        "Parameter type": {
            "name": "str (default: 'sum')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.Generator": {
        "Parameter type": {
            "copy_from": "Optional[tf.random.Generator]",
            "state": "Optional[tf.Variable]",
            "alg": "Optional[str]"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [
            [
                "copy_from",
                "state"
            ],
            [
                "copy_from",
                "alg"
            ],
            [
                "state",
                "alg"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.SeparableConv1D": {
        "Parameter type": {
            "filters": "int",
            "kernel_size": "int or tuple/list of 1 integers",
            "strides": "int or tuple/list of 1 integers",
            "padding": "string",
            "data_format": "string",
            "dilation_rate": "int or tuple/list of 1 integers",
            "depth_multiplier": "int",
            "activation": "Activation function",
            "use_bias": "bool",
            "depthwise_initializer": "Initializer",
            "pointwise_initializer": "Initializer",
            "bias_initializer": "Initializer",
            "depthwise_regularizer": "Regularizer",
            "pointwise_regularizer": "Regularizer",
            "bias_regularizer": "Regularizer",
            "activity_regularizer": "Regularizer",
            "depthwise_constraint": "Projection function",
            "pointwise_constraint": "Projection function",
            "bias_constraint": "Projection function"
        },
        "Mandatory Parameters": [
            "filters",
            "kernel_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation_rate",
            "(strides > 1) & (dilation_rate > 1)"
        ]
    },
    "tf.experimental.numpy.fabs": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.callbacks.CallbackList": {
        "Parameter type": {
            "callbacks": "Optional[List[tf.keras.callbacks.Callback]] (default: None)",
            "add_history": "bool (default: False)",
            "add_progbar": "bool (default: False)",
            "model": "Optional[tf.keras.Model] (default: None)",
            "params": "Dict (default: empty dict)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.RepeatVector": {
        "Parameter type": {
            "n": "int"
        },
        "Mandatory Parameters": [
            "n"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.foldl": {
        "Parameter type": {
            "fn": "callable",
            "elems": "tensor or (possibly nested) sequence of tensors",
            "initializer": "optional tensor or (possibly nested) sequence of tensors",
            "parallel_iterations": "int (default: 10)",
            "back_prop": "bool (default: True)",
            "swap_memory": "bool (default: False)",
            "name": "optional str"
        },
        "Mandatory Parameters": [
            "fn",
            "elems"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.subtract": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.executing_eagerly": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.guarantee_const": {
        "Parameter type": {
            "input": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.compat.forward_compatible": {
        "Parameter type": {
            "year": "int",
            "month": "int",
            "day": "int"
        },
        "Mandatory Parameters": [
            "year",
            "month",
            "day"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.fill_empty_rows": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "default_value": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sp_input",
            "default_value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.transpose": {
        "Parameter type": {
            "sp_input": "SparseTensor",
            "perm": "Optional[List[int]]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "sp_input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.train.ExponentialMovingAverage": {
        "Parameter type": {
            "decay": "float, Tensor, or Variable (scalar)",
            "num_updates": "Optional[int] (default: None)",
            "zero_debias": "bool (default: False)",
            "name": "str (default: 'ExponentialMovingAverage')"
        },
        "Mandatory Parameters": [
            "decay"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorScaledIdentity": {
        "Parameter type": {
            "num_rows": "int",
            "multiplier": "Tensor",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "bool",
            "assert_proper_shapes": "bool",
            "name": "str"
        },
        "Mandatory Parameters": [
            "num_rows",
            "multiplier"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.triangular_solve": {
        "Parameter type": {
            "matrix": "Tensor (types: float64, float32, half, complex64, complex128)",
            "rhs": "Tensor (same type as matrix)",
            "lower": "bool (default: True)",
            "adjoint": "bool (default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "matrix",
            "rhs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.compat.dimension_at_index": {
        "Parameter type": {
            "shape": "TensorShape instance",
            "index": "int"
        },
        "Mandatory Parameters": [
            "shape",
            "index"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.optimizers.serialize": {
        "Parameter type": {
            "optimizer": "Optimizer instance"
        },
        "Mandatory Parameters": [
            "optimizer"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.get_file": {
        "Parameter type": {
            "fname": "str",
            "origin": "str",
            "untar": "bool",
            "md5_hash": "str",
            "file_hash": "str",
            "cache_subdir": "str",
            "hash_algorithm": "str",
            "extract": "bool",
            "archive_format": "str",
            "cache_dir": "str",
            "force_download": "bool"
        },
        "Mandatory Parameters": [
            "origin"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "md5_hash",
                "file_hash"
            ],
            [
                "untar",
                "extract"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.segment_mean": {
        "Parameter type": {
            "data": "Tensor",
            "indices": "1-D Tensor",
            "segment_ids": "1-D Tensor",
            "num_segments": "Optional[int32]",
            "name": "Optional[str]",
            "sparse_gradient": "Optional[bool]"
        },
        "Mandatory Parameters": [
            "data",
            "indices",
            "segment_ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.fixed_unigram_candidate_sampler": {
        "Parameter type": {
            "true_classes": "Tensor (int64, shape: [batch_size, num_true])",
            "num_true": "int",
            "num_sampled": "int",
            "unique": "bool",
            "range_max": "int",
            "vocab_file": "str (optional)",
            "distortion": "float (default: 1.0)",
            "num_reserved_ids": "int (default: 0)",
            "num_shards": "int (default: 1)",
            "shard": "int (default: 0)",
            "unigrams": "list (optional)",
            "seed": "int (optional)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "true_classes",
            "num_true",
            "num_sampled",
            "range_max"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "vocab_file",
                "unigrams"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.train.CheckpointManager": {
        "Parameter type": {
            "checkpoint": "tf.train.Checkpoint",
            "directory": "str",
            "max_to_keep": "int",
            "keep_checkpoint_every_n_hours": "Optional[float]",
            "checkpoint_name": "str",
            "step_counter": "Optional[tf.Variable]",
            "checkpoint_interval": "Optional[int]",
            "init_fn": "Optional[Callable]"
        },
        "Mandatory Parameters": [
            "checkpoint",
            "directory"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random_normal_initializer": {
        "Parameter type": {
            "mean": "float (default: 0.0)",
            "stddev": "float (default: 0.05)",
            "seed": "int (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.reshape": {
        "Parameter type": {
            "tensor": "Tensor",
            "shape": "Tensor (type: int32 or int64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "tensor",
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.banded_triangular_solve": {
        "Parameter type": {
            "bands": "Tensor (shape: [..., K, M])",
            "rhs": "Tensor (shape: [..., M] or [..., M, N])",
            "lower": "bool (default: True)",
            "adjoint": "bool (default: False)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "bands",
            "rhs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.log10": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.signbit": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.sparse.segment_sqrt_n": {
        "Parameter type": {
            "data": "Tensor",
            "indices": "1-D Tensor",
            "segment_ids": "1-D Tensor",
            "num_segments": "Optional[int32]",
            "name": "Optional[str]",
            "sparse_gradient": "Optional[bool]"
        },
        "Mandatory Parameters": [
            "data",
            "indices",
            "segment_ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.regularizers.L2": {
        "Parameter type": {
            "l2": "float (default: 0.01)"
        },
        "Mandatory Parameters": [
            "l2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.CategoricalHinge": {
        "Parameter type": {
            "name": "str (default: 'categorical_hinge')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.applications.nasnet.preprocess_input": {
        "Parameter type": {
            "x": "Floating point numpy array or backend-native tensor",
            "data_format": "Optional string (default: None)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.HeUniform": {
        "Parameter type": {
            "seed": "Optional[Union[int, keras.backend.SeedGenerator]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.matmul": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.identity": {
        "Parameter type": {
            "input": "Tensor, Variable, CompositeTensor, or convertible to tensor",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.square": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.ZeroPadding1D": {
        "Parameter type": {
            "padding": "Union[int, Tuple[int], Dict]",
            "data_format": "str (default: 'channels_last')"
        },
        "Mandatory Parameters": [
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.ctc_greedy_decoder": {
        "Parameter type": {
            "inputs": "3-D float Tensor (shape: [max_time, batch_size, num_classes])",
            "sequence_length": "1-D int32 Tensor (shape: [batch_size])",
            "merge_repeated": "Boolean (default: True)",
            "blank_index": "Optional int (default: num_classes - 1)"
        },
        "Mandatory Parameters": [
            "inputs",
            "sequence_length"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.CosineSimilarity": {
        "Parameter type": {
            "axis": "int (default: -1)",
            "reduction": "str (default: 'sum_over_batch_size')",
            "name": "str (default: 'cosine_similarity')",
            "dtype": "Union[tf.DType, keras.DTypePolicy, None] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.async_clear_error": {
        "Parameter type": {},
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.RandomNormal": {
        "Parameter type": {
            "mean": "float (default: 0.0)",
            "stddev": "float (default: 0.05)",
            "seed": "Optional[Union[int, keras.backend.SeedGenerator]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.max_pool_with_argmax": {
        "Parameter type": {
            "input": "Tensor",
            "ksize": "int or list of ints",
            "strides": "int or list of ints",
            "padding": "string",
            "data_format": "string",
            "output_dtype": "tf.DType",
            "include_batch_in_index": "boolean",
            "name": "string"
        },
        "Mandatory Parameters": [
            "input",
            "ksize",
            "strides",
            "padding"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.ifftshift": {
        "Parameter type": {
            "x": "Tensor",
            "axes": "Optional[Union[int, Tuple[int]]]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.get_structure": {
        "Parameter type": {
            "dataset_or_iterator": "Union[tf.data.Dataset, tf.data.Iterator]"
        },
        "Mandatory Parameters": [
            "dataset_or_iterator"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.issubdtype": {
        "Parameter type": {
            "arg1": "dtype_like",
            "arg2": "dtype_like"
        },
        "Mandatory Parameters": [
            "arg1",
            "arg2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.eye": {
        "Parameter type": {
            "num_rows": "int32 scalar Tensor",
            "num_columns": "optional int32 scalar Tensor",
            "batch_shape": "optional list/tuple of ints or int32 Tensor",
            "dtype": "optional dtype (default: float32)",
            "name": "optional string"
        },
        "Mandatory Parameters": [
            "num_rows"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.irfft": {
        "Parameter type": {
            "input": "Tensor (complex64 or complex128)",
            "fft_length": "Tensor (int32, shape [1])",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.feature_column.categorical_column_with_vocabulary_file": {
        "Parameter type": {
            "key": "str",
            "vocabulary_file": "str",
            "vocabulary_size": "Optional[int]",
            "dtype": "Union[tf.dtypes.string, tf.dtypes.int32, tf.dtypes.int64]",
            "default_value": "Optional[int]",
            "num_oov_buckets": "int",
            "file_format": "Optional[str]"
        },
        "Mandatory Parameters": [
            "key",
            "vocabulary_file"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "default_value",
                "num_oov_buckets"
            ]
        ],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.greater_equal": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.sparse_categorical_crossentropy": {
        "Parameter type": {
            "y_true": "Tensor",
            "y_pred": "Tensor",
            "from_logits": "bool (default: False)",
            "ignore_class": "Optional[int] (default: None)",
            "axis": "int (default: -1)"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.grayscale_to_rgb": {
        "Parameter type": {
            "images": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "images"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.get_registered_object": {
        "Parameter type": {
            "name": "str",
            "custom_objects": "Optional[dict]",
            "module_objects": "Optional[dict]"
        },
        "Mandatory Parameters": [
            "name"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.depthwise_conv2d_backprop_filter": {
        "Parameter type": {
            "input": "Tensor (shape: based on data_format)",
            "filter_sizes": "Tensor of int32 (shape: [filter_height, filter_width, in_channels, depthwise_multiplier])",
            "out_backprop": "Tensor (same type as input, shape based on data_format)",
            "strides": "List of ints",
            "padding": "Union[str, List[List[int]]] (options: 'SAME', 'VALID', or explicit padding)",
            "data_format": "Optional[str] (default: 'NHWC')",
            "dilations": "Optional[List[int]] (default: [1, 1, 1, 1])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "input",
            "filter_sizes",
            "out_backprop",
            "strides"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "dilations",
            "strides",
            "(dilations != [1,1,1,1]) & (strides != [1,1,1,1])"
        ]
    },
    "tf.data.experimental.choose_from_datasets": {
        "Parameter type": {
            "datasets": "List[tf.data.Dataset]",
            "choice_dataset": "tf.data.Dataset",
            "stop_on_empty_dataset": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "datasets",
            "choice_dataset"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.ZeroPadding3D": {
        "Parameter type": {
            "padding": "Union[int, Tuple[int], Tuple[Tuple[int]]] (default: (1, 1, 1))",
            "data_format": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Conv1DTranspose": {
        "Parameter type": {
            "filters": "int",
            "kernel_size": "int or tuple/list of 1 integer",
            "strides": "int or tuple/list of 1 integer",
            "padding": "string ('valid' or 'same')",
            "output_padding": "int or tuple/list of 1 integer",
            "data_format": "string ('channels_last' or 'channels_first')",
            "dilation_rate": "int or tuple/list of 1 integers",
            "activation": "Activation function",
            "use_bias": "bool",
            "kernel_initializer": "Initializer",
            "bias_initializer": "Initializer",
            "kernel_regularizer": "Regularizer",
            "bias_regularizer": "Regularizer",
            "activity_regularizer": "Regularizer",
            "kernel_constraint": "Projection function",
            "bias_constraint": "Projection function"
        },
        "Mandatory Parameters": [
            "filters",
            "kernel_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "strides",
            "dilation_rate",
            "(strides > 1) & (dilation_rate > 1)"
        ]
    },
    "tf.sparse.bincount": {
        "Parameter type": {
            "values": "Tensor, RaggedTensor, or SparseTensor",
            "weights": "Optional[Tensor, RaggedTensor, or SparseTensor]",
            "axis": "int (default: 0)",
            "minlength": "Optional[int]",
            "maxlength": "Optional[int]",
            "binary_output": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "values"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.service.WorkerServer": {
        "Parameter type": {
            "config": "tf.data.experimental.service.WorkerConfig",
            "start": "bool (default: True)"
        },
        "Mandatory Parameters": [
            "config"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.metrics.MeanAbsoluteError": {
        "Parameter type": {
            "name": "str (default: 'mean_absolute_error')",
            "dtype": "Optional[tf.dtypes.DType] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.round": {
        "Parameter type": {
            "x": "Tensor (type: float16, float32, float64, int32, or int64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.clip_by_norm": {
        "Parameter type": {
            "t": "Tensor or IndexedSlices (floating point type)",
            "clip_norm": "0-D (scalar) Tensor (floating point, > 0)",
            "axes": "1-D (vector) Tensor of int32 (optional, default: None)",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "t",
            "clip_norm"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.concat": {
        "Parameter type": {
            "values": "List of Tensor objects or a single Tensor",
            "axis": "0-D int32 Tensor",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "values",
            "axis"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.log": {
        "Parameter type": {
            "x": "Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.is_jpeg": {
        "Parameter type": {
            "contents": "0-D string tensor",
            "name": "Optional[string]"
        },
        "Mandatory Parameters": [
            "contents"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.unsorted_segment_sum": {
        "Parameter type": {
            "data": "Tensor",
            "segment_ids": "Tensor",
            "num_segments": "Tensor",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "data",
            "segment_ids",
            "num_segments"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.ones": {
        "Parameter type": {
            "shape": "Tuple[int, ...] (required)"
        },
        "Mandatory Parameters": [
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.bessel_i0": {
        "Parameter type": {
            "x": "Tensor or SparseTensor (types: half, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.compat.as_str_any": {
        "Parameter type": {
            "value": "object that can be converted to str",
            "encoding": "str (default: not specified)"
        },
        "Mandatory Parameters": [
            "value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.dlpack.to_dlpack": {
        "Parameter type": {
            "tf_tensor": "Tensorflow eager tensor"
        },
        "Mandatory Parameters": [
            "tf_tensor"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.bitwise_and": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.exp": {
        "Parameter type": {
            "x": "tf.Tensor (types: bfloat16, half, float32, float64, complex64, complex128)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.initializers.VarianceScaling": {
        "Parameter type": {
            "scale": "float (default: 1.0)",
            "mode": "str (default: 'fan_in')",
            "distribution": "str (default: 'truncated_normal')",
            "seed": "Optional[Union[int, keras.backend.SeedGenerator]] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.log_uniform_candidate_sampler": {
        "Parameter type": {
            "true_classes": "Tensor (int64, shape: [batch_size, num_true])",
            "num_true": "int",
            "num_sampled": "int",
            "unique": "bool",
            "range_max": "int",
            "seed": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "true_classes",
            "num_true",
            "num_sampled",
            "range_max"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.model_to_dot": {
        "Parameter type": {
            "model": "Keras model instance",
            "show_shapes": "bool (default: False)",
            "show_dtype": "bool (default: False)",
            "show_layer_names": "bool (default: True)",
            "rankdir": "str (default: 'TB')",
            "expand_nested": "bool (default: False)",
            "dpi": "int (default: 96)",
            "subgraph": "bool (default: False)",
            "show_layer_activations": "bool (default: False)",
            "show_trainable": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "model"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.encode_proto": {
        "Parameter type": {
            "sizes": "Tensor (type: int32, shape: [batch_shape, len(field_names)])",
            "values": "List of Tensors",
            "field_names": "List of strings",
            "message_type": "string",
            "descriptor_source": "optional string (default: 'local://')",
            "name": "optional string"
        },
        "Mandatory Parameters": [
            "sizes",
            "values",
            "field_names",
            "message_type"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.realdiv": {
        "Parameter type": {
            "x": "Tensor",
            "y": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "y"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.take_while": {
        "Parameter type": {
            "predicate": "function mapping nested structure of tensors to scalar tf.bool tensor"
        },
        "Mandatory Parameters": [
            "predicate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.function": {
        "Parameter type": {
            "func": "Callable",
            "input_signature": "Optional[List[tf.TensorSpec]]",
            "autograph": "bool",
            "experimental_implements": "Optional[Union[str, NameAttrList]]",
            "experimental_autograph_options": "Optional[Tuple[tf.autograph.experimental.Feature]]",
            "experimental_relax_shapes": "bool",
            "experimental_compile": "Optional[bool]",
            "experimental_follow_type_hints": "Optional[bool]",
            "reduce_retracing": "bool",
            "jit_compile": "Optional[bool]"
        },
        "Mandatory Parameters": [
            "func"
        ],
        "Mutually Exclusive Parameter Pairs": [
            [
                "experimental_compile",
                "jit_compile"
            ],
            [
                "experimental_relax_shapes",
                "reduce_retracing"
            ],
            [
                "experimental_follow_type_hints",
                "reduce_retracing"
            ]
        ],
        "Mandatory Coexistence Parameters": [
            [
                "func",
                "input_signature"
            ],
            [
                "experimental_implements",
                "experimental_autograph_options"
            ],
            [
                "experimental_compile",
                "experimental_relax_shapes"
            ],
            [
                "experimental_compile",
                "experimental_follow_type_hints"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": [
            "experimental_compile",
            "reduce_retracing",
            "(experimental_compile is not None) & (reduce_retracing is not None)"
        ]
    },
    "tf.train.get_checkpoint_state": {
        "Parameter type": {
            "checkpoint_dir": "str",
            "latest_filename": "Optional[str] (default: 'checkpoint')"
        },
        "Mandatory Parameters": [
            "checkpoint_dir"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.create_rng_state": {
        "Parameter type": {
            "seed": "Union[int, numpy.ndarray]",
            "alg": "Union[str, Algorithm, int]"
        },
        "Mandatory Parameters": [
            "seed",
            "alg"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.deserialize_keras_object": {
        "Parameter type": {
            "identifier": "Python dict describing the object.",
            "module_objects": "Optional[Python dict] containing a mapping between object names and their classes.",
            "custom_objects": "Optional[Python dict] containing a mapping between custom object names and their classes or functions.",
            "printable_module_name": "str (default: 'object')"
        },
        "Mandatory Parameters": [
            "identifier"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.cast": {
        "Parameter type": {
            "x": "Tensor or SparseTensor or IndexedSlices of numeric type",
            "dtype": "Destination type (same as supported types for x)",
            "name": "Optional string (operation name)"
        },
        "Mandatory Parameters": [
            "x",
            "dtype"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.datasets.imdb.load_data": {
        "Parameter type": {
            "path": "str (default: 'imdb.npz')",
            "num_words": "Optional[int] (default: None)",
            "skip_top": "int (default: 0)",
            "maxlen": "Optional[int] (default: None)",
            "seed": "int (default: 113)",
            "start_char": "int (default: 1)",
            "oov_char": "int (default: 2)",
            "index_from": "int (default: 3)",
            "**kwargs": "dict"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.normalize": {
        "Parameter type": {
            "x": "Array (NumPy array or backend tensor)",
            "axis": "int (default: -1)",
            "order": "int (default: 2)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.segment_max": {
        "Parameter type": {
            "data": "Tensor",
            "segment_ids": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "data",
            "segment_ids"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Cropping2D": {
        "Parameter type": {
            "cropping": "Union[int, Tuple[int, int], Tuple[Tuple[int, int], Tuple[int, int]]] (default: ((0, 0), (0, 0)))",
            "data_format": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.batch_normalization": {
        "Parameter type": {
            "x": "Tensor",
            "mean": "Tensor",
            "variance": "Tensor",
            "offset": "Optional[Tensor]",
            "scale": "Optional[Tensor]",
            "variance_epsilon": "float",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "mean",
            "variance"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.compute_accidental_hits": {
        "Parameter type": {
            "true_classes": "Tensor (int64, shape: [batch_size, num_true])",
            "sampled_candidates": "Tensor (int64, shape: [num_sampled])",
            "num_true": "int",
            "seed": "Optional[int] (default: None)",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "true_classes",
            "sampled_candidates",
            "num_true"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.Attention": {
        "Parameter type": {
            "use_scale": "bool (default: False)",
            "dropout": "float (default: 0.0)",
            "seed": "int (optional)",
            "score_mode": "str (default: 'dot'; options: 'dot', 'concat')"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.LSTM": {
        "Parameter type": {
            "units": "int",
            "activation": "str or None",
            "recurrent_activation": "str or None",
            "use_bias": "bool",
            "kernel_initializer": "str or Initializer instance",
            "recurrent_initializer": "str or Initializer instance",
            "bias_initializer": "str or Initializer instance",
            "unit_forget_bias": "bool",
            "kernel_regularizer": "Regularizer or None",
            "recurrent_regularizer": "Regularizer or None",
            "bias_regularizer": "Regularizer or None",
            "activity_regularizer": "Regularizer or None",
            "kernel_constraint": "Constraint or None",
            "recurrent_constraint": "Constraint or None",
            "bias_constraint": "Constraint or None",
            "dropout": "float",
            "recurrent_dropout": "float",
            "return_sequences": "bool",
            "return_state": "bool",
            "go_backwards": "bool",
            "stateful": "bool",
            "time_major": "bool",
            "unroll": "bool",
            "use_cudnn": "str"
        },
        "Mandatory Parameters": [
            "units"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": [
            "activation",
            "recurrent_activation",
            "(activation != 'tanh') or (recurrent_activation != 'sigmoid')"
        ]
    },
    "tf.io.extract_jpeg_shape": {
        "Parameter type": {
            "contents": "Tensor (type: string, shape: 0-D)",
            "output_type": "Optional[tf.DType] (default: tf.int32; options: tf.int32, tf.int64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "contents"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.cumsum": {
        "Parameter type": {
            "x": "Tensor",
            "axis": "int32",
            "exclusive": "bool",
            "reverse": "bool",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.LinearOperatorInversion": {
        "Parameter type": {
            "operator": "LinearOperator",
            "is_non_singular": "Optional[bool]",
            "is_self_adjoint": "Optional[bool]",
            "is_positive_definite": "Optional[bool]",
            "is_square": "Optional[bool]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "operator"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.utils.register_keras_serializable": {
        "Parameter type": {
            "package": "str (default: 'Custom')",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.adjoint": {
        "Parameter type": {
            "matrix": "Tensor (shape: [..., M, M])",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "matrix"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.models.clone_model": {
        "Parameter type": {
            "model": "Instance of `Model` (could be a Functional model or a Sequential model)",
            "input_tensors": "Optional list of input tensors or InputLayer objects",
            "clone_function": "Callable with signature `fn(layer)`",
            "call_function": "Callable with signature `fn(layer, *args, **kwargs)`",
            "recursive": "Boolean"
        },
        "Mandatory Parameters": [
            "model"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.convert_image_dtype": {
        "Parameter type": {
            "image": "Tensor",
            "dtype": "DType",
            "saturate": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "image",
            "dtype"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.stateless_random_contrast": {
        "Parameter type": {
            "image": "Tensor (shape: (..., height, width, channels))",
            "lower": "float",
            "upper": "float",
            "seed": "Tensor (shape: [2], dtype: int32 or int64)"
        },
        "Mandatory Parameters": [
            "image",
            "lower",
            "upper",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.count_nonzero": {
        "Parameter type": {
            "input": "Tensor (numeric type, bool, or string)",
            "axis": "Optional[Union[int, List[int]]] (default: None)",
            "keepdims": "Optional[bool] (default: None)",
            "dtype": "Optional[tf.dtypes.DType] (default: tf.int64)",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.register_tensor_conversion_function": {
        "Parameter type": {
            "base_type": "Type or tuple of Types",
            "conversion_func": "Callable",
            "priority": "int (default: 100)"
        },
        "Mandatory Parameters": [
            "base_type",
            "conversion_func"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.layers.AveragePooling1D": {
        "Parameter type": {
            "pool_size": "int",
            "strides": "int or None",
            "padding": "str",
            "data_format": "str"
        },
        "Mandatory Parameters": [
            "pool_size"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.conjugate": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.KLD": {
        "Parameter type": {
            "y_true": "Tensor",
            "y_pred": "Tensor"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.scale_regularization_loss": {
        "Parameter type": {
            "regularization_loss": "Tensor"
        },
        "Mandatory Parameters": [
            "regularization_loss"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.quantization.quantized_concat": {
        "Parameter type": {
            "concat_dim": "Tensor of type int32",
            "values": "List of at least 2 Tensor objects with the same type",
            "input_mins": "List of Tensor objects with type float32",
            "input_maxes": "List of Tensor objects with type float32",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "concat_dim",
            "values",
            "input_mins",
            "input_maxes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [
            [
                "values",
                "input_mins",
                "input_maxes"
            ]
        ],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.signal.idct": {
        "Parameter type": {
            "input": "Tensor (float32 or float64)",
            "type": "int (default: 2)",
            "n": "None (default: None)",
            "axis": "int (default: -1)",
            "norm": "Optional[str] (default: None)",
            "name": "Optional[str] (default: None)"
        },
        "Mandatory Parameters": [
            "input"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.io.decode_compressed": {
        "Parameter type": {
            "bytes": "Tensor (type: string)",
            "compression_type": "string (default: empty string)",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "bytes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.experimental.numpy.add": {
        "Parameter type": {
            "x1": "Tensor",
            "x2": "Tensor"
        },
        "Mandatory Parameters": [
            "x1",
            "x2"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.unsorted_segment_mean": {
        "Parameter type": {
            "data": "Tensor (floating point or complex dtype)",
            "segment_ids": "Tensor (integer type)",
            "num_segments": "Tensor (integer scalar)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "data",
            "segment_ids",
            "num_segments"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.learned_unigram_candidate_sampler": {
        "Parameter type": {
            "true_classes": "Tensor (int64, shape: [batch_size, num_true])",
            "num_true": "int",
            "num_sampled": "int",
            "unique": "bool",
            "range_max": "int",
            "seed": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "true_classes",
            "num_true",
            "num_sampled",
            "range_max"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.linalg.experimental.conjugate_gradient": {
        "Parameter type": {
            "operator": "LinearOperator",
            "rhs": "Tensor (shape: [..., N])",
            "preconditioner": "Optional[LinearOperator]",
            "x": "Optional[Tensor (shape: [..., N])]",
            "tol": "float (default: 1e-05)",
            "max_iter": "int (default: 20)",
            "name": "Optional[str] (default: 'conjugate_gradient')"
        },
        "Mandatory Parameters": [
            "operator",
            "rhs"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.stateless_parameterized_truncated_normal": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "seed": "shape [2] Tensor of int32 or int64",
            "means": "Tensor or Python value of dtype",
            "stddevs": "Tensor or Python value of dtype",
            "minvals": "Tensor or Python value of dtype",
            "maxvals": "Tensor or Python value of dtype",
            "name": "Optional string"
        },
        "Mandatory Parameters": [
            "shape",
            "seed"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.zero_fraction": {
        "Parameter type": {
            "value": "Tensor",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.normal": {
        "Parameter type": {
            "shape": "1-D integer Tensor or Python array",
            "mean": "Tensor or Python value of type `dtype`",
            "stddev": "Tensor or Python value of type `dtype`",
            "dtype": "float type (float16, bfloat16, float32, float64)",
            "seed": "Python integer (optional)",
            "name": "string (optional)"
        },
        "Mandatory Parameters": [
            "shape"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.math.ceil": {
        "Parameter type": {
            "x": "tf.Tensor (types: bfloat16, half, float32, float64, int32)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.data.experimental.make_batched_features_dataset": {
        "Parameter type": {
            "file_pattern": "List of strings or patterns",
            "batch_size": "int",
            "features": "dict mapping feature keys to FixedLenFeature or VarLenFeature",
            "reader": "function or class (optional)",
            "label_key": "string (optional)",
            "reader_args": "list or tuple (optional)",
            "num_epochs": "int (optional)",
            "shuffle": "bool (default: True)",
            "shuffle_buffer_size": "int (default: 10000)",
            "shuffle_seed": "int (optional)",
            "prefetch_buffer_size": "int (optional)",
            "reader_num_threads": "int (optional)",
            "parser_num_threads": "int (optional)",
            "sloppy_ordering": "bool (default: False)",
            "drop_final_batch": "bool (default: False)"
        },
        "Mandatory Parameters": [
            "file_pattern",
            "batch_size",
            "features"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.batch_norm_with_global_normalization": {
        "Parameter type": {
            "input": "Tensor (4D)",
            "mean": "Tensor (1D)",
            "variance": "Tensor (1D)",
            "beta": "Tensor (1D)",
            "gamma": "Tensor (1D)",
            "variance_epsilon": "float",
            "scale_after_normalization": "bool",
            "name": "str (optional)"
        },
        "Mandatory Parameters": [
            "input",
            "mean",
            "variance",
            "beta",
            "gamma"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.activations.selu": {
        "Parameter type": {
            "x": "Tensor"
        },
        "Mandatory Parameters": [
            "x"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.moments": {
        "Parameter type": {
            "x": "Tensor",
            "axes": "Array of ints",
            "shift": "Optional[None]",
            "keepdims": "bool (default: False)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "axes"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.image.random_flip_left_right": {
        "Parameter type": {
            "image": "Tensor (shape: [batch, height, width, channels] or [height, width, channels])",
            "seed": "Optional[int] (default: None)"
        },
        "Mandatory Parameters": [
            "image"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.strided_slice": {
        "Parameter type": {
            "input_": "Tensor",
            "begin": "int32 or int64 Tensor",
            "end": "int32 or int64 Tensor",
            "strides": "int32 or int64 Tensor",
            "begin_mask": "int32",
            "end_mask": "int32",
            "ellipsis_mask": "int32",
            "new_axis_mask": "int32",
            "shrink_axis_mask": "int32",
            "var": "Variable or None",
            "name": "str or None"
        },
        "Mandatory Parameters": [
            "input_",
            "begin",
            "end"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.keras.losses.cosine_similarity": {
        "Parameter type": {
            "y_true": "Tensor",
            "y_pred": "Tensor",
            "axis": "int (default: -1)"
        },
        "Mandatory Parameters": [
            "y_true",
            "y_pred"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.random.shuffle": {
        "Parameter type": {
            "value": "Tensor",
            "seed": "Optional[Python integer]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "value"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.dropout": {
        "Parameter type": {
            "x": "Tensor",
            "rate": "Tensor",
            "noise_shape": "Optional[Tensor]",
            "seed": "Optional[int]",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "x",
            "rate"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    },
    "tf.nn.l2_loss": {
        "Parameter type": {
            "t": "Tensor (types: half, bfloat16, float32, float64)",
            "name": "Optional[str]"
        },
        "Mandatory Parameters": [
            "t"
        ],
        "Mutually Exclusive Parameter Pairs": [],
        "Mandatory Coexistence Parameters": [],
        "Conditional Mutual Exclusion Parameters": []
    }
}